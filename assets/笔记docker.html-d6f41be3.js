import{_ as o,E as t,S as c,W as l,a2 as r,$ as n,a3 as a,Z as e,aS as i}from"./framework-d5c0d2cb.js";const p={},d=n("p",null,"看越来越多人使用 docker 来进行服务的交付了，在深度学习环境的配置上有了 docker 也节省了很多时间。于是记了一些笔记，接下来通过在 docker 上搭建 NVIDIA 深度学习环境来熟悉吧！",-1),u=n("p",null,"docker 相对与虚拟机，占用空间更小，启动更快。它米有自己的内核且不会对操作系统和硬件进行模拟。",-1),m=n("p",null,"安装卸载指南 https://www.docker.com/",-1),v=i(`<p>docker 类似一个 linux 虚拟机，占有一个端口</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> version   
<span class="token function">docker</span> info       <span class="token comment">#显示 docker 的系统信息，包括镜像和容器的数量</span>
<span class="token function">docker</span> 命令 <span class="token parameter variable">--help</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令" aria-hidden="true">#</a> 镜像命令</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images 
<span class="token function">docker</span> search 镜像名称
<span class="token function">docker</span> pull tomcat:8
<span class="token comment">#如果不写 tag，默认就是 latest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像 <span class="token function">id</span> <span class="token comment">#删除指定的镜像</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-aq</span><span class="token variable">)</span></span> <span class="token comment">#删除全部的镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令" aria-hidden="true">#</a> 容器命令</h4><p>创建容器需要创建镜像</p><p><code>sudo docker pull ubuntu</code></p><p>新建容器并启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image <span class="token operator">|</span> <span class="token function">docker</span> container run <span class="token punctuation">[</span>可选参数<span class="token punctuation">]</span> image

<span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token string">&quot;Name&quot;</span>		容器名字 tomcat01 tomcat02 用来区分容器
<span class="token parameter variable">-d</span>					后台方式运行
<span class="token parameter variable">-it</span> 				使用交互方式运行，进入容器查看内容
<span class="token parameter variable">-p</span>					指定容器的端口 <span class="token parameter variable">-p</span> <span class="token number">8080</span><span class="token punctuation">(</span>宿主机<span class="token punctuation">)</span>:8080<span class="token punctuation">(</span>容器<span class="token punctuation">)</span>
		<span class="token parameter variable">-p</span> ip:主机端口:容器端口
		<span class="token parameter variable">-p</span> 主机端口:容器端口<span class="token punctuation">(</span>常用<span class="token punctuation">)</span>
		<span class="token parameter variable">-p</span> 容器端口
		容器端口
-P<span class="token punctuation">(</span>大写<span class="token punctuation">)</span> 				随机指定端口


<span class="token builtin class-name">exit</span> <span class="token comment">#容器直接退出</span>
ctrl +P +Q <span class="token comment">#容器不停止退出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment">#列出当前正在运行的容器</span>
  -a, <span class="token parameter variable">--all</span>             Show all containers <span class="token punctuation">(</span>default shows just running<span class="token punctuation">)</span>
  -n, <span class="token parameter variable">--last</span> int        Show n last created containers <span class="token punctuation">(</span>includes all states<span class="token punctuation">)</span> <span class="token punctuation">(</span>default -1<span class="token punctuation">)</span>
  -q, <span class="token parameter variable">--quiet</span>           Only display numeric IDs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> 容器 <span class="token function">id</span>   <span class="token comment">#删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rf</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>  <span class="token comment">#删除指定的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> -q<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>  <span class="token comment">#删除所有的容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动和停止容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start 容器 <span class="token function">id</span>	
<span class="token function">docker</span> restart 容器 <span class="token function">id</span>	
<span class="token function">docker</span> stop 容器 <span class="token function">id</span>	
<span class="token function">docker</span> <span class="token function">kill</span> 容器 <span class="token function">id</span>	<span class="token comment"># 强制停止当前容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用其他命令" tabindex="-1"><a class="header-anchor" href="#常用其他命令" aria-hidden="true">#</a> 常用其他命令</h4><p>后台运行容器的时候，如果容器没有前台进程，docker 就会自动停止他</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> centos
<span class="token comment"># 如果让容器运行一个 while 循环那么就可以发现它了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显示日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-t</span> <span class="token parameter variable">--tail</span> n 容器 <span class="token function">id</span> <span class="token comment">#查看 n 行日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-ft</span> 容器 <span class="token function">id</span> <span class="token comment">#查看并实时输出全部日志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>容器状态查看</p><p><code>docker top 容器 id</code> 查看容器进程信息</p><p><code>docker inspect 容器 id</code> 查看镜像的元数据</p><ul><li>Mounts 查看挂载卷</li><li>&quot;PortBindings&quot; 查看端口</li></ul><p><code>docker stats 容器 id</code> 查看 docker 容器使用内存情况</p><p>进入当前正在运行的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器 <span class="token function">id</span> /bin/bash
<span class="token function">docker</span> attach 容器 <span class="token function">id</span> <span class="token comment"># 进入容器正在执行的进程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从容器内拷贝文件到主机</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> 容器 id:容器内路径 主机目的路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/chengcodex/cloud/assets/img/master/assets/img/image-20200514214313962.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  attach      <span class="token comment">#当前 shell 下 attach 连接指定运行的镜像</span>
  build       Build an image from a Dockerfile 
  commit      Create a new image from a containers changes 
  <span class="token function">cp</span>          Copy files/folders between a container and the <span class="token builtin class-name">local</span> filesystem 
  create      Create a new container 
  <span class="token function">diff</span>        <span class="token comment">#查看 docker 容器的变化</span>
  events      Get real <span class="token function">time</span> events from the server 
  <span class="token builtin class-name">exec</span>        Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a running container 
  <span class="token builtin class-name">export</span>      <span class="token comment">#导出容器文件系统作为一个 tar 归档文件[对应 import]</span>
  <span class="token function">history</span>     Show the <span class="token function">history</span> of an image 
  images      List images 
  <span class="token function">import</span>      <span class="token comment"># 从 tar 包中导入内容创建一个文件系统镜像</span>
  info        Display system-wide information 
  inspect     Return low-level information on Docker objects 
  <span class="token function">kill</span>        Kill one or <span class="token function">more</span> running containers 
  load        Load an image from a <span class="token function">tar</span> archive or STDIN 
  login       Log <span class="token keyword">in</span> to a Docker registry 
  <span class="token builtin class-name">logout</span>      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or <span class="token function">more</span> containers
  port        List port mappings or a specific mapping <span class="token keyword">for</span> the container
  <span class="token function">ps</span>          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  <span class="token function">rename</span>      Rename a container
  restart     Restart one or <span class="token function">more</span> containers
  <span class="token function">rm</span>          Remove one or <span class="token function">more</span> containers
  rmi         Remove one or <span class="token function">more</span> images
  run         Run a <span class="token builtin class-name">command</span> <span class="token keyword">in</span> a new container
  save        Save one or <span class="token function">more</span> images to a <span class="token function">tar</span> archive <span class="token punctuation">(</span>streamed to STDOUT by default<span class="token punctuation">)</span>
  search      Search the Docker Hub <span class="token keyword">for</span> images
  start       Start one or <span class="token function">more</span> stopped containers
  stats       Display a live stream of container<span class="token punctuation">(</span>s<span class="token punctuation">)</span> resource usage statistics
  stop        Stop one or <span class="token function">more</span> running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  <span class="token function">top</span>         Display the running processes of a container
  unpause     Unpause all processes within one or <span class="token function">more</span> containers
  update      Update configuration of one or <span class="token function">more</span> containers
  version     Show the Docker version information
  <span class="token function">wait</span>        Block <span class="token keyword">until</span> one or <span class="token function">more</span> containers stop, <span class="token keyword">then</span> print their <span class="token builtin class-name">exit</span> codes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器开启时的配置" tabindex="-1"><a class="header-anchor" href="#容器开启时的配置" aria-hidden="true">#</a> 容器开启时的配置</h3><p>先参考一个深度学习容器开启的命令</p><p><code>docker run -i -d -v /export/username/:/export/username/ --name=tf_img_cls --net=host --runtime=nvidia -e NVIDIA_VISIBLE_DEVICE=0 ai-image.jdcloud.com</code></p><p>不同镜像开启需要的配置不同，一般通过 -e 传递。</p><p><code>-p</code> 建立容器与宿主机的端口映射，可以同时配置多个端口。如下，我们在宿主机上通过访问 666 端口来访问容器上部署的 nginx。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -p 配置容器的端口，可以同时配置多个端口</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> nginx01 <span class="token parameter variable">-p</span> <span class="token number">666</span>:80 nginx
<span class="token function">curl</span> localhost:666
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-e</code> 容器环境配置，不同容器环境配置不同。如下 es 的环境配置为内存限制。NVIDIA 容器 -e 可以配置指定显卡。 <strong>具体的 -e 传参应该参考容器发布者提供的信息。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> elasticsearch <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token parameter variable">-e</span> <span class="token string">&quot;discovery.type=single-node&quot;</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch:7.6.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-v</code> 挂载数据卷，具体参考[下方](# 容器数据卷)</p><p><code>--net</code> 容器网络，具体参考[下方](# docker 网络)</p><p>portainer 可视化面板可以玩玩</p><h2 id="镜像讲解" tabindex="-1"><a class="header-anchor" href="#镜像讲解" aria-hidden="true">#</a> 镜像讲解</h2><p>镜像获得途径：</p><ul><li>docker pull</li><li>通过朋友给你的 dockerfile 构建</li></ul><h3 id="镜像加载原理" tabindex="-1"><a class="header-anchor" href="#镜像加载原理" aria-hidden="true">#</a> 镜像加载原理</h3><p><strong>UnionFs（联合文件系统）</strong> ：Union 文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>docker 的镜像</strong> 实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。 boots(boot file system）主要包含 bootloader 和 Kernel, bootloader 主要是引导加 kernel, Linux 刚启动时会加 bootfs 文件系统，在 Docker 镜像的最底层是 boots。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加載器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。 rootfs（root file system),在 bootfs 之上。包含的就是典型 Linux 系统中的/dev,/proc,/bin,/etc 等标准目录和文件。 rootfs 就是各种不同的操作系统发行版，比如 Ubuntu, Centos 等等。</p><p>Docker 镜像都是只读的，当容器启动（run）时，一个新的可写层加载到镜像的顶部！这一层就是我们通常说的容器层，容器之下的都叫镜像层！因此我们所做的操作都是基于容器层的。</p><h4 id="commit-镜像" tabindex="-1"><a class="header-anchor" href="#commit-镜像" aria-hidden="true">#</a> commit 镜像</h4><p>docker commit 来保存当前容器的状态。下词可以直接通过加载对应的镜像来开启保存的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;描述信息&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;作者&quot;</span> 容器 <span class="token function">id</span> 目标镜像名:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器数据卷" tabindex="-1"><a class="header-anchor" href="#容器数据卷" aria-hidden="true">#</a> 容器数据卷</h2><p>docker 将应用和环境打包成环境，但是并不用于保存数据。将数据存储与本地，也可以实现容器间的数据共享。</p><h3 id="使用数据卷" tabindex="-1"><a class="header-anchor" href="#使用数据卷" aria-hidden="true">#</a> 使用数据卷</h3><p>将主机上的文件挂在到容器上，两个文件的内容会自动同步。在创建容器时候制定 -v ，后续开启容器就不需要 -v 操作了。</p><p><code>docker run -it -v 主机目录：容器内目录</code></p><h4 id="mysql-案例" tabindex="-1"><a class="header-anchor" href="#mysql-案例" aria-hidden="true">#</a> Mysql 案例</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 参考官网 hub </span>
<span class="token function">docker</span> run <span class="token parameter variable">--name</span> some-mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>my-secret-pw <span class="token parameter variable">-d</span> mysql:tag

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-v</span> /home/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> /home/mysql/data:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">--name</span> mysql01 mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="挂载卷的不同方式" tabindex="-1"><a class="header-anchor" href="#挂载卷的不同方式" aria-hidden="true">#</a> 挂载卷的不同方式</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> 容器内路径			 <span class="token comment"># 方式一：没有提供容器外路径</span>
<span class="token parameter variable">-v</span> 卷名：容器内路径		   <span class="token comment"># 方式二：挂载时候提供了名称，没有提供路径</span>
<span class="token parameter variable">-v</span> 宿主机路径：容器内路径   <span class="token comment"># 方式三</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式一：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> nginx01 <span class="token parameter variable">-v</span> /etc/nginx nginx

<span class="token comment"># 查看所有的 volume 的情况，可以查看到容器外路径为随即分配的 16 进制数</span>
<span class="token function">docker</span> volume <span class="token function">ls</span>    
DRIVER              VOLUME NAME
<span class="token builtin class-name">local</span>               33ae588fae6d34f511a769948f0d3d123c9d45c442ac7728cb85599c2657e50d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> nginx02 <span class="token parameter variable">-v</span> juming-nginx:/etc/nginx nginx
<span class="token function">docker</span> volume <span class="token function">ls</span>                  
DRIVER              VOLUME NAME
<span class="token builtin class-name">local</span>               juming-nginx

<span class="token comment"># 通过 -v 卷名：容器内路径</span>
<span class="token comment"># 查看一下这个卷</span>
<span class="token function">docker</span> volume inspect 卷名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数情况都使用方式二， 所有的 docker 容器内的卷，没有指定目录的情况下都是在 <code>/var/lib/docker/volumes/xxxx/_data </code>下</p><p>方式三：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> nginx03 <span class="token parameter variable">-v</span> /etc/nginx:/etc/nginx nginx
<span class="token comment"># 通过 docker volume ls 查看不到卷信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置卷的读写权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> nginx05 <span class="token parameter variable">-v</span> juming:/etc/nginx:ro nginx
<span class="token comment"># ro 只能通过宿主机改变卷数据</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> nginx05 <span class="token parameter variable">-v</span> juming:/etc/nginx:rw nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据卷容器" tabindex="-1"><a class="header-anchor" href="#数据卷容器" aria-hidden="true">#</a> 数据卷容器</h3><p>容器二使用与容器一相同的数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> docker02 --volumes-from docker-1 image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h2><p>公开端口，根据 <code>docker inspect</code> 中的 <code>config.ExportPort</code> 可以查看到暴露端口情况。一般可以通过 dockerfile 中配置 <code>EXPOSE 80</code> （更像是一个文档注释，说明 80 端口被监听）。</p><p>公开不会立即产生任何影响。该语句仅表示容器内的应用程序侦听端口<code>80</code>。它不会向世界开放该端口或明确提供对任何其他容器的访问。</p><p>作为镜像作者，列出工作负载使用的<code>EXPOSE</code>端口有助于用户在启动容器时配置适当的端口转发规则。这在使用非标准端口时尤为重要：虽然可以预期 Web 服务器侦听端口 80，但用户将无法猜测自定义套接字服务器使用的端口。</p><p>再创建容器的时候使用 <code>-p</code> 操作，将本机端口与容器绑定。</p><h2 id="构建-dockerfile" tabindex="-1"><a class="header-anchor" href="#构建-dockerfile" aria-hidden="true">#</a> 构建 Dockerfile</h2><p>Dockerfile 是用来构建 docker 镜像的构建文件。</p><p>构建步骤：</p><p>1、 编写一个 dockerfile 文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run 运行镜像</p><p>4、 docker push 发布镜像（DockerHub 、阿里云仓库)</p><h3 id="编写-dockerfile" tabindex="-1"><a class="header-anchor" href="#编写-dockerfile" aria-hidden="true">#</a> 编写 dockerfile</h3><p>dockerfile 命令</p><blockquote><p>FROM # 基础镜像，一切从这里开始构建 MAINTAINER # 镜像是谁写的， 姓名+邮箱 RUN # 镜像构建的时候需要运行的命令 ADD # 步骤，tomcat 镜像，这个 tomcat 压缩包！添加内容 添加同目录 WORKDIR # 镜像的工作目录 VOLUME # 挂载的目录 EXPOSE # 保留端口配置 CMD # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。 ENTRYPOINT # 指定这个容器启动的时候要运行的命令，可以追加命令 ONBUILD # 当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令。 COPY # 类似 ADD，将我们文件拷贝到镜像中 ENV # 构建的时候设置环境变量！</p></blockquote><p>编写 dockerfile 示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM centos
MAINTAINER myname<span class="token operator">&lt;</span>myemail<span class="token operator">&gt;</span>

ENV MYPATH /usr/local
WORKDIR <span class="token variable">$MYPATH</span>

VOLUME <span class="token punctuation">[</span><span class="token string">&quot;volume01&quot;</span>,<span class="token string">&quot;volume02&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># 生成镜像时候自动挂载的数据卷，匿名挂载</span>
<span class="token comment"># 如果创建的时候没有挂载，那么后续需要手动挂载</span>

RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>
RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> net-tools

EXPOSE <span class="token number">80</span>

CMD <span class="token builtin class-name">echo</span> <span class="token variable">$MYPATH</span>
CMD <span class="token builtin class-name">echo</span> <span class="token string">&quot;-----end----&quot;</span>
CMD /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMD 与 ENTRYPOINT 区别</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># dockerfile</span>
FROM centos
CMD <span class="token punctuation">[</span><span class="token string">&quot;ls&quot;</span>,<span class="token string">&quot;-a&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像" aria-hidden="true">#</a> 构建镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果传入了 tag 参数，那么打开时也需要使用 tag 参数</span>
<span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile1 <span class="token parameter variable">-t</span> image_name:tag path

<span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile1 <span class="token parameter variable">-t</span> cmd-test:1.0 <span class="token builtin class-name">.</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建成功后运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run cmd-test:1.0  <span class="token comment"># 输出 ls -a</span>
<span class="token function">docker</span> run cmd-test:1.0 <span class="token parameter variable">-l</span>  <span class="token comment"># 报错 -l 不是命令</span>
<span class="token function">docker</span> run cmd-test:1.0 <span class="token function">ls</span> <span class="token parameter variable">-l</span>  <span class="token comment"># 原先的 ls -a 会被替换为 ls -l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上为 <code>CMD</code> 指令的特点，相对的 <code>ENTRYPOINT</code> 就不会被覆盖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># dockerfile 中编写以下内容</span>
FROM centos
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;ls&quot;</span>,<span class="token string">&quot;-a&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建立后测试 <code>ENTRYPOINT</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-f</span> dockerfile1 <span class="token parameter variable">-t</span> ep-test:1.0 <span class="token builtin class-name">.</span>

<span class="token function">docker</span> run ep-test:1.0  <span class="token comment"># 输出 ls -a</span>
<span class="token function">docker</span> run ep-test:1.0 <span class="token parameter variable">-l</span>  <span class="token comment"># 输出 ls -al</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 dockerfile 案例二</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM centos <span class="token comment">#</span>
MAINTAINER name<span class="token operator">&lt;</span>mail@qq.com<span class="token operator">&gt;</span>
COPY README /usr/local/README <span class="token comment">#复制文件</span>
ADD jdk-8u231-linux-x64.tar.gz /usr/local/ <span class="token comment">#复制后自动解压</span>
ADD apache-tomcat-9.0.35.tar.gz /usr/local/ <span class="token comment">#复制解压</span>
RUN yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">vim</span>
ENV MYPATH /usr/local <span class="token comment">#设置环境变量</span>
WORKDIR <span class="token variable">$MYPATH</span> <span class="token comment">#设置工作目录</span>
ENV JAVA_HOME /usr/local/jdk1.8.0_231 <span class="token comment">#设置环境变量</span>
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.35 <span class="token comment">#设置环境变量</span>
ENV <span class="token environment constant">PATH</span> <span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$CATALINA_HOME</span>/lib <span class="token comment">#设置环境变量 分隔符是：</span>
EXPOSE <span class="token number">8080</span> <span class="token comment">#设置暴露的端口</span>
CMD /usr/local/apache-tomcat-9.0.35/bin/startup.sh <span class="token operator">&amp;&amp;</span> <span class="token function">tail</span> <span class="token parameter variable">-F</span> /usr/local/apache-tomcat-9.0.35/logs/catalina.out <span class="token comment"># 设置默认命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从容器创建镜像" tabindex="-1"><a class="header-anchor" href="#从容器创建镜像" aria-hidden="true">#</a> 从容器创建镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;comment&quot;</span> <span class="token parameter variable">-a</span> <span class="token string">&quot;author&quot;</span> container_id new_image_name:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器 <code>run</code> 时候的配置信息都将被移除，改在路径下的文件不会保留。</p><h3 id="发布自己的镜像" tabindex="-1"><a class="header-anchor" href="#发布自己的镜像" aria-hidden="true">#</a> 发布自己的镜像</h3><p>首先登陆</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker login -u kevinng77
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>制作镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -t kevin/mytomcat:0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提交 push 镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker push kevin/mytomcat:0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker-网络" tabindex="-1"><a class="header-anchor" href="#docker-网络" aria-hidden="true">#</a> docker 网络</h2>`,114),k={href:"https://www.cnblogs.com/bakari/p/10613710.html",target:"_blank",rel:"noopener noreferrer"},b=i(`<p>因此容器都通过接口链接到网关 docker0，实现了相互通信。</p><figure><img src="https://img-blog.csdnimg.cn/20191208165648271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NjEwMzY=,size_16,color_FFFFFF,t_70" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过 <code>--link</code> 可以在 hosts 配置中添加映射，实现使用容器名称代替 ip：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> ubuntu02 <span class="token parameter variable">--link</span> ubuntu03 ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 ubuntu02 中可以使用 <code>ping ubuntu03</code> 。不建议使用 link</p><h4 id="自定义网络" tabindex="-1"><a class="header-anchor" href="#自定义网络" aria-hidden="true">#</a> 自定义网络</h4><p><code>docker network</code> 相关命令： <code>connect</code> Connect a container to a network <code>create</code> Create a network <code>disconnect</code> Disconnect a container from a network <code>inspect</code> Display detailed information on one or more networks <code>ls</code> List networks <code>prune</code> Remove all unused networks <code>rm</code> Remove one or more networks</p><p><code>docekr network ls</code> 查看网络模式，包括 <code>bridge</code> 桥接 docker（默认），<code>none</code> 不配置网络，<code>host</code> 和宿主机共享网络。自定义网络：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token parameter variable">--subnet</span> <span class="token number">192.168</span>.0.0/16 <span class="token parameter variable">--getway</span> <span class="token number">192.168</span>.0.1 mynet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>自定义的网络不需要 <code>--link</code> 也可以使用容器名称 <code>ping</code> 。不同集群使用不同的网络。<code>docekr network connect mynet container </code> 将容器加入到某个网络中</p><h3 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h3>`,11),h={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"dockerfile",-1),f=n("code",null,"docker-compose.yml",-1),x=n("code",null,"docker-compose up",-1),y=i(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.9&quot;</span>  <span class="token comment"># optional since v1.27.0</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/code
      <span class="token punctuation">-</span> logvolume01<span class="token punctuation">:</span>/var/log
    <span class="token key atrule">links</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> redis
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">logvolume01</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_=n("code",null,"web",-1),w=n("code",null,"redis",-1),q=n("code",null,"build",-1),D=n("code",null,"image",-1),E=n("br",null,null,-1),A={href:"https://docs.docker.com/compose/compose-file/compose-file-v3/",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"depends_on",-1),M=n("code",null,"deploys",-1),R=n("code",null,"expose",-1),j=i('<p>后台运行 <code>docker-compose up -d</code> 包括网络配置，自动下载依赖镜像， 建立 dockerfile 镜像，启动 <strong>全部服务</strong> 。使用 <code>docker-compose down </code>结束所有服务（容器）。<code>docker-compose ps</code> 查看所有 compose 进程。 <code>docker-compose run web env</code></p><h4 id="docker-swarm" tabindex="-1"><a class="header-anchor" href="#docker-swarm" aria-hidden="true">#</a> docker Swarm</h4>',2),O={href:"https://docs.docker.com/engine/swarm/",target:"_blank",rel:"noopener noreferrer"},I=i(`<blockquote><p><code>docker swarm</code> Commands: ca Display and rotate the root CA init Initialize a swarm join Join a swarm as a node and/or manager join-token Manage join tokens leave Leave the swarm unlock Unlock swarm unlock-key Manage the unlock key update Update the swarm</p></blockquote><p>Swarm 分为主节点、副节点 初始化 Swarm 主节点：<code>docker swarm init --advertise-addr 私网 ip</code> 其他机器加入节点：<code>docker swarm join --token xxxxx</code> 在主节点上通过 <code>docker swarm join-token manager</code> 或 <code>docker swarm join-token worker</code> 生成 token。</p><p>保证至少 2 个管理节点存活才可用。集群需要 3 个以上主节点。</p><h5 id="docker-service" tabindex="-1"><a class="header-anchor" href="#docker-service" aria-hidden="true">#</a> docker service</h5><p>启动服务：<code>docker service create -p 8888:80 --name new_service images</code> ，服务会在随机的集群机器上运行。</p><p>服务扩缩容：<code>docker service update --replicas 3 new_service new_service</code> 在 3 个机器上运行 new_service 服务。等于 <code>docker service scale new_service=3</code></p><p>其他相关命令：<code>docker stack</code> 部署集群，<code>docker secret</code> 证书相关，<code>docker config</code> 等</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>jupyter notebook 再使用的时候需要配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>jupyter notebook <span class="token operator">-</span><span class="token operator">-</span>generate<span class="token operator">-</span>config

<span class="token comment">#docker 中使用 ipython 生成密码</span>
In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> notebook<span class="token punctuation">.</span>auth <span class="token keyword">import</span> passwd
In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> passwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
Enter password<span class="token punctuation">:</span>  <span class="token comment"># 这个密码再后来宿主机登陆时候需要</span>
Verify password<span class="token punctuation">:</span>   <span class="token comment"># 宿主机登陆 localhost:8888</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;sha1:38a5ecdf288b:c82dace8d3c7a212ec0bd49bbb99c9af3bae076e&#39;</span>

<span class="token comment">#去配置文件.jupyter/jupyter_notebook_config.py 中修改以下参数</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>ip<span class="token operator">=</span><span class="token string">&#39;*&#39;</span>                          <span class="token comment">#绑定所有地址</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">u&#39;刚才生成的密码&#39;</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>open_browser <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token comment">#启动后是否在浏览器中自动打开</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>port <span class="token operator">=</span><span class="token number">8888</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jupyterlab" tabindex="-1"><a class="header-anchor" href="#jupyterlab" aria-hidden="true">#</a> jupyterlab</h3><p><code>pip install jupyterlab</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jupyter lab --generate-config 
pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple/ jupyterlab-language-pack-zh-CN jupyterlab-lsp<span class="token operator">==</span><span class="token number">3.2</span>.0 jupyter-lsp<span class="token operator">==</span><span class="token number">1.1</span>.1 jupyterlab_code_formatter python-language-server<span class="token punctuation">[</span>all<span class="token punctuation">]</span> black isort

<span class="token comment"># 修改默认终端</span>
<span class="token function">vim</span> /root/.jupyter/
c.ServerApp.terminado_settings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;shell_command&#39;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">&#39;/bin/bash&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
<span class="token comment"># 设置登录密码</span>
jupyter server password  

jupyter lab --notebook-dir<span class="token operator">=</span>/ <span class="token parameter variable">--ip</span><span class="token operator">=</span><span class="token string">&#39;*&#39;</span> <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">8888</span> --allow-root --no-browser
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),S={href:"https://www.zhihu.com/question/354593673",target:"_blank",rel:"noopener noreferrer"},P=i(`<h3 id="jupyterhub" tabindex="-1"><a class="header-anchor" href="#jupyterhub" aria-hidden="true">#</a> jupyterhub</h3><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> nodejs <span class="token function">npm</span>
conda <span class="token function">install</span> <span class="token parameter variable">-c</span> conda-forge jupyterhub
conda <span class="token function">install</span> jupyterlab notebook
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>jupyterhub --generate-config</code> 生成配置文件</p><p>修改配置文件信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>c<span class="token punctuation">.</span>JupyterHub<span class="token punctuation">.</span>ip<span class="token operator">=</span><span class="token string">&quot;0.0.0.0&quot;</span>
c<span class="token punctuation">.</span>JupyterHub<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">443</span>

c<span class="token punctuation">.</span>JupyterHub<span class="token punctuation">.</span>admin_access <span class="token operator">=</span> <span class="token boolean">True</span>
c<span class="token punctuation">.</span>JupyterHub<span class="token punctuation">.</span>admin_user<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;kevin&quot;</span><span class="token punctuation">}</span>

c<span class="token punctuation">.</span>Authenticator<span class="token punctuation">.</span>admin_users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;kevin&quot;</span><span class="token punctuation">}</span>

c<span class="token punctuation">.</span>Spawner<span class="token punctuation">.</span>notebook_dir <span class="token operator">=</span> <span class="token string">&quot;~&quot;</span>  <span class="token comment"># 用户登录时，显示的 root dir</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jupyterhub 使用的用户和 linux 是对应的，添加用户：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">useradd</span> stu01
<span class="token function">passwd</span> stu01
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 root 启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">su</span>
jupyterhub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ubuntu-下移动默认储存位置" tabindex="-1"><a class="header-anchor" href="#ubuntu-下移动默认储存位置" aria-hidden="true">#</a> ubuntu 下移动默认储存位置</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> stop
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/multi-user.target.wants/docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 修改以下内容：</span>
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd <span class="token parameter variable">--graph</span><span class="token operator">=</span>/home/data/docker --storage-driver<span class="token operator">=</span>overlay2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 docker 服务</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>sudo systemctl daemon<span class="token operator">-</span>reload
sudo systemctl restart docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他参考" tabindex="-1"><a class="header-anchor" href="#其他参考" aria-hidden="true">#</a> 其他参考</h2>`,16),T={href:"https://bbs.huaweicloud.com/blogs/133713",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker",target:"_blank",rel:"noopener noreferrer"},C={href:"https://bluesmilery.github.io/blogs/252e6902/",target:"_blank",rel:"noopener noreferrer"};function V(U,H){const s=t("ExternalLinkIcon");return c(),l("div",null,[d,u,m,r("more"),v,n("p",null,[a("Docker 启动会默认创建 docker0 虚拟网桥，是 Linux 的一个 bridge，可以理解成一个软件交换机。它会在挂载到它的网口之间进行转发。之后所有容器都是在 172.17.0.x 的网段。当创建一个 Docker 容器的时候，同时会创建一对 veth pair。"),n("a",k,[a("Linux 虚拟网络设备 veth-pair 详解，看这一篇就够了"),e(s)]),a("。")]),b,n("p",null,[a("Docker Compose "),n("a",h,[a("文档"),e(s)]),a("。准备好 "),g,a(", "),f,a("（如下），使用 "),x,a(" 运行。")]),y,n("p",null,[a("version 对应 docker 版本，services 中配置各个容器，如上有 "),_,a("，"),w,a(" 两个项目。 "),q,a(" 即通过 docker build 构建镜像，或者使用 "),D,a(" 使用已有镜像。"),E,n("a",A,[a("其他参数"),e(s)]),a(" 比较常用的有 "),N,a(", "),M,a(", "),R,a(" 等。")]),j,n("p",null,[n("a",O,[a("文档"),e(s)]),a(" 小规模服务可以使用 swarm 实现，规模大时考虑 k8s")]),I,n("p",null,[n("a",S,[a("其他插件"),e(s)])]),P,n("p",null,[n("a",T,[a("Docker 部署深度学习环境"),e(s)]),n("a",L,[a("nvidia docker"),e(s)]),n("a",C,[a("nvidia docker 及训练环境配置文档"),e(s)])])])}const Y=o(p,[["render",V],["__file","笔记docker.html.vue"]]);export{Y as default};
