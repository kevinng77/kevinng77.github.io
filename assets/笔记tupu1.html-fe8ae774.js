import{al as o,Q as p,S as c,U as n,an as s,ac as t,a7 as r,au as e,H as i}from"./framework-a614cb70.js";const l="/assets/img/tupu1/image-20211214173454847.png",u={},d={href:"https://github.com/liuhuanyong/QASystemOnMedicalKG",target:"_blank",rel:"noopener noreferrer"},k=e('<h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h2><h3 id="图谱是什么" tabindex="-1"><a class="header-anchor" href="#图谱是什么" aria-hidden="true">#</a> 图谱是什么</h3><p>目前知识图谱并有没有一个统一的定义，但大致上是一种大规模语义网络， <strong>包含实体，概念及其之间的各种语义关系。</strong> 概念与类相似，实体是概念的实例，实体下通常会有不同的属性值。</p><p>图谱分为 <strong>通用知识图谱</strong> （General-purpose Knowledge Graph）和 <strong>领域或行业知识图谱</strong> （Domain-specific Knowledge Graph）。两者相辅相成，通用知识图谱可以为行业知识图谱的构建提供高质量信息，而行业建成后又可以改善通用知识图谱的质量。部分学者也将两者分别称为 <strong>开放领域知识图谱</strong> 和 <strong>垂直领域知识图谱</strong></p><p>具有代表性的图谱有 Cyc, WordNet, ConceptNeet, Freebase, GeoNames, DBpedia, YAGO, openIE, BableNet, WikiData, Google 知识图谱，Probase，搜狗知心方，百度知心，CN-DBpedia 等。</p><h2 id="构建" tabindex="-1"><a class="header-anchor" href="#构建" aria-hidden="true">#</a> 构建</h2><p>制作一个知识图谱需要有一套可遵循的规范标准来。该标准对 <strong>层级关系</strong> 、 <strong>概念</strong> 、 <strong>属性</strong> 等进行约束；由于标准不同，知识图谱在知识体系的层面上通常可以分为 Ontology、Taxonomy 和 Folksonomy 三中组织方式，其中 Ontology（本体）最为严格。本体可以通过定义概念、类、关系、函数、公理及实例等来解决唯一性和可推理能力（如何定义并没有统一的标准）。</p><p>图谱构建大致分为：</p><p><strong>术语收集</strong> - 术语用于表示一些基本的概念、实体、属性词及关系词。如医疗领域图谱案例中的术语有：诊断检查项目、医疗科目、疾病、药品、疾病症状、治疗方式等实体类型术语；及关节镜检查、烧伤科、京万红痔疮膏等实例术语。</p><p><strong>定义本体概念层级</strong> - 基于收集好的术语，定义概念层级，包括：</p>',10),h={href:"https://github.com/liuhuanyong/QASystemOnMedicalKG/tree/master/dict",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,"概念间关系定义：如 <疾病，有症状，症状>等。",-1),g=n("p",null,"概念通常无法一下子全面定义，需要在图谱搭建、或者今后的业务执行过程中不断完善。",-1),m=n("p",null,[n("strong",null,"定义本体属性关联"),s(" - 属性与属性之间的推理、关系与关系之间推理。")],-1),q=n("p",null,[n("strong",null,"定义本体约束条件"),s(" - 概念实例与属性条件限制")],-1),b={href:"https://mp.weixin.qq.com/s/Hm--NLKR-PtBwGEci8ejBw",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"知识图谱-schema",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#知识图谱-schema","aria-hidden":"true"},"#"),s(" 知识图谱 schema")],-1),y={href:"https://www.bilibili.com/video/BV1ev4y1o7zj?p=2&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/liuhuanyong/QASystemOnMedicalKG",target:"_blank",rel:"noopener noreferrer"},w=e('<figure><img src="'+l+'" alt="相关图片" height="300" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p><em>（图：医疗知识图谱 schema）</em></p><p>schema 可以自顶向下构建，从确定好的业务与领域出发，逐层向下分类细化，最后对实体归类；也可以从下往上，首先对实体进行组织，然后逐层向上抽象出类别。</p><h3 id="知识抽取" tabindex="-1"><a class="header-anchor" href="#知识抽取" aria-hidden="true">#</a> 知识抽取</h3><p>如果能够收集到项目相关的结构化数据，那么可以直接通过规则将数据映射到图数据库两种。但优质的结构化数据太难找，大部分情况下，我们需要从非结构化的预料中提取 &lt;实体-关系-实体&gt; 信息，对应的任务包括 命名体识别、关系抽取、实体链接、指代消解、同义词挖掘等。</p><h4 id="命名体识别" tabindex="-1"><a class="header-anchor" href="#命名体识别" aria-hidden="true">#</a> 命名体识别</h4><p>命名体识别任务即从语料中抽取出对应的实体词，通常作为序列标注问题解决，除此外还可以通过规则进行提取（如邮件）或阅读理解 QA 的方式。</p><p>相关数据及任务：CoNLL03, OntoNotes；相关工具：jieba, hanlp, stanfordnlp（英文）</p><p><strong>相关资料：</strong></p>',9),x={href:"https://zhuanlan.zhihu.com/p/166496466",target:"_blank",rel:"noopener noreferrer"},N={href:"https://mp.weixin.qq.com/s/-vpybS-l9QIhxCJbkRzxQg",target:"_blank",rel:"noopener noreferrer"},z=n("h4",{id:"关系抽取-识别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关系抽取-识别","aria-hidden":"true"},"#"),s(" 关系抽取（识别）")],-1),C=n("p",null,"关系抽取的结果为三元组（主体，关系谓词，客体）。该问题可以分为 给定关系抽取实体、给定实体判断关系 或 开放式抽取。",-1),D=n("p",null,"关系抽取常用的数据库有，ACE-2005，SemEval-2010 task 8 等。或由远程监督思想构造的 NYT 和 KBP 数据集。NYT 是目前学术研究中被广泛采用的评测数据集。",-1),S=n("p",null,[n("strong",null,"相关资源：")],-1),L={href:"https://mp.weixin.qq.com/s/1aEkw8YFNiHUM77VusfU2w",target:"_blank",rel:"noopener noreferrer"},E={href:"https://zhuanlan.zhihu.com/p/77868938",target:"_blank",rel:"noopener noreferrer"},G={href:"https://zhuanlan.zhihu.com/p/443195014",target:"_blank",rel:"noopener noreferrer"},B=n("h4",{id:"实体消歧与链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实体消歧与链接","aria-hidden":"true"},"#"),s(" 实体消歧与链接")],-1),j=n("p",null,"实体链接将不同来源的、相同意义的实体进行匹配。是知识库扩充，知识问答，信息整合等任务中十分重要的环节。",-1),A=n("p",null,[n("strong",null,"相关资源：")],-1),P={href:"https://mp.weixin.qq.com/s/4ih8xH4u4mANBLNJtREGfg",target:"_blank",rel:"noopener noreferrer"},Q={href:"http://wujiawen.xyz/2021/08/18/entity_link/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://blog.csdn.net/TgqDT3gGaMdkHasLZv/article/details/79244840",target:"_blank",rel:"noopener noreferrer"},K={href:"https://zhuanlan.zhihu.com/p/437449062",target:"_blank",rel:"noopener noreferrer"},M=n("h3",{id:"数据采集",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据采集","aria-hidden":"true"},"#"),s(" 数据采集")],-1),F={href:"http://jib.xywy.com/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://mp.weixin.qq.com/s/H3kO6yQKdO_CHiYrrWrpsg",target:"_blank",rel:"noopener noreferrer"},I=e(`<h3 id="数据储存与可视化" tabindex="-1"><a class="header-anchor" href="#数据储存与可视化" aria-hidden="true">#</a> 数据储存与可视化</h3><p>提取好信息后，可以储存为 RDF 三元组。由于该案例项目较特殊，大部分信息围绕疾病展开，因此可以采用 json 格式储存，如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span> <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;$oid&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;5bb578b6831b973a137e3ee8&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;苯中毒&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;desc&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;苯(benzene)是从煤焦油分馏及石油裂解所得的一种芳香烃化合物，系无色有芳香气味的油状液体。......&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;category&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;疾病百科&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;急诊科&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;prevent&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;对于急性中毒患者，可以立即脱离现场至空气新鲜处，脱去污染的衣着，并用肥皂水或清水冲洗污染的皮肤。......&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;cause&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;吸入苯蒸气或皮肤接触苯而引起的中毒，有急性、慢性之分。....&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;symptom&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;恶心&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;抽搐&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;感觉障碍&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;yibao_status&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;否&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;get_prob&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;0.065%&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;easy_get&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;多见于制鞋工人及接触化工染料的工人&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;get_way&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;无传染性&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;acompany&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;贫血&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;cure_department&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;急诊科&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;cure_way&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;药物治疗&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;支持性治疗&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;cure_lasttime&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;根据不同病情一般为 2-4 周&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;cured_prob&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;75%&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;common_drug&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;布美他尼片&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;十一味金色丸&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;cost_money&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;根据不同病情，不同医院，收费标准不一致，市三甲医院约（5000——8000 元）&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;check&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;血常规&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;骨髓象分析&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;先令氏指数&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;do_eat&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;鸡蛋&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;大豆&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;猪肉(瘦)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;樱桃番茄&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;not_eat&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;海蟹&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;海虾&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;海参（水浸）&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;辣椒(青、尖)&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;recommand_eat&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;豆腐干炒韭菜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;素炒小白菜&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;白菜蛋花粥&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;recommand_drug&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;布美他尼片&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;十一味金色丸&quot;</span><span class="token punctuation">,</span>...<span class="token punctuation">,</span> <span class="token string">&quot;地塞米松磷酸钠注射液&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">&quot;drug_detail&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;桂林南药布美他尼片(布美他尼片)&quot;</span><span class="token punctuation">,</span>...<span class="token punctuation">,</span><span class="token string">&quot;皇隆制药注射用呋塞米(注射用呋塞米)&quot;</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中包括了疾病属性：</p><table><thead><tr><th>属性类型</th><th>中文含义</th><th>属性类型</th><th>中文含义</th></tr></thead><tbody><tr><td>name</td><td>疾病名称</td><td>cure_lasttime</td><td>治疗周期</td></tr><tr><td>desc</td><td>疾病简介</td><td>cure_way</td><td>治疗方式</td></tr><tr><td>cause</td><td>疾病病因</td><td>cured_prob</td><td>治愈概率</td></tr><tr><td>prevent</td><td>预防措施</td><td>easy_get</td><td>疾病易感人群</td></tr></tbody></table><p>以及概念间关系：</p><table><thead><tr><th>实体关系类型</th><th>中文含义</th><th>实体关系类型</th><th>中文含义</th></tr></thead><tbody><tr><td>common_drug</td><td>疾病常用药品</td><td>recommand_drug</td><td>疾病推荐药品</td></tr><tr><td>do_eat</td><td>疾病宜吃食物</td><td>recommand_eat</td><td>疾病推荐食谱</td></tr><tr><td>need_check</td><td>疾病所需检查</td><td>has_symptom</td><td>疾病症状</td></tr><tr><td>no_eat</td><td>疾病忌吃食物</td><td>acompany_with</td><td>疾病并发疾病</td></tr><tr><td>belongs_to</td><td>属于</td><td>drugs_of</td><td>药品在售药品</td></tr></tbody></table><p><code>drug_detail</code> 中存有药品与在售药品信息。<code>cure_department</code> 中存有科室间关系，如：<code>cure_department:[&quot;内科&quot;,&quot;消化内科&quot;]</code></p><p>案例项目从以上 json 数据整理出节点列表与关系三元组，而后导入到了 Neo4J 中。</p><p><strong>节点导入</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> py2neo <span class="token keyword">import</span> Graph<span class="token punctuation">,</span>Node
<span class="token keyword">def</span> <span class="token function">create_diseases_nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> disease_infos<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> disease_dict <span class="token keyword">in</span> disease_infos<span class="token punctuation">:</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">&quot;Disease&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> desc<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    prevent<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;prevent&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>cause<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cause&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 easy_get<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;easy_get&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cure_lasttime<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cure_lasttime&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    cure_department<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cure_department&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cure_way<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cure_way&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> cured_prob<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cured_prob&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>create<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关系匹配</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">create_relationship</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_node<span class="token punctuation">,</span> end_node<span class="token punctuation">,</span> edges<span class="token punctuation">,</span> rel_type<span class="token punctuation">,</span> rel_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 去重处理</span>
    set_edges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> edge <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
        set_edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;###&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token builtin">all</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>set_edges<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> edge <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>set_edges<span class="token punctuation">)</span><span class="token punctuation">:</span>
        edge <span class="token operator">=</span> edge<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;###&#39;</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        q <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        query <span class="token operator">=</span> <span class="token string">&quot;match(p:%s),(q:%s) where p.name=&#39;%s&#39;and q.name=&#39;%s&#39; create (p)-[rel:%s{name:&#39;%s&#39;}]-&gt;(q)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>
            start_node<span class="token punctuation">,</span> end_node<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> rel_type<span class="token punctuation">,</span> rel_name<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>run<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">return</span>

<span class="token comment"># self.create_relationship(&#39;Disease&#39;, &#39;Food&#39;, rels_doeat, &#39;do_eat&#39;, &#39;宜吃&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),V={href:"https://mp.weixin.qq.com/s/uFPVozKQTgeqVxbxXz1CSA",target:"_blank",rel:"noopener noreferrer"},H=e('<h2 id="知识问答" tabindex="-1"><a class="header-anchor" href="#知识问答" aria-hidden="true">#</a> 知识问答</h2><p>首先，程序需要对用户问题进行理解，该任务包括 意图识别、领域识别、关系识别、命名体识别、指代消解、实体链接、槽位填充、对话状态追踪等模块。</p><p>而后对不同的业务类型及自然语言理解的结果，采用不同的方式进行回复。</p><p>一般对于信息查询或咨询类问题</p><p>可以 <strong>基于图数据库</strong> 进行回答。通过实体、关系等信息生成数据库检索语句，然后使用规则或者自然语言生成模块输出回复语句。涉及的技术有子图召回、数据库检索语句生成、自然语言生成等；</p><p>或者 <strong>基于问答数据库</strong> ，将用户问题与事先准备好的“问题-答案”对进行匹配。涉及到文本向量化表示、邻近搜索、倒排索引等检索相关技术。</p><h3 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析" aria-hidden="true">#</a> 案例分析</h3>',7),U={href:"https://github.com/liuhuanyong/QASystemOnMedicalKG",target:"_blank",rel:"noopener noreferrer"},W=e(`<h4 id="意图识别" tabindex="-1"><a class="header-anchor" href="#意图识别" aria-hidden="true">#</a> 意图识别</h4><blockquote><p>输入用户问题，输出该问题的领域分类及关系识别结果。</p></blockquote><p>原作者采用了暴力匹配领域特征词的方式（采用 AC 自动机加速）进行用户意图识别。</p><ul><li><p>定义 <strong>领域词</strong> （region_word）：领域词定义为所有概念术语的集合、包括疾病、部门、药品、食品等。</p></li><li><p><strong>领域分类</strong> ：使用 AC 自动机检索用户问题中存在的领域词。根据领域词将问题进行多标签分类，如出现 苯中毒、板蓝根，则标记为 疾病、药品。</p></li><li><p><strong>关系识别</strong> ：利用领域分类与问题中出现的询问词，建立关系识别规则。如：</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>symptom_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;症状&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;表征&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;现象&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;症候&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;表现&#39;</span><span class="token punctuation">]</span>
question_types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>symptom_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token string">&#39;disease&#39;</span> <span class="token keyword">in</span> types<span class="token punctuation">)</span><span class="token punctuation">:</span>
    question_type <span class="token operator">=</span> <span class="token string">&#39;disease_symptom&#39;</span>
    question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果问题中有 <code> [&#39;症状&#39;, &#39;表征&#39;, &#39;现象&#39;, &#39;症候&#39;, &#39;表现&#39;]</code> 中的词，并且问题被标记为 <code>疾病</code> 领域，那么就将问题标记为寻求 <code>疾病症状</code> 关系。</p><h3 id="答案解析" tabindex="-1"><a class="header-anchor" href="#答案解析" aria-hidden="true">#</a> 答案解析</h3><blockquote><p>输入意图识别得出的 领域分类、关系识别结果</p></blockquote><ul><li><strong>生成 Cypher 语句</strong> ：建立规则，基于问题的领域分类与问题中的实体术语，生成图数据库检索语句，如：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> question_type <span class="token operator">==</span> <span class="token string">&#39;disease_cause&#39;</span><span class="token punctuation">:</span>
	sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;MATCH (m:Disease) where m.name = &#39;{0}&#39; return m.name, m.cause&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>针对询问疾病症状的问题，对每一个问题中出现的疾病，生成一个查询对应症状的语句。</p><ul><li><strong>生成回复</strong> ：执行 Cypher 查询语句，通过语句模版生成结果。如：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> question_type <span class="token operator">==</span> <span class="token string">&#39;disease_symptom&#39;</span><span class="token punctuation">:</span>
    desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">&#39;n.name&#39;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>
    subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;m.name&#39;</span><span class="token punctuation">]</span>
    final_answer <span class="token operator">=</span> <span class="token string">&#39;{0}的症状包括：{1}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">&#39;；&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述例子通过规则实现了简单的问答，除此外各个模块也有不同的实现方法：</p><h4 id="实体规范化" tabindex="-1"><a class="header-anchor" href="#实体规范化" aria-hidden="true">#</a> 实体规范化</h4><p><strong>文本纠错</strong></p>`,16),J={href:"https://zhuanlan.zhihu.com/p/446388436?utm_source=wechat_session&utm_medium=social&utm_oi=784412867221946368&utm_campaign=shareopn",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,"利用已有的词典或语言模型的统计结果，结合句法分析的规则来确定错误的字。常见的做法就是利用同音、同型字典把出错的字替换掉，然后生成一个候选集合。最后对候选集进行打分。",-1),Y=n("p",null,[n("strong",null,"mention 提取")],-1),X=n("p",null,"类似实体提取",-1),Z=n("h4",{id:"意图识别-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#意图识别-1","aria-hidden":"true"},"#"),s(" 意图识别")],-1),$=n("p",null,[n("strong",null,"关系识别")],-1),nn={href:"https://mp.weixin.qq.com/s/8vz32-tLU6U1oYPErhbW0Q",target:"_blank",rel:"noopener noreferrer"},sn=n("h4",{id:"依存分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#依存分析","aria-hidden":"true"},"#"),s(" 依存分析")],-1),an={href:"https://github.com/liuhuanyong/QASystemOnMedicalKG",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://arxiv.org/pdf/1611.01734.pdf",target:"_blank",rel:"noopener noreferrer"},en=n("p",null,"相关资源：",-1),on={href:"https://github.com/HIT-SCIR/SemEval-2016",target:"_blank",rel:"noopener noreferrer"},pn=n("a",{href:""},"CoNLL 系列任务",-1),cn=n("a",{href:"FudanNLP"},"FudanNLP",-1),rn={href:"https://github.com/explosion/spaCy",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://github.com/Lynten/stanford-corenlp",target:"_blank",rel:"noopener noreferrer"},un={href:"https://github.com/hankcs/pyhanlp",target:"_blank",rel:"noopener noreferrer"},dn=n("h4",{id:"槽位填充",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#槽位填充","aria-hidden":"true"},"#"),s(" 槽位填充")],-1),kn=n("p",null,"槽位填充的目的与依存分析较为相似，都是找到目标关系对应的实体。相关模型：",-1),hn={href:"https://aclanthology.org/N18-2118.pdf",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://arxiv.org/abs/1902.10909",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://www.aclweb.org/anthology/N19-1055.pdf",target:"_blank",rel:"noopener noreferrer"},mn=e(`<h4 id="子图召回与答案排序" tabindex="-1"><a class="header-anchor" href="#子图召回与答案排序" aria-hidden="true">#</a> 子图召回与答案排序</h4><p>通过</p><h4 id="多轮对话" tabindex="-1"><a class="header-anchor" href="#多轮对话" aria-hidden="true">#</a> 多轮对话</h4><p>可以继承上文的实体分析/槽位填充 或者 意图识别结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>苯中毒是什么？ ... 血栓闭塞性脉管炎呢？
苯中毒是什么？ ... 怎么治疗？
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文本检索" tabindex="-1"><a class="header-anchor" href="#文本检索" aria-hidden="true">#</a> 文本检索</h4><p>通常用于检索问答。</p><p>Elasticsearch</p><p>solr 搜索平台</p>`,9),qn={href:"http://wujiawen.xyz/2021/09/24/ann/",target:"_blank",rel:"noopener noreferrer"},bn=n("h4",{id:"复杂问题理解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#复杂问题理解","aria-hidden":"true"},"#"),s(" 复杂问题理解")],-1),fn=n("h2",{id:"其他资源",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他资源","aria-hidden":"true"},"#"),s(" 其他资源")],-1),yn={href:"https://mp.weixin.qq.com/s/deyNno3BkqtGMdl1iD4Luw",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://mp.weixin.qq.com/s/_cFDbp6PnAEjgtDIWSBDVQ",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://mp.weixin.qq.com/s/qn8k_6GmvTsW6TF786KWUw",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://zhuanlan.zhihu.com/p/446388436?utm_source=wechat_session&utm_medium=social&utm_oi=784412867221946368&utm_campaign=shareopn",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://mp.weixin.qq.com/s/8vz32-tLU6U1oYPErhbW0Q",target:"_blank",rel:"noopener noreferrer"};function zn(Cn,Dn){const a=i("ExternalLinkIcon");return p(),c("div",null,[n("blockquote",null,[n("p",null,[s("以 "),n("a",d,[s("刘焕勇 - 基于知识图谱的医疗问答系统"),t(a)]),s(" 为例，梳理知识图谱框架、资源整合。")])]),r("more"),k,n("ol",null,[n("li",null,[s('区分概念和实例：实例是不可再分的最细粒度信息承载单位。如将"药品"作为概念或实体类别；将“京万红痔疮膏”作为实例。'),n("a",h,[s("案例项目"),t(a)]),s(" 中收集有 44111 个实体，7 个概念，相同类别的实例储存在同一文件中，文件名为对应的概念名称。")]),_]),g,m,q,n("p",null,[s("相关资料："),n("a",b,[s("知识图谱入门：知识图谱构建中的本体设计、关键流程与开源本体工具总结"),t(a)])]),f,n("p",null,[s("以下是由 "),n("a",y,[s("每天都要机器学习"),t(a)]),s(" 根据 "),n("a",v,[s("刘焕勇-医疗知识图谱"),t(a)]),s(" 定义的 schema 实例。其中大致表示了图谱中概念与概念之间的关系。")]),w,n("p",null,[n("a",x,[s("命名实体识别（bert/lstm-crf）实践与探索"),t(a)]),n("a",N,[s("知识图谱入门：知识图谱构建中的实体识别常用范式、关键问题与应对措施总结"),t(a)])]),z,C,D,S,n("p",null,[n("a",L,[s("知识图谱入门：实体关系识别与标准化对齐开源工具、常用方法、关键问题总结"),t(a)]),n("a",E,[s("nlp 中的实体关系抽取方法总结"),t(a)]),n("a",G,[s("NLP 关系抽取 — 概念、入门、论文、总结"),t(a)])]),B,j,A,n("p",null,[n("a",P,[s("知识图谱入门：实体链接的实现流程、关键问题与开放数据集总结"),t(a)]),n("a",Q,[s("Entity Linking with a Knowledge Base: Issues, Techniques, and Solutions 笔记"),t(a)]),n("a",T,[s("知识工场 | 让机器认知中文实体 —复旦大学知识工场发布中文实体识别与链接服务"),t(a)]),n("a",K,[s("【知识图谱构建系列篇】实体链接 Entity Linking 综述+20 篇文献调研"),t(a)])]),M,n("p",null,[s("案例项目从 "),n("a",F,[s("寻医问药"),t(a)]),s(" 爬取数据，对网页源代码解析后将概念、属性等信息保存于 MongoDB，最后通过 python 存入 Neo4J。")]),n("p",null,[s("相关资源："),n("a",O,[s("知识图谱入门：图谱构建中的数据采集、文本解析处理、数据分析常用工具总结"),t(a)])]),I,n("p",null,[s("相关资源："),n("a",V,[s("知识图谱入门：知识图谱存储、融合、可视化、图表示计算与搜索常用工具总结"),t(a)])]),H,n("p",null,[n("a",U,[s("刘焕勇 - 基于知识图谱的医疗问答系统"),t(a)]),s(" 项目。")]),W,n("p",null,[s("参考 "),n("a",J,[s("医疗健康领域的短文本理解"),t(a)])]),R,Y,X,Z,$,n("p",null,[s("参考 "),n("a",nn,[s("美团 KBQA"),t(a)]),s(" ，采用预训练模型（剪枝、蒸馏、预精调），将多分类问题转换为匹配问题，解决数据库中边关系不断增加问题。同时加入领域识别结果与句法信息。")]),sn,n("p",null,[s("依存分析是句法分析的一种。在 "),n("a",an,[s("刘焕勇 - 基于知识图谱的医疗问答系统"),t(a)]),s(" 中并没有依存分析模块，假设用户问题为：苯中毒怎么治疗？血栓闭塞性脉管炎又是什么病。根据案例项目的规则，系统会将问题正确标记为 “询问疾病治疗方案” 及 “询问疾病详情” 。但由于缺少依存分析，系统会多给出 “苯中毒是什么” 和 “血栓闭塞性脉管炎怎么治疗” 两个回答。")]),n("p",null,[s("经典的依存分析模型有： "),n("a",tn,[s("Deep Biaffine Attention for Neural Dependency Parsing"),t(a)])]),en,n("p",null,[n("a",on,[s("SemEval-2016 Task 9 Chinese Semantic Dependency Parsing"),t(a)]),pn,s(" （如 2017/18 Multilingual Parsing from Raw Text to Universal Dependencies。07/08/09 年也有类似任务）")]),n("p",null,[s("工具："),cn,s("，"),n("a",rn,[s("spaCy"),t(a)]),s("，"),n("a",ln,[s("StanfordCoreNLP"),t(a)]),s("，"),n("a",un,[s("hanlp"),t(a)])]),dn,kn,n("p",null,[n("a",hn,[s("Slot-Gated Modeling for Joint Slot Filling and Intent Prediction"),t(a)]),n("a",_n,[s("BERT for Joint Intent Classification and Slot Filling"),t(a)]),n("a",gn,[s("Joint Multiple Intent Detection and Slot Labeling for Goal-Oriented Dialog"),t(a)])]),mn,n("p",null,[n("a",qn,[s("对话系统笔记（一）|检索基础"),t(a)])]),bn,fn,n("p",null,[n("a",yn,[s("回顾·知识图谱在贝壳找房的从 0 到 1 实践"),t(a)]),n("a",vn,[s("知识结构化在阿里小蜜中的应用"),t(a)]),n("a",wn,[s("基于知识图谱的问答在美团智能交互场景中的应用和演进"),t(a)]),n("a",xn,[s("医疗健康领域的短文本理解"),t(a)]),n("a",Nn,[s("美团知识图谱问答技术实践与探索"),t(a)])])])}const Ln=o(u,[["render",zn],["__file","笔记tupu1.html.vue"]]);export{Ln as default};
