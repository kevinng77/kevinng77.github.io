import{_ as o,E as p,S as i,W as l,$ as n,a3 as s,Z as e,aS as t}from"./framework-d5c0d2cb.js";const c="/assets/img/airflow/image-20230121131633924.png",r={},u={href:"https://airflow.apache.org/",target:"_blank",rel:"noopener noreferrer"},d=t(`<h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>官网指定通过 python 安装。<code>pip install aparch-airflow</code></p><p>安装后启动各个组件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>airflow db init

airflow users create \\
    <span class="token operator">-</span><span class="token operator">-</span>username kevin \\
    <span class="token operator">-</span><span class="token operator">-</span>firstname kevin \\
    <span class="token operator">-</span><span class="token operator">-</span>lastname ng \\
    <span class="token operator">-</span><span class="token operator">-</span>role Admin \\
    <span class="token operator">-</span><span class="token operator">-</span>email <span class="token number">417333277</span>@qq<span class="token punctuation">.</span>com

airflow webserver <span class="token operator">-</span><span class="token operator">-</span>port <span class="token number">8080</span> <span class="token operator">-</span>D

airflow scheduler <span class="token operator">-</span>D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 airflow 启动和停止文件 <code>vim af.sh</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span> 
<span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;=== start airflow ===&quot;</span>
    <span class="token function">nohup</span> airflow webserver <span class="token parameter variable">-p</span> <span class="token number">8080</span> <span class="token operator">&gt;</span> airflow_server.log <span class="token operator">&amp;</span>
    <span class="token function">nohup</span> airflow scheduler <span class="token parameter variable">-D</span> <span class="token operator">&gt;</span> airflow_scheduler.log <span class="token operator">&amp;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;=== stop airflow ===&quot;</span>
    <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token string">&#39;scheduler|airflow|webserver&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> <span class="token parameter variable">-15</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为脚本文件添加执行权限：<code>chmod +x af.sh</code>。之后可以是用 <code>af.sh start</code> 或 <code>af.sh stop</code> 启动停止服务。</p><h3 id="配置-airflow" tabindex="-1"><a class="header-anchor" href="#配置-airflow" aria-hidden="true">#</a> 配置 airflow</h3><p>通过默认方式启动 airflow，登录后发现两个官方提示：</p><p>根据提示修改数据库：</p>`,11),k=n("strong",null,"SQLite",-1),v={href:"https://airflow.apache.org/docs/apache-airflow/2.5.1/howto/set-up-database.html",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"Click here",-1),b=n("p",null,"根据提示修改执行器",-1),h=n("strong",null,"SequentialExecutor",-1),g={href:"https://airflow.apache.org/docs/apache-airflow/2.5.1/executor/index.html",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"Click here",-1),f=t(`<h3 id="体验调度应用" tabindex="-1"><a class="header-anchor" href="#体验调度应用" aria-hidden="true">#</a> 体验调度应用</h3><p>在 <code>airflow/airflow.cfg</code> 文件中可以查看到配置项目，编写 test.py 并放置于 <code>~/airflow/dags</code> 文件夹下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime

<span class="token keyword">from</span> airflow <span class="token keyword">import</span> DAG
<span class="token keyword">from</span> airflow<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> task
<span class="token keyword">from</span> airflow<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>bash <span class="token keyword">import</span> BashOperator

<span class="token comment"># A DAG represents a workflow, a collection of tasks</span>
<span class="token keyword">with</span> DAG<span class="token punctuation">(</span>dag_id<span class="token operator">=</span><span class="token string">&quot;kevin_demo&quot;</span><span class="token punctuation">,</span> start_date<span class="token operator">=</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> schedule<span class="token operator">=</span><span class="token string">&quot;0 0 * * *&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dag<span class="token punctuation">:</span>

    <span class="token comment"># Tasks are represented as operators</span>
    hello <span class="token operator">=</span> BashOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;kevin_learn&quot;</span><span class="token punctuation">,</span> bash_command<span class="token operator">=</span><span class="token string">&quot;echo hello&quot;</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">airflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;kevin airflow&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># Set dependencies between tasks</span>
    hello <span class="token operator">&gt;&gt;</span> airflow<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写后在 airflow web 端可以看到更新后的 任务。</p><figure><img src="`+c+`" alt="image-20230121131633924" tabindex="0" loading="lazy"><figcaption>image-20230121131633924</figcaption></figure><p>在 Graph 中查看具体每个环节的属性：instance details，可以看到每个环节的日志报告。</p><h3 id="删除-dags-任务" tabindex="-1"><a class="header-anchor" href="#删除-dags-任务" aria-hidden="true">#</a> 删除 dags 任务</h3><p>在页面中点击删除按钮，删除相关日志文件。而后删除对应的 python 文件。</p><h3 id="配置邮箱服务器" tabindex="-1"><a class="header-anchor" href="#配置邮箱服务器" aria-hidden="true">#</a> 配置邮箱服务器</h3><p>确保 SMTP 功能开启，可通过 SMTP 发送邮件。</p><p>在 airflow.cfg 中配置发件箱信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>smtp_host <span class="token operator">=</span> bbb.qiye.163.com
smtp_starttls <span class="token operator">=</span> False
smtp_ssl <span class="token operator">=</span> True
smtp_user <span class="token operator">=</span> xx@airflowdemo.com
smtp_password <span class="token operator">=</span> AOYDOJJRDGXUKDOM
smtp_port <span class="token operator">=</span> <span class="token number">465</span>
smtp_mail_from <span class="token operator">=</span> xx@airflowdemo.com
smtp_timeout <span class="token operator">=</span> <span class="token number">30</span>
smtp_retry_limit <span class="token operator">=</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="airflow-其他教程笔记" tabindex="-1"><a class="header-anchor" href="#airflow-其他教程笔记" aria-hidden="true">#</a> AIRFLOW 其他教程笔记</h2>`,13),y={href:"https://airflow.apache.org/docs/apache-airflow/stable/tutorial/fundamentals.html",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="初始化-dag-实例" tabindex="-1"><a class="header-anchor" href="#初始化-dag-实例" aria-hidden="true">#</a> 初始化 DAG 实例</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
default_args<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&quot;depends_on_past&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;airflow@example.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;email_on_failure&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token string">&quot;email_on_retry&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>
    <span class="token string">&quot;retries&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">&quot;retry_delay&quot;</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>minutes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment"># &#39;queue&#39;: &#39;bash_queue&#39;,</span>
    <span class="token comment"># &#39;pool&#39;: &#39;backfill&#39;,</span>
    <span class="token comment"># &#39;priority_weight&#39;: 10,</span>
    <span class="token comment"># &#39;end_date&#39;: datetime(2016, 1, 1),</span>
    <span class="token comment"># &#39;wait_for_downstream&#39;: False,</span>
    <span class="token comment"># &#39;sla&#39;: timedelta(hours=2),</span>
    <span class="token comment"># &#39;execution_timeout&#39;: timedelta(seconds=300),</span>
    <span class="token comment"># &#39;on_failure_callback&#39;: some_function,</span>
    <span class="token comment"># &#39;on_success_callback&#39;: some_other_function,</span>
    <span class="token comment"># &#39;on_retry_callback&#39;: another_function,</span>
    <span class="token comment"># &#39;sla_miss_callback&#39;: yet_another_function,</span>
    <span class="token comment"># &#39;trigger_rule&#39;: &#39;all_success&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">with</span> DAG<span class="token punctuation">(</span>dag_id<span class="token operator">=</span><span class="token string">&quot;your_dag_name&quot;</span><span class="token punctuation">,</span> 
        description<span class="token operator">=</span><span class="token string">&quot;A simple tutorial DAG&quot;</span><span class="token punctuation">,</span>
        default_args<span class="token operator">=</span>default_args<span class="token punctuation">,</span>
        start_date<span class="token operator">=</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        schedule<span class="token operator">=</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        catchup<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
        tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dag<span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用以下方式初始化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> airflow<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> dag<span class="token punctuation">,</span> task
<span class="token decorator annotation punctuation">@dag</span><span class="token punctuation">(</span>
    schedule<span class="token operator">=</span><span class="token string">&quot;@daily&quot;</span><span class="token punctuation">,</span>
    start_date<span class="token operator">=</span>pendulum<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> tz<span class="token operator">=</span><span class="token string">&quot;UTC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    catchup<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
    tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">tutorial_taskflow_api</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># define your task</span>
   
<span class="token comment"># 调用</span>
tutorial_taskflow_api<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数解析" tabindex="-1"><a class="header-anchor" href="#参数解析" aria-hidden="true">#</a> 参数解析</h4>`,5),q=n("code",null,"Schedule",-1),x=n("code",null,"schedule",-1),A={href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"schedule",-1),O={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dag-run.html",target:"_blank",rel:"noopener noreferrer"},G=n("li",null,[n("p",null,[n("code",null,"catchup"),s("：首次提交 dag 时，会从设置的 start_date 补齐到现在，如果 catchup=False，则只会执行最新的一次任务")])],-1),T=n("h3",{id:"任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#任务","aria-hidden":"true"},"#"),s(" 任务")],-1),S={href:"https://airflow.apache.org/docs/apache-airflow/stable/tutorial/taskflow.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    #### Extract task
    A simple Extract task to get data ready for the rest of the data
    pipeline. In this case, getting data is simulated by reading from a
    hardcoded JSON string.
    &quot;&quot;&quot;</span>
    data_string <span class="token operator">=</span> <span class="token string">&#39;{&quot;1001&quot;: 301.27, &quot;1002&quot;: 433.21, &quot;1003&quot;: 502.22}&#39;</span>

    order_data_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data_string<span class="token punctuation">)</span>
    <span class="token keyword">return</span> order_data_dict
<span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>order_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span>

<span class="token comment"># 调用</span>
order_data <span class="token operator">=</span> extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
order_summary <span class="token operator">=</span> transform<span class="token punctuation">(</span>order_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过参数传递的方式调用 task python 函数的话，对应的依赖关系会被记录。如上边的 DAGS 图应该为 extract -&gt; transform。</p><p>该特性仅在 airflow 2.0 有。在 airflow1.0 中，还需定义 <code>PythonOperator</code> 等。</p><p>被 <code>@task</code> 修饰的函数能通过 <code>fun.override()</code> 改变标签属性等，如 <code>task_id</code>, <code>priority_weight</code> 等。</p><h4 id="任务注释" tabindex="-1"><a class="header-anchor" href="#任务注释" aria-hidden="true">#</a> 任务注释</h4><p><strong>任务 Task 注解</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1<span class="token punctuation">.</span>doc_md <span class="token operator">=</span> dedent<span class="token punctuation">(</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;\\
#### Task Documentation
You can document your task using the attributes \`doc_md\` (markdown),
\`doc\` (plain text), \`doc_rst\`, \`doc_json\`, \`doc_yaml\` which gets
rendered in the UI&#39;s Task Instance Details page.
![img](http://montcs.bloomu.edu/~bobmon/Semesters/2012-01/491/import%20soul.png)
 **Image Credit:**  Randall Munroe, [XKCD](https://xkcd.com/license.html)
&quot;&quot;&quot;</span>
<span class="token punctuation">)</span>

dag<span class="token punctuation">.</span>doc_md <span class="token operator">=</span> __doc__  <span class="token comment"># providing that you have a docstring at the beginning of the DAG; OR</span>
dag<span class="token punctuation">.</span>doc_md <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
    This is a documentation placed anywhere
    &lt;div style=&quot;margin: 100px 100px&quot;&gt; Hello Hello&lt;div&gt;&quot;&quot;&quot;</span>  <span class="token comment"># otherwise, type it like this</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给任务写一个对应的文档说明。文档说明支持 md 和 http 格式。</p><p>DAG 的说明文档在 dag 首页顶部可以查看，而 task 文档则需要在 task Instance Details 文档中查看，如上实例中的 <code>t1</code>。</p><p><strong>边的关系注释</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> airflow<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>edgemodifier <span class="token keyword">import</span> Label

my_task <span class="token operator">&gt;&gt;</span> Label<span class="token punctuation">(</span><span class="token string">&quot;When empty&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> other_task
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="任务依赖关系" tabindex="-1"><a class="header-anchor" href="#任务依赖关系" aria-hidden="true">#</a> 任务依赖关系</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>t1<span class="token punctuation">.</span>set_downstream<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>
<span class="token comment"># 等价于下面：</span>
t2<span class="token punctuation">.</span>set_upstream<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
<span class="token comment"># 当然也可以使用</span>
t1 <span class="token operator">&gt;&gt;</span> t2
t2 <span class="token operator">&lt;&lt;</span> t1

<span class="token comment"># all have the same effect:</span>
t1<span class="token punctuation">.</span>set_downstream<span class="token punctuation">(</span><span class="token punctuation">[</span>t2<span class="token punctuation">,</span> t3<span class="token punctuation">]</span><span class="token punctuation">)</span>
t1 <span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span>t2<span class="token punctuation">,</span> t3<span class="token punctuation">]</span>
<span class="token punctuation">[</span>t2<span class="token punctuation">,</span> t3<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> t1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以使用 <code>chain</code> 来动态地定义任务流：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> airflow<span class="token punctuation">.</span>models<span class="token punctuation">.</span>baseoperator <span class="token keyword">import</span> chain

<span class="token comment"># Replaces op1 &gt;&gt; op2 &gt;&gt; op3 &gt;&gt; op4</span>
chain<span class="token punctuation">(</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> op4<span class="token punctuation">)</span>

<span class="token comment"># You can also do it dynamically</span>
chain<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span>EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&#39;op&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Replaces</span>
<span class="token comment"># op1 &gt;&gt; op2 &gt;&gt; op4 &gt;&gt; op6</span>
<span class="token comment"># op1 &gt;&gt; op3 &gt;&gt; op5 &gt;&gt; op6</span>
chain<span class="token punctuation">(</span>op1<span class="token punctuation">,</span> <span class="token punctuation">[</span>op2<span class="token punctuation">,</span> op3<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>op4<span class="token punctuation">,</span> op5<span class="token punctuation">]</span><span class="token punctuation">,</span> op6<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以同态的设置 DAGS：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> DAG<span class="token punctuation">(</span><span class="token string">&quot;loop_example&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> dag<span class="token punctuation">:</span>

    first <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span>
    last <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;last&quot;</span><span class="token punctuation">)</span>

    options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;branch_a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;branch_b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;branch_c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;branch_d&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> option <span class="token keyword">in</span> options<span class="token punctuation">:</span>
        t <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span>option<span class="token punctuation">)</span>
        first <span class="token operator">&gt;&gt;</span> t <span class="token operator">&gt;&gt;</span> last
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="任务流控制" tabindex="-1"><a class="header-anchor" href="#任务流控制" aria-hidden="true">#</a> 任务流控制</h4><h5 id="branching" tabindex="-1"><a class="header-anchor" href="#branching" aria-hidden="true">#</a> branching</h5><p>根据条件，选择执行哪条分支。可以使用一个 python 函数 进行判断，返回结果为需要执行的分支 ID。</p><img src="https://airflow.apache.org/docs/apache-airflow/stable/_images/branch_note.png"><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@task<span class="token punctuation">.</span>branch</span><span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;branch_task&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">branch_func</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">:</span>
    xcom_value <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ti<span class="token punctuation">.</span>xcom_pull<span class="token punctuation">(</span>task_ids<span class="token operator">=</span><span class="token string">&quot;start_task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> xcom_value <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;continue_task&quot;</span>
    <span class="token keyword">elif</span> xcom_value <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;stop_task&quot;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>


start_op <span class="token operator">=</span> BashOperator<span class="token punctuation">(</span>
    task_id<span class="token operator">=</span><span class="token string">&quot;start_task&quot;</span><span class="token punctuation">,</span>
    bash_command<span class="token operator">=</span><span class="token string">&quot;echo 5&quot;</span><span class="token punctuation">,</span>
    xcom_push<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    dag<span class="token operator">=</span>dag<span class="token punctuation">,</span>
<span class="token punctuation">)</span>

branch_op <span class="token operator">=</span> branch_func<span class="token punctuation">(</span><span class="token punctuation">)</span>

continue_op <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;continue_task&quot;</span><span class="token punctuation">,</span> dag<span class="token operator">=</span>dag<span class="token punctuation">)</span>
stop_op <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;stop_task&quot;</span><span class="token punctuation">,</span> dag<span class="token operator">=</span>dag<span class="token punctuation">)</span>

start_op <span class="token operator">&gt;&gt;</span> branch_op <span class="token operator">&gt;&gt;</span> <span class="token punctuation">[</span>continue_op<span class="token punctuation">,</span> stop_op<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以自定义 <code>operator</code> ，但是需要继承 <code>BaseBranchOperator</code> 类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyBranchOperator</span><span class="token punctuation">(</span>BaseBranchOperator<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">choose_branch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Run an extra branch on the first day of the month
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> context<span class="token punctuation">[</span><span class="token string">&#39;data_interval_start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>day <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;daily_task_id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;monthly_task_id&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">elif</span> context<span class="token punctuation">[</span><span class="token string">&#39;data_interval_start&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>day <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;daily_task_id&#39;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="latest-only" tabindex="-1"><a class="header-anchor" href="#latest-only" aria-hidden="true">#</a> Latest Only</h5><p>类似于 <code>catchup</code> 参数，<code>LatestOnlyOperator</code> 不会补全遗漏的历史任务。</p>`,26),B={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#latest-only",target:"_blank",rel:"noopener noreferrer"},j=n("h5",{id:"depends-on-past",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#depends-on-past","aria-hidden":"true"},"#"),s(" Depends on Past")],-1),F=n("p",null,[s("仅有在前一个任务运行成功的情况下才运行，可以设置 task 的参数 "),n("code",null,"depends_on_past=True"),s("， 来开启。")],-1),N=n("h5",{id:"trigger-rules",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#trigger-rules","aria-hidden":"true"},"#"),s(" Trigger Rules")],-1),R=n("code",null,"all_success",-1),P=n("code",null,"Branching",-1),I={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#trigger-rules",target:"_blank",rel:"noopener noreferrer"},L=t(`<ul><li><code>all_success</code> (default): All upstream tasks have succeeded</li><li><code>all_failed</code>: All upstream tasks are in a <code>failed</code> or <code>upstream_failed</code> state</li><li><code>all_done</code>: All upstream tasks are done with their execution</li><li><code>all_skipped</code>: All upstream tasks are in a <code>skipped</code> state</li><li><code>one_failed</code>: At least one upstream task has failed (does not wait for all upstream tasks to be done)</li><li><code>one_success</code>: At least one upstream task has succeeded (does not wait for all upstream tasks to be done)</li><li><code>one_done</code>: At least one upstream task succeeded or failed</li><li><code>none_failed</code>: All upstream tasks have not <code>failed</code> or <code>upstream_failed</code> - that is, all upstream tasks have succeeded or been skipped</li><li><code>none_failed_min_one_success</code>: All upstream tasks have not <code>failed</code> or <code>upstream_failed</code>, and at least one upstream task has succeeded.</li><li><code>none_skipped</code>: No upstream task is in a <code>skipped</code> state - that is, all upstream tasks are in a <code>success</code>, <code>failed</code>, or <code>upstream_failed</code> state</li><li><code>always</code>: No dependencies at all, run this task at any time</li></ul><h4 id="任务组" tabindex="-1"><a class="header-anchor" href="#任务组" aria-hidden="true">#</a> 任务组</h4><p>使用 <code>TaskGroup</code> ，基于当前的 DAG 配置进行任务分组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> airflow<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> task_group

<span class="token decorator annotation punctuation">@task_group</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">group1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    task1 <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;task1&quot;</span><span class="token punctuation">)</span>
    task2 <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;task2&quot;</span><span class="token punctuation">)</span>

task3 <span class="token operator">=</span> EmptyOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;task3&quot;</span><span class="token punctuation">)</span>

group1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> task3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 subDAG 进行分组，使用新的 DAG 配置。</p><h3 id="虚拟环境" tabindex="-1"><a class="header-anchor" href="#虚拟环境" aria-hidden="true">#</a> 虚拟环境</h3><p>创建动态的虚拟环境， DAGS 会在执行过程中动态安装虚拟环境。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>hello <span class="token operator">=</span> BashOperator<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> bash_command<span class="token operator">=</span><span class="token string">&quot;echo hello&quot;</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@task<span class="token punctuation">.</span>virtualenv</span><span class="token punctuation">(</span>
    task_id<span class="token operator">=</span><span class="token string">&quot;virtualenv_python&quot;</span><span class="token punctuation">,</span> requirements<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;numpy==1.20&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> system_site_packages<span class="token operator">=</span><span class="token boolean">False</span>
<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">new_np</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
    <span class="token keyword">return</span> <span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@task</span>
<span class="token keyword">def</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>__version__

<span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">airflow</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;np version after virtual task&quot;</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token comment"># Set dependencies between tasks</span>
    hello <span class="token operator">&gt;&gt;</span> new_np<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> airflow<span class="token punctuation">(</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如以上示例代码，在该 python 环境中，默认的 numpy 版本为 <code>1.21.6</code>，<code>new_np()</code> 打印 <code>1.20.x</code>，<code>airflow()</code> 中打印的内容为 <code>1.21.6</code>。因此 task 之间的虚拟环境是相互不受影响的。</p><p>以上方式会在线安装环境，可以考虑使用本地已有的 python 环境：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@task<span class="token punctuation">.</span>external_python</span><span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;external_python&quot;</span><span class="token punctuation">,</span> python<span class="token operator">=</span>PATH_TO_PYTHON_BINARY<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">callable_external_python</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 docker 运行：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@task<span class="token punctuation">.</span>docker</span><span class="token punctuation">(</span>image<span class="token operator">=</span><span class="token string">&quot;python:3.9-slim-bullseye&quot;</span><span class="token punctuation">,</span> multiple_outputs<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>order_data_dict<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    #### Transform task
    A simple Transform task which takes in the collection of order data and
    computes the total order value.
    &quot;&quot;&quot;</span>
    total_order_value <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> value <span class="token keyword">in</span> order_data_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        total_order_value <span class="token operator">+=</span> value

    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;total_order_value&quot;</span><span class="token punctuation">:</span> total_order_value<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以使用 k8s 集群，具体查看官网。</p><h3 id="sensor-数据流" tabindex="-1"><a class="header-anchor" href="#sensor-数据流" aria-hidden="true">#</a> sensor 数据流</h3><p>可以使用 <code>sensorOperator</code> 控制数据流。如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Using a sensor operator to wait for the upstream data to be ready.</span>
<span class="token decorator annotation punctuation">@task<span class="token punctuation">.</span>sensor</span><span class="token punctuation">(</span>poke_interval<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;reschedule&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">wait_for_upstream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> PokeReturnValue<span class="token punctuation">:</span>
    <span class="token keyword">return</span> PokeReturnValue<span class="token punctuation">(</span>is_done<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> xcom_value<span class="token operator">=</span><span class="token string">&quot;xcom_value&quot;</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@task</span>
<span class="token keyword">def</span> <span class="token function">dummy_operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
wait_for_upstream<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> dummy_operator<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者当我们需要从某个路径导入文件时，可以设置文件等待：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">extract_from_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    #### Extract from file task
    A simple Extract task to get data ready for the rest of the data
    pipeline, by reading the data from a file into a pandas dataframe
    &quot;&quot;&quot;</span>
    order_data_file <span class="token operator">=</span> <span class="token string">&quot;/tmp/order_data.csv&quot;</span>
    order_data_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>order_data_file<span class="token punctuation">)</span>


file_task <span class="token operator">=</span> FileSensor<span class="token punctuation">(</span>task_id<span class="token operator">=</span><span class="token string">&quot;check_file&quot;</span><span class="token punctuation">,</span> filepath<span class="token operator">=</span><span class="token string">&quot;/tmp/order_data.csv&quot;</span><span class="token punctuation">)</span>
order_data <span class="token operator">=</span> extract_from_file<span class="token punctuation">(</span><span class="token punctuation">)</span>

file_task <span class="token operator">&gt;&gt;</span> order_data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jinja-模板" tabindex="-1"><a class="header-anchor" href="#jinja-模板" aria-hidden="true">#</a> Jinja 模板</h3>`,20),C={href:"https://jinja.palletsprojects.com/en/2.11.x/",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>templated_command <span class="token operator">=</span> dedent<span class="token punctuation">(</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
{% for i in range(5) %}
    echo &quot;{{ ds }}&quot;
    echo &quot;{{ macros.ds_add(ds, 7)}}&quot;
{% endfor %}
&quot;&quot;&quot;</span>
<span class="token punctuation">)</span>

t3 <span class="token operator">=</span> BashOperator<span class="token punctuation">(</span>
    task_id<span class="token operator">=</span><span class="token string">&quot;templated&quot;</span><span class="token punctuation">,</span>
    depends_on_past<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
    bash_command<span class="token operator">=</span>templated_command<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>airflow 支持通过 jinja 模板来传递 bash 操作。</p><h3 id="文件架构" tabindex="-1"><a class="header-anchor" href="#文件架构" aria-hidden="true">#</a> 文件架构</h3>`,3),V={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#packaging-dags",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#airflowignore",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"dag_folder",-1),H=n("h3",{id:"其他操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他操作","aria-hidden":"true"},"#"),s(" 其他操作")],-1),J=n("code",null,"httpOperator",-1),U=n("code",null,"sqsPublishOperator ",-1),W={href:"https://airflow.apache.org/docs/apache-airflow-providers-postgres/stable/operators/postgres_operator_howto_guide.html#creating-a-postgres-database-table",target:"_blank",rel:"noopener noreferrer"},$=t(`<h3 id="airflow-命令行操作" tabindex="-1"><a class="header-anchor" href="#airflow-命令行操作" aria-hidden="true">#</a> Airflow 命令行操作</h3><p>查看 DAG 代码是否有问题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python ~/airflow/dags/test.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试 DAGS 中的各个环节</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># command layout: command subcommand [dag_id] [task_id] [(optional) date]</span>

<span class="token comment"># testing print_date</span>
airflow tasks <span class="token builtin class-name">test</span> tutorial print_date <span class="token number">2015</span>-06-01

<span class="token comment"># testing sleep</span>
airflow tasks <span class="token builtin class-name">test</span> tutorial <span class="token function">sleep</span> <span class="token number">2015</span>-06-01
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他参考链接" tabindex="-1"><a class="header-anchor" href="#其他参考链接" aria-hidden="true">#</a> 其他参考链接</h2>`,6),K={href:"https://zhuanlan.zhihu.com/p/336458279",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#concepts-trigger-rules",target:"_blank",rel:"noopener noreferrer"};function X(Z,nn){const a=p("ExternalLinkIcon");return i(),l("div",null,[n("p",null,[n("a",u,[s("官网"),e(a)])]),d,n("p",null,[s("Do not use "),k,s(" as metadata DB in production – it should only be used for dev/testing. We recommend using Postgres or MySQL. "),n("a",v,[m,s(),e(a)]),s(" for more information.")]),b,n("p",null,[s("Do not use "),h,s(" in production. "),n("a",g,[_,s(),e(a)]),s(" for more information.")]),f,n("p",null,[n("a",y,[s("官方文档"),e(a)])]),w,n("ul",null,[n("li",null,[n("p",null,[q,s(" ：其中 "),x,s(" 参数支持 "),n("a",A,[s("Crontab"),e(a)]),s(" 配置。更多关于 "),D,s(" 的信息，可以查看 "),n("a",O,[s("DAG Runs"),e(a)]),s("。")])]),G]),T,n("p",null,[n("a",S,[s("任务"),e(a)]),s(" task 任务定义方式：")]),E,n("p",null,[n("a",B,[s("参考链接"),e(a)])]),j,F,N,n("p",null,[s("基于前面任务运行失败或者成功，条件选择运行某个 task，默认为 "),R,s("，所有上游任务完成后，才能运行当前任务。。该功能与 "),P,s(" 一起使用时需要谨慎 "),n("a",I,[s("官网解释"),e(a)]),s("。")]),L,n("p",null,[n("a",C,[s("jinjia 文档"),e(a)])]),M,n("p",null,[n("a",V,[s("官网说明 - packaging DAGs"),e(a)])]),n("p",null,[n("a",Y,[s(".airflowignore"),e(a)]),s(" - 类似 gitignore 能够配置 "),z,s(" 下需要无视的文件。")]),H,n("p",null,[s("如 "),J,s(", "),U,s(", "),n("a",W,[s("PostgresOperator"),e(a)]),s("等")]),$,n("p",null,[n("a",K,[s("知乎网友笔记"),e(a)])]),n("p",null,[n("a",Q,[s("DAGS 官网笔记"),e(a)])])])}const an=o(r,[["render",X],["__file","笔记airflow.html.vue"]]);export{an as default};
