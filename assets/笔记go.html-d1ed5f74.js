import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,a as s,b as n,d as e,e as r,f as t}from"./app-c5f67444.js";const i={},d=s("p",null,"对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。 关键词：快速、并行。",-1),y={href:"https://studygolang.com/pkgdoc",target:"_blank",rel:"noopener noreferrer"},u={href:"https://go.dev/doc/",target:"_blank",rel:"noopener noreferrer"},v=s("h2",{id:"安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),n(" 安装")],-1),m={href:"https://go.dev/doc/install",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"go1.17.6.linux-amd64.tar.gz",-1),b=s("code",null,"/usr/local",-1),E=s("code",null,"export PATH=$PATH:/usr/local/go/bin",-1),g={href:"https://www.jetbrains.com/go/",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><p><code>hello.go</code> 文件架构。源码内容必须使用 <code>UTF-8</code> 格式编写。必须在源文件中非注释的第一行指明这个文件属于哪个包，运行程序必须有一个 main 包，且一个工程文件夹只能有一个 main 包</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {  </span><span style="color:#6A737D;">// {不能放单独一行</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">/* 这是我的第一个简单的程序 */</span></span>
<span class="line"><span style="color:#24292E;">   fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, World!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接运行代码 <code>go run hello.go</code>。使用 <code>go build hello.go</code> 生成 二进制文件。</p><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><p>声明变量 <code>var a int</code>，变量声明后必须使用。 赋值 <code>a=10</code> 声明并赋值：<code>var c = 1</code> 或使用自动推导类型：<code>c, b := 30, 20</code> 不需要声明。Go 支持多重赋值：<code>c,b=b,c</code>，同时支持匿名变量 <code>c,_ = run()</code> 多个全局变量可以一起声明：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#005CC5;">var</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">bool</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h4><p>整型 <code>%d</code>：<code>int16</code>, <code>uint16</code> 浮点型 <code>%f</code>：<code>float32</code>, <code>float64</code>, <code>complex64</code>, <code>complex128</code> 布尔型：<code>bool</code> 字符串 <code>%s</code>：<code>string</code> 字符 <code>%c</code>：<code>uint8</code>或<code>byte</code> 代表 ASCII 字符，<code>rune</code> 代表 UTF-8 字符 其他：<code>Pointer</code>, <code>Channel</code>, <code>interface</code>, <code>struct</code>, <code>Map</code></p><p><code>bool</code> 不支持类型转换，类型转换使用：<code>int(a)</code></p><p>类型别名：<code>type bigint int64</code> 给 <code>int64</code> 取别名</p><h4 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h4><p>定义格式：<code>const a int = 10</code> 其中类型可省略。 支持表达式定义：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#005CC5;">const</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abc&quot;</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#24292E;">    c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> unsafe.</span><span style="color:#005CC5;">Sizeof</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1。同一行的 iota 值相同</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iota</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#24292E;">    b          </span><span style="color:#6A737D;">//1 使用上一行表达式</span></span>
<span class="line"><span style="color:#24292E;">    c          </span><span style="color:#6A737D;">//2</span></span>
<span class="line"><span style="color:#24292E;">    d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ha&quot;</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">//独立值，iota += 1</span></span>
<span class="line"><span style="color:#24292E;">    e          </span><span style="color:#6A737D;">//&quot;ha&quot;   iota += 1</span></span>
<span class="line"><span style="color:#24292E;">    f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">//iota +=1</span></span>
<span class="line"><span style="color:#24292E;">    g          </span><span style="color:#6A737D;">//100  iota +=1</span></span>
<span class="line"><span style="color:#24292E;">    h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iota</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">//7,恢复计数</span></span>
<span class="line"><span style="color:#24292E;">    i          </span><span style="color:#6A737D;">//8</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h4><p>位运算符：<code>&amp;</code> 与， <code>|</code> 非， <code>^</code> 异或，<code>&lt;&lt;</code> 左移 支持赋值运算符：<code>c |= 2</code> 其他：<code>&amp;</code> 取地址，<code>*</code> 取值</p><h4 id="逻辑语句" tabindex="-1"><a class="header-anchor" href="#逻辑语句" aria-hidden="true">#</a> 逻辑语句</h4><p><strong>条件语句</strong></p><p>支持 1 个初始化语句，初始化和判断以分号分割 <code>if c:= 1;c == 1 {}</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {  </span><span style="color:#6A737D;">// else 需要在 } 后面</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>循环语句</strong></p><p>并没有 while 语句</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> d</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;d</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;d</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, val </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> str{}  </span><span style="color:#6A737D;">// 使用迭代器 i 为 索引，val 为值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持 <code>break</code>, <code>continue</code>, <code>goto</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">goto</span><span style="color:#24292E;"> label</span></span>
<span class="line"><span style="color:#24292E;">label: statement   </span><span style="color:#6A737D;">//跳转到改行执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h4><p>数组声明：<code>var name [10] int</code> 可以用 <code>...</code> 代替长度 初始化：<code>var a = [2]float32{1.2,1.1}</code> 或 <code>b := [...]int{1,2}</code> 索引或修改：<code>b[1] = 0</code> 向函数传递数组使用：<code>void fun(param []int)</code> 多维数组：<code>var c [2][2][2]int</code> 初始化多维数组：<code>c:=[2][2]int{{0,1},{1,1}}</code></p><p>获取命令行参数：<code>list := os.Args</code>，如<code>go run hello.go 12 34</code> 命令， list 中储存 <code>[命令执行文件地址 12 34]</code></p><h4 id="指针" tabindex="-1"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h4><p><code>var a *int</code> 整型指针。 空指针判断：<code>a == nil</code>，必须有合法指向才可以操做指针：<code>p = &amp;a</code>, <code> *p = 100</code> 可以使用 new 申请可操作空间 <code>var p *int</code>, <code>p = new(int)</code>, <code>*p = 6</code>。或者使用 <code>q := new(int)</code></p><p>指针数组：<code>var ptr [4]*int</code>，数组指针需要取值 <code>*ptr[4]</code> 使用。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ptr [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">*int</span></span>
<span class="line"><span style="color:#24292E;">ptr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体" aria-hidden="true">#</a> 结构体</h4><p>定义结构体</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Books</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	title </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">    author </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化：<code>var b Books = Books{xx,xx}</code> 可以查看或修改结构体信息：<code>b.title = &quot;123&quot;</code></p><p><strong>结构体指针</strong><br> 指针有合法指向后，才能才做成员。需要定义普通结构体后，再建立指针指向结构体。 初始化：<code>var struct_ptr *Books</code> 指向结构体：<code>struct_ptr = &amp;p</code> 或 <code>struct_ptr := new(Books) </code> 调用及修改成员：<code>struct_ptr.title</code> 函数传参：<code>func a(book *Book)</code></p><p>结构体可以进行 <code>==</code> 比较。同类型结构体可以相互赋值。</p><h4 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性" aria-hidden="true">#</a> 可见性</h4><p>如果想使用别的包的函数、结构体类型、结构体成员，那么变量名称必须大写开头，可见。如果是小写，只能在同一个包里使用。</p><h4 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h4><p>可使用 make 初始化：<code>var a []int = make([]int,len)</code> 可以对数组进行截取接片 <code>s := a[0:2]</code> 空切片为 <code>a == nil</code></p><h4 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h4><p>map 通过 hash 实现，是无序的键值对集合</p><p><code>var mymap map[string]string</code> 声明变量，默认 map 是 <code>nil</code><code>mymap := make(map[string]string) </code>需要初始化才能存放键值对。 <code>mymap[&quot;123&quot;]=&quot;23&quot;</code><code>b, c := a[&quot;123&quot;]</code> 若不存在键值，c 为 false，b 为空。 使用 <code>range</code> 遍历的是键值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> country </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> countryCapitalMap {</span></span>
<span class="line"><span style="color:#24292E;">        fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(country, </span><span style="color:#032F62;">&quot;首都是&quot;</span><span style="color:#24292E;">, countryCapitalMap [country])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除键值：<code>delete(countryCapitalMap, &quot;France&quot;)</code> map 作为函数参数传递：<code>fun test(m map[int]int)</code> 。本质是值传递</p><h4 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> <strong>defer</strong></h4><p><code>defer print(xxx)</code> 在 main 函数结束前执行语句。多个 defer 下，根据先进后出执行，部分 defer 语句发生什么错误，其他 defer 语句仍可以执行。defer 的匿名函数会先传递参数。</p><h4 id="工作区" tabindex="-1"><a class="header-anchor" href="#工作区" aria-hidden="true">#</a> 工作区</h4><p>导入包 <code>import xx</code> 必须使用，否则编译不过。导入包起别名：<code>import name &quot;fmt&quot;</code></p><p>1、创建 <code>greeting</code> 文件夹，<code>go mod init example.com/greetings </code> 初始化模块，模块名称建议为 <code>公司名/包名</code>。文件夹中的所有源文件需写入 <code>package greeting</code>。 <strong>如果使用别的包的函数，包名中的函数必须首字母大写。</strong> 2、创建 <code>main</code> 文件夹，<code>go mod init example.com/main</code> 初始化同上，创建 <code>main.go</code> 并编写。 3、<code>go mod edit -replace example.com/greetings=../greetings</code> 指定依赖包的路径。 4、<code>go mod tidy</code> 生成 <code>example/main</code> 的依赖信息。完成后 <code>main</code> 文件夹下的 <code>go.mod</code> 内容为：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">module example.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">replace example.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">greetings </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">greetings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">require example.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">greetings v0.</span><span style="color:#005CC5;">0.0</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">00010101000000</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">000000000000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入包时，首先执行 <code>func init(){}</code> 函数。调用某个包的 <code>init</code> 函数，但不调用包下其他函数：<code>import _ &quot;fmt&quot;</code> 同包 <code>package</code> 下，使用其他文件函数，直接调用函数名。</p><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><p>函数定义：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(num1 </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, num2 </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>支持返回多个值：<code>func swap(x, y string) (string, string){}</code></p><p>以上为通过 <strong>值传递</strong> ，在函数中处理的为单数副本。使用 <strong>引用传递</strong> 可修改值。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">*int</span><span style="color:#24292E;">, y </span><span style="color:#D73A49;">*int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">   temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">x    </span><span style="color:#6A737D;">/* 保持 x 地址上的值 */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">y      </span><span style="color:#6A737D;">/* 将 y 值赋给 x */</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp    </span><span style="color:#6A737D;">/* 将 temp 值赋给 y */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不定参数通过迭代或者索引使用，传递 <code>args</code> 类型为数组</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myfun</span><span style="color:#24292E;">(args </span><span style="color:#D73A49;">...int</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, val </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> args {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">println</span><span style="color:#24292E;">(i, val)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>myfun2(args...)</code> 传递全部 args 参数，传递部分参数：<code>myfun2(args[:2]...)</code></p><h4 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">f1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包中的函数可以捕获到外部定义的变量。只要闭包函数还在使用这个变量，他就会一直存在。 如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSequence</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   i</span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      i</span><span style="color:#D73A49;">+=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i  </span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><p>为结构体定义方法：<code>func (c Cicle) getArea() float64{return c.r * c.r *3.14}</code> 使用：<code>var c1 Circle</code> , <code>c1.getArea()</code></p><h4 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型" aria-hidden="true">#</a> 函数类型</h4><p>定义函数类型 <code>type FuncType func(int,int) int</code>, <code>var test FuncType </code></p><h4 id="回调" tabindex="-1"><a class="header-anchor" href="#回调" aria-hidden="true">#</a> 回调</h4><p>传入对应的函数对象，实现不同功能</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FuncType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Calc</span><span style="color:#24292E;">(a, b </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, myfun FuncType) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myfun</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="面向对象编程" tabindex="-1"><a class="header-anchor" href="#面向对象编程" aria-hidden="true">#</a> 面向对象编程</h3><p>封装通过方法实现，继承通过匿名字段实现，多态通过接口实现</p><h4 id="匿名组合" tabindex="-1"><a class="header-anchor" href="#匿名组合" aria-hidden="true">#</a> 匿名组合</h4><p><strong>结构体匿名字段</strong> 类似于继承，实现了代码复用：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">    age  </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Person  </span></span>
<span class="line"><span style="color:#24292E;">    num </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a{Person{</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">d </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> a{Person{</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有类型，没有名字。匿名字段继承了 Person 所有的成员。<code>fmt.Printf(&quot;%+v&quot;, d)</code> 使用格式化输出详细的结构体信息，结果：<code>{Person:{name:1 age:1} num:1}</code> 。<code>%T</code> 输出变量类别， <code>%p</code> 输出变量地址。 结构体中的结构体可以当做整体进行复制：<code>d.Person = Person{&quot;1&quot;,1}</code> 对于同名字段，默认采用就近原则：优先操作本作用于字段。</p><p>对于指针类型的匿名字段：<code>type a struct{*Person}</code> 初始化使用地址：<code>d := a{&amp;Person{&quot;1&quot;, 1}, 1}</code></p><h4 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1" aria-hidden="true">#</a> 方法</h4><p>类似于面向对象的封装。<code>func (temp Long) fun_name(){}</code><br> 为结构体添加方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (temp Person) </span><span style="color:#6F42C1;">PrintInfo</span><span style="color:#24292E;">(){</span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(temp.name)}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">p</span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">p.</span><span style="color:#005CC5;">PrintInfo</span><span style="color:#24292E;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要修改结构体内容，使用 <code>func (p * Person) Setinfo(){}</code> 。其中接受者类型本身不能为指针。如 <code>person = &amp;Person</code> <code>func (p person)Setinfo(){}</code> 会出错。 方法不支持重载。</p><p>相同变量，通过指针或者普通变量定义的方法均可调用。</p><p>结构体匿名字段可以继承方法。</p><h4 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">call</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">//只放函数声明</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NokiaPhone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (nokiaPhone NokiaPhone) </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I am Nokia, I can call you!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> phone Phone</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(NokiaPhone)</span></span>
<span class="line"><span style="color:#24292E;">    phone.</span><span style="color:#005CC5;">call</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多态可以用于函数中，将接口作为参数传入：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Makecall</span><span style="color:#24292E;">(p Phone){p.</span><span style="color:#005CC5;">call</span><span style="color:#24292E;">()}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接口继承：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Smartphone</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Phone</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">sing</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>超集可以转换为子集：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> phone Phone       </span><span style="color:#6A737D;">// 子集</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sphone Smartphone </span><span style="color:#6A737D;">// 超集</span></span>
<span class="line"><span style="color:#24292E;">	phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sphone</span></span>
<span class="line"><span style="color:#24292E;">	phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(NokiaPhone)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//phone.sing()</span></span>
<span class="line"><span style="color:#24292E;">	phone.</span><span style="color:#005CC5;">call</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空接口可以保存任意类型的值：<code>var i interface{} = 1</code>，定义三个空接口：<code>i := make([]interface{},3)</code> 判断其中值是否为某类型 <code>value, ok = data.(int)</code>，data 为 <code>int</code> 时为 <code>true</code></p><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h3><h4 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> error</h4><p>error 是一个接口类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">packages errors</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#005CC5;">Error</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回一个错误信息 <code>err1 = errors.New(&quot;math: square root of negative number&quot;)</code></p><p>或者使用 <code>err1 := fmt.Errorf(&quot;error message)</code></p><h4 id="panic" tabindex="-1"><a class="header-anchor" href="#panic" aria-hidden="true">#</a> panic</h4><p>比 error 错误更致命，会导致程序崩溃。 显示调用：<code>panic(&quot;message&quot;)</code> 空指针、数组越界会导致 panic</p><h4 id="recover" tabindex="-1"><a class="header-anchor" href="#recover" aria-hidden="true">#</a> recover</h4><p>设置 recover</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">recover</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new error&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	a[x] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p><code>import strings</code><code>Contains(s string, substr string) bool</code> 拼接<code>strings.Join(sl []string, s string) string</code><code>strings.Index(s string, substr string) int</code> 重复字符串 n 次：<code>strings.Repeat(s string, n int) string</code> 以 s2 拆分字符：<code>strings.Split(s string, s2 string) []string</code> 去掉两头的字符：<code>strings.Trim(s, s2 string) string</code> 去掉前后空格，并按空格分隔字符串：<code>strings.Fields(s string) []string</code></p><h4 id="strconv" tabindex="-1"><a class="header-anchor" href="#strconv" aria-hidden="true">#</a> strconv</h4><p>字符串转换使用 <code>strconv</code> 常用的有 append：<code>strconv.AppendInt(slice, 1234, 10)</code>以 10 进制添加字符串。 Format：<code>strconv.FormatFloat(f 3.14, &#39;f&#39;, -1, 64)</code> 或整型转字符串 <code>strconv.Itoa(666)</code> 字符串转整型：<code>strconv.Atoi(&quot;567&quot;)</code></p><h4 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h4><p>通过 regexp 包使用，实现了 RE2 语法。 大部分与 python 语法相似。效率没有 strings 包高，但是功能强大。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123 143 45 4&quot;</span></span>
<span class="line"><span style="color:#24292E;">pattern </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`1\\d3\`</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 此处使用\`\` 非 &quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">reg1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> regexp.</span><span style="color:#005CC5;">MustCompile</span><span style="color:#24292E;">(pattern)</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> reg1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error message&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> reg1.</span><span style="color:#005CC5;">FindAllStringSubmatch</span><span style="color:#24292E;">(a, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(result)</span></span>
<span class="line"><span style="color:#6A737D;">//[[123] [143]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> json</h4><p>通过结构体生成 json：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 成员变量名必须大写</span></span>
<span class="line"><span style="color:#24292E;">	Age  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;age&quot;\`</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//二次编码，输出时属性名为小写。</span></span>
<span class="line"><span style="color:#24292E;">	Num  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;-&quot;\`</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">//不会输出</span></span>
<span class="line"><span style="color:#24292E;">	Name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	Isok </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;,string&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> IT{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	buf, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// buf 为切片类型</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;err = &quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(buf))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>格式化输出使用：<code>buf, err := json.MarshalIndent(i, &quot;空符号&quot;, &quot;缩进符号&quot;) </code></p><p>通过 <code>map</code> 生成 json：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">a[</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span></span>
<span class="line"><span style="color:#24292E;">a[</span><span style="color:#032F62;">&quot;member&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;apple&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">a[</span><span style="color:#032F62;">&quot;num&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">34</span></span>
<span class="line"><span style="color:#24292E;">a[</span><span style="color:#032F62;">&quot;isok&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">buf, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">(a)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析 json 到结构体：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> temp IT</span></span>
<span class="line"><span style="color:#24292E;">jsonBuf </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`{&quot;isok&quot;:true,&quot;age&quot;:123,&quot;Name&quot;:&quot;123&quot;,&quot;num&quot;:34}</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Unmarshal</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(jsonBuf), </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">temp)  </span><span style="color:#6A737D;">// 需要结构体地址传递</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;err = &quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(temp)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jsonBuf 需要使用未解析字符串，json 文件需要与结构体中的 json 命名规则对应。</p><p>json 到 map：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Unmarshal</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(jsonBuf), </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>取值需要使用 <code>c := a[&quot;Name&quot;]</code> 直接提取，使用<code>va c string</code>, <code>c = a[&quot;Name&quot;]</code> 存在错误：<code>cannot use a[&quot;Name&quot;] (type interface {}) as type string in assignment:</code></p><h3 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h3><p>标准输出设备（屏幕）为 <code>os.Stdout</code>， 标准输入：<code>fmt.Scan(&amp;input)</code> 写入文件：Create 会抹掉文件原有内容：<code>f, err = os.Create(path string)</code>；使用后关闭文件 <code>f.Close()</code>； 写入：<code>n, err := f.writeString(s string)</code> ；<code>n == len(s)</code> 读取文件：<code>f, err = os.Open(path string)</code> ； 每次读取一行：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">r </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> bufio.</span><span style="color:#005CC5;">NewReader</span><span style="color:#24292E;">(f)</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    text, _, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> r.</span><span style="color:#005CC5;">ReadLine</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> io.EOF {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(text))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>info, err = os.Stat(filename string)</code> 获取文件属性，包括大小，名字等。</p><h3 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h3><p>go 语言从语言层面你支持了并发</p><h4 id="goroutine" tabindex="-1"><a class="header-anchor" href="#goroutine" aria-hidden="true">#</a> goroutine</h4><p>开启一个新的运行期线程 goroutine 来执行函数：<code>go fun(...)</code>。 主线程退出后，子线程也会退出。</p><h4 id="runtime" tabindex="-1"><a class="header-anchor" href="#runtime" aria-hidden="true">#</a> runtime</h4><p><code>import runtime</code><code>runtime.Gosched()</code> 先让出时间，等别的协程执行完毕后再接下去执行。 <code>runtime.Goexit()</code> 终止当前协程。 设置 CPU 核数：<code>runtime.GOMAXPROS(4) </code></p><h4 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> <strong>channel</strong></h4><p><code>ch := make(chan int)</code> 声明一个通道 <code>ch &lt;- v</code> 把 v 发送到 ch 通道 <code>v := &lt;- ch</code> 从 ch 接收数据，并进入阻塞直到数据接收完毕。 默认通道不带缓冲区，发送端发送数据，接收端必须接收数据。 <strong>当通道中有未读取的数据并且达到容量上限时，发送端会进入阻塞。当通道中没有数据时，接收端会进入阻塞。</strong> 带缓冲区的通道：<code>ch := make(chan int, 100)</code> 。此处的容量： <code>cap(c) == 100</code> 关闭：<code>close(ch)</code>，关闭 channel 后，再发数据会导致 panic，但是可以继续从 channel 接收数据。 <code>num, ok := &lt;-ch</code> 如果 <code>ok == true</code> 说明管道没有关闭 使用 range 遍历 channel，在结束时会自动跳出循环。<code>for num := range ch{}</code></p><p>单向 channel：<code>var writeCh chan&lt;- int = ch</code> 将双向管道改为单向。<code>writeCh &lt;- 6</code>；只读：<code>var readCh &lt;-chan int = ch</code>，<code>&lt;-readCh</code>。单向无法转换为双向。 单向 channel 作为函数传参使用：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(out </span><span style="color:#D73A49;">chan&lt;-</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">out </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">c</span><span style="color:#24292E;">(in </span><span style="color:#D73A49;">&lt;-chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(in)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">ch </span><span style="color:#D73A49;">:=</span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 调用 p(ch) c(ch)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><h4 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> Timer</h4><p><code>timer := time.NewTimer(time.Second)</code> 一秒后往 <code>time</code> 通道写入当前时间内容（仅写入一次），<code>t := time.C</code> 从 <code>time</code> 通道接收。</p><p><code>timer := time.NewTricker(time.Second)</code> 以一秒中为周期，持续往 <code>time.C</code> 通道写入内容。</p><p>定时器停止：<code>timer.Stop()</code> 定时器重置时间：<code>timer.Reset(time.Second)</code></p><h4 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> Select</h4><p>可以实现几秒后没有操作就退出程序：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;"> ch:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(x)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">time.</span><span style="color:#005CC5;">After</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">time.Second):</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行条件满足的语句，当多个语句满足条件时，随机顺序执行所有满足的语句。</p><h3 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程" aria-hidden="true">#</a> 网络编程</h3><h4 id="net" tabindex="-1"><a class="header-anchor" href="#net" aria-hidden="true">#</a> net</h4><p><code>import net</code><code>listener, err := net.Listen(&quot;tcp&quot;,&quot;127.0.0.1:8000&quot;)</code></p><p>服务器初始化：<code>listener, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:8000&quot;)</code> 服务器接收：<code>conn, err := listener.Accept()</code>，通过 byte 数组接收<code>buf := make([]byte, 1024)</code>，<code>n, err1 := conn.Read(buf)</code> 返回 <code>n</code> 为数据长度； 服务器发送：<code>conn.Write([]byte(&quot;123&quot;))</code></p><p>客户端初始化：<code>conn, err := net.Dial(&quot;tcp&quot;, &quot;127.0.0.1:8000&quot;)</code> 客户端发送：<code>conn.Write([]byte(&quot;this is a meaage&quot;))</code>； 客户端接收服务器信息：<code>n, err1 := conn.Read(buf)</code></p><p>使用结束后关闭：<code>listener.Close()</code>，<code>cnn.Close()</code></p><h4 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h4><p><code>import net/http</code></p><p>服务器网页返回信息：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myHandler</span><span style="color:#24292E;">(w http.ResponseWriter, r </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">http.Request) {</span></span>
<span class="line"><span style="color:#24292E;">	 w.</span><span style="color:#005CC5;">Write</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 <code>/go</code> 路径的返回函数：<code>http.HandleFunc(&quot;/go&quot;, myHandler)</code> 设置服务器地址：<code>http.ListenAndServe(&quot;127.0.0.1:8000&quot;, nil)</code></p><p>客户端： <code>resp, err := http.Get(&quot;http://www.baidu.com&quot;)</code> 获取请求信息：<code>resp.Status</code>, 读取网页：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">buf </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    n,err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> resp.Body.</span><span style="color:#005CC5;">Rea</span><span style="color:#24292E;">(buf)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;read end&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">break</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    tmp </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(buf[:n])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">resp.Body</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,164);function A(C,D){const a=o("ExternalLinkIcon");return p(),c("div",null,[s("blockquote",null,[d,s("p",null,[s("a",y,[n("中文 golang 文档"),e(a)]),n(", "),s("a",u,[n("Go 文档"),e(a)])])]),r("more"),v,s("p",null,[s("a",m,[n("官方教程"),e(a)]),n("：下载 "),h,n(" ，解压到 "),b,n(" 。配置环境路径 "),E]),s("p",null,[n("IDE："),s("a",g,[n("GoLand"),e(a)]),n("， LiteIDE 等")]),f])}const k=l(i,[["render",A],["__file","笔记go.html.vue"]]);export{k as default};
