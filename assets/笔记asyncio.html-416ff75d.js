import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as e,c as o,a as s,d as p,f as c}from"./app-c62a9332.js";const t={},r={href:"https://docs.python.org/zh-cn/3/library/asyncio.html",target:"_blank",rel:"noopener noreferrer"},i=c(`<h3 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop" aria-hidden="true">#</a> eventloop</h3><p>Eventloop 是 Asyncio 的核心功能之一。他能够用于储存多个 task，并指定 task 进行运行。同时，在某个 task A 进行等待时，eventloop 可以将执行权分发给下一个等候的 task。</p><h3 id="corroutine" tabindex="-1"><a class="header-anchor" href="#corroutine" aria-hidden="true">#</a> corroutine</h3><p>在执行 corroutine 过程中，可以将执行权交给其他协程。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># corroutine function</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> asyncio.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">coro </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> main()  </span><span style="color:#6A737D;"># # corroutine object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 corroutine function， 返回的结果是 corrouting object。corrouting funciton 内的内容不会被执行。</p><p>执行 corroutine function 内容，需要使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">asyncio.run(coro)  </span><span style="color:#6A737D;"># 传入 corroutine object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用 eventloop :</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">loop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> asyncio.get_event_loop()</span></span>
<span class="line"><span style="color:#24292E;">loop.run_until_complete(main())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="future" tabindex="-1"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h3><p>Future 是协程的封装，提供了对协程任务的管理，回调，查看结果等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__await_</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.done():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._asyncio_future_blocking </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.done():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RuntimeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;await wasn&#39;t used with future&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.result()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-和-await" tabindex="-1"><a class="header-anchor" href="#task-和-await" aria-hidden="true">#</a> task 和 await</h3><p>task 是 future 的子类，实际开发中使用 task 更多。当 await 一个 task 时候，await 能够同时执行所有 <code>await task</code>。如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    task1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> asyncio.create_task(</span></span>
<span class="line"><span style="color:#24292E;">         say_after(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    task2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> asyncio.create_task(</span></span>
<span class="line"><span style="color:#24292E;">         say_after(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;started at </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">time.strftime( </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">%X</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    result1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> task1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result1)</span></span>
<span class="line"><span style="color:#24292E;">    result2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> task2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result2)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;finished at </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">time.strftime( </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">%X</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;输出</span></span>
<span class="line"><span style="color:#032F62;">started at 20:01:45</span></span>
<span class="line"><span style="color:#032F62;">world</span></span>
<span class="line"><span style="color:#032F62;">hello</span></span>
<span class="line"><span style="color:#032F62;">hello-2</span></span>
<span class="line"><span style="color:#032F62;">world-1</span></span>
<span class="line"><span style="color:#032F62;">finished at 20:01:47</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码的执行顺序较难分辨，建议使用 <code>.gather()</code> 等其他操作来处理：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> asyncio.gather(</span></span>
<span class="line"><span style="color:#24292E;">        say_after(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">), say_after(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#6A737D;"># 输出结果保持顺序。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不要直接 <code>await</code> 一个协程，否则他执行的结果会和同步执行的结果一样。</p><p>也不要 <code>await asyncio.create_task(...) </code></p></div><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h3><p><code>asyncio.wait()</code></p><p>在 asyncio 中，wait() 方法是一个非常重要的方法，它允许我们等待多个协程完成执行。wait() 方法将一组协程对象作为参数传递，并等待它们全部完成。一旦所有协程完成，wait() 方法将返回一个由 <code>(done, pending)</code> 两个集合组成的元组，其中 <code>done</code> 包含已完成的协程，而 <code>pending</code> 包含仍在等待执行的协程。</p><p>下面是一个简单的示例，说明如何使用 wait() 方法等待多个协程的完成：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">done, pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> asyncio.wait(</span></span>
<span class="line"><span style="color:#24292E;">        [say_after(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">), say_after(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> done:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.result())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>wait()</code> 方法将一直等待，直到所有协程完成。如果您需要在一定时间内等待协程完成，可以使用 <code>asyncio.wait_for()</code> 方法。这个方法与 <code>wait()</code> 方法类似，但它会等待一段特定的时间，如果在这段时间内某些协程没有完成，它将引发一个 <code>asyncio.TimeoutError</code> 异常。</p><h3 id="异步资源管理-async-with" tabindex="-1"><a class="header-anchor" href="#异步资源管理-async-with" aria-hidden="true">#</a> 异步资源管理 async with</h3><p>当我们在 Python 的异步编程中使用 <code>async with</code> 语句时，我们可以使用异步上下文管理器来设置和撤销上下文，这与普通的 <code>with</code> 语句类似。异步上下文管理器是一种对象，它定义了 <code>__aenter__()</code> 和 <code>__aexit__()</code> 方法，而不是 <code>__enter__()</code> 和 <code>__exit__()</code> 方法。</p><p>异步上下文管理器可以被用于异步的 <code>with</code> 语句中，以设置和撤销异步上下文。异步上下文管理器的作用是在异步代码块中为执行环境提供必要的支持，以确保上下文的正确性和完整性。</p><p>让我们来看一个例子来理解 <code>async with</code> 语句的用法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyAsyncContextManager</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__aenter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Entering asynchronous context&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__aexit__</span><span style="color:#24292E;">(self, exc_type, exc, tb):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Exiting asynchronous context&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_coroutine</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> MyAsyncContextManager() </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> context:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Inside the asynchronous context&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">asyncio.run(my_coroutine())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如您所看到的，<code>async with</code> 语句可以方便、安全地进入和离开异步上下文。<code>async with</code> 语句保证异步上下文管理器的 <code>__aexit__()</code> 方法始终会被调用，即使在 <code>async with</code> 代码块中出现异常。</p>`,31);function d(y,u){const n=l("ExternalLinkIcon");return e(),o("div",null,[s("p",null,[s("a",r,[p(n)])]),i])}const b=a(t,[["render",d],["__file","笔记asyncio.html.vue"]]);export{b as default};
