import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as r,a as s,b as n,d as e,f as a}from"./app-80ce1db6.js";const c="/assets/img/python_advanced/image-20220501231612523.png",i="/assets/img/python_advanced/image-20220502223043200.png",y="/assets/img/python_advanced/image-20220508202011032.png",d="/assets/img/python_advanced/image-20220509115636161.png",m={},u=a('<blockquote><p>本文章以 《python 高性能编程》一书为基础，对 python 编程下代码性能优化进行梳理。</p></blockquote><h2 id="最重要的笔记" tabindex="-1"><a class="header-anchor" href="#最重要的笔记" aria-hidden="true">#</a> 最重要的笔记</h2><p><strong>永远不要把某些优化技术一直当做信条。程序运行效率可能会因为不同原因改变，如 CPU 架构、内存缓存层级、指令流水等。对代码的剖析一定要落实到真实的生产数据！最后，不要迷失在这个极客工具里，确认你交付了相关的问题。</strong></p><p>python 代码的优化方向与思路总结：</p><p><strong>性能诊断：</strong> 确定各部分代码的效率，包括速度、内存等，以选择优化方向。常用工具：<code>line-profile</code>, <code>monory_profiler</code>, <code>dis</code>, <code>/usr/bin/time</code> 等。</p><p><strong>利用 Python 的丰富生态系统：</strong> 这也是最重要的一步！如果别人写的某些库已经能够很好的解决你的问题，那么没必要浪费更多的时间。如果他们的库不能达到性能要求，那也可以考虑基于他们的代码进行改进。</p><ul><li><strong>算法与数据结构层面优化：</strong></li></ul><ol><li><strong>算法：</strong> 多刷力扣。</li><li><strong>数据结构：</strong> 采用合适的数据结构，关注数据结构实现细节。如对于 hash 表，可以考虑采用不同的 hash 函数以减少 hash collapse 的概率。</li></ol><ul><li><strong>矢量计算：</strong> 例如矩阵计算，使用 numpy 等进行矢量计算可以提高效率。</li></ul><ol><li><strong>考虑通过 <code>numexpr</code> 优化 numpy：</strong> <code>numexpr</code> 很多优化都和缓存有关，是否采用他取决于你的缓存和你的矩阵大小。</li><li><strong>提高硬件配置：</strong> 程序效率受计算、数据传输两方面影响。计算效率上提供 CPU、传输效率上提高 RAM 以及缓存。</li></ol><ul><li><strong>并行计算：</strong> 首先考虑已有的并行计算模块，如 <code>multiprocessing</code> 等</li></ul><ol><li><strong>进程间通信：</strong> 考虑使用 queue 或其他队列库等来实现进程间通信。进程间通信不一定能提高代码效率。</li><li><strong>数据共享：</strong> Redis、Multiprocessing 中的 Value、Array、RawArray 等都可以提供共享。共享时候需考虑给数据上锁以避免数据丢失。</li></ol><ul><li><strong>编译成 C：</strong> 可能直到 python 的 JIT（及时编译器）技术成熟之前，Cython 都是最好的选择。本书主要以 Cython 为例讲解</li></ul><ol><li><strong>变量类型优化、更换 python 函数为 Cython 函数：</strong> 使用 Cython 语法给变量进行类型定义，或者为函数输入输出进行类型定义。主要是为了减少 c 变量转化为 python 变量时的损耗。</li><li><strong>取消 Cython 保护性检查</strong> ：取消如除 0 检查、列表边界检查等条件。但这个并不是一直能提高效率的。</li><li>还有其他如： <strong>采用并行计算</strong> 等。</li></ol><ul><li><strong>字节码层面的优化：</strong></li></ul><ol><li>*优化命名空间的搜索： <strong>包括优化导入包方式，优化变量引用方式（<code>import math</code> + <code>math.sin()</code> 慢与 <code>import math.sin</code> + <code>sin()</code>慢于<code>sin=math.sin</code>+<code>sin()</code>）</strong></li><li>减少内存分配次数：**移除掉没必要的变量赋值，不仅可以减少字节码。还能够较少内存查找、回收、分配等一系列开销。</li></ol><ul><li><strong>集群：</strong> 该书中讨论了 Parallel Python、IPython Parallel 和 NSQ 三种集群化方案。</li></ul><ol><li><strong>工作队列：</strong> 能够给系统带来鲁棒性</li></ol><ul><li><p><strong>使用更少的 RAM：</strong> 考虑牺牲掉一部分精度，使得用较少的 RAM 保存更大的数据。如 Trie、概率计数等。</p></li><li><p><strong>更底层：</strong> BLAS</p></li><li><p><strong>可读性权衡：</strong> python 流行，很大功劳在于他的可读性能为团队带来较高的效率，包括团队沟通、代码维护等等。很多时候需要考虑，这份 <strong>代码的加速是否以牺牲团队效率为代价</strong> 。</p></li></ul><h2 id="计算机底层组件" tabindex="-1"><a class="header-anchor" href="#计算机底层组件" aria-hidden="true">#</a> 计算机底层组件</h2><h4 id="计算单元" tabindex="-1"><a class="header-anchor" href="#计算单元" aria-hidden="true">#</a> 计算单元</h4><p>如 CPU/GPU，由每个周期能进行的操作数量以及每秒能完成多少个周期。第一个属性通过每周期完成的指令数（IPC） 来衡量，而第二个属性则是通过其时钟速度衡量。（目前受晶体管物理限制而停滞）</p><p>矢量计算是指一次提供多个数据给一个 CPU 并能同时被操作。这种类型的 CPU 指令被称为 SIMD（单指令多数据），联系一下矩阵计算。</p><p>阿姆达尔定律认为如果一个可以运行在多核上的程序有某些执行路径必须运行在单核上，那么这些路径就会成为瓶颈导致最终速度无法通过增加更 多核心来提高。</p><h4 id="储存单元" tabindex="-1"><a class="header-anchor" href="#储存单元" aria-hidden="true">#</a> 储存单元</h4><p>储存单元包括了寄存器、RAM、硬盘。读写数据的速度与读写方式相关（顺序读取 VS 随机读取）</p><ul><li>硬盘：关机也能长期储存、读写慢，随机访问性能下降但容量高。</li><li>RAM：用于保存应用程序的代码和数据（比如用到的各种变量）</li><li>L1/L2 缓存：极快的读写速度。进入 CPU 的数据必须经过这里。很小的容量（KB 级别）。</li></ul><p>异步 I/O 和缓存预取等技术还提供了很多方法来确保数据在被需要时就已经存在于对应的地方而不需要浪费额外的计算时间</p><h4 id="通信层" tabindex="-1"><a class="header-anchor" href="#通信层" aria-hidden="true">#</a> 通信层</h4><p>使用 GPU 的不利之处很多都来自它所连接的总线：因为 GPU 通常是一个外部设备，它通过 PCI 总线通信，速度远远慢于前端总线。</p><p>异质架构使得 GPU 能够被使用在需要传输大量数据的计算上</p><ul><li>总线速度=总线贷款（一次传输数据量）+总线频率（每秒传输次数）</li></ul><p>高的总线带宽有助于矢量化的代码（或任何顺序读取内存的代码），而另一方面，低带宽高频率有助于那些经常随机读取内存的代码。这些属性是由计算机设计者在主板的物理布局上决定的：当芯片之间相距较近时，它们之间的物理链路就较短，就可以允许更高的传输速度。而物理链路的数量则决定了总线的带宽</p><h4 id="为什么-python-慢" tabindex="-1"><a class="header-anchor" href="#为什么-python-慢" aria-hidden="true">#</a> 为什么 python 慢</h4><ul><li><p>Python 对象不再是内存中最优化的布局。因为 Python 是一种垃圾收集语言——内存会被自动分配并在需要时释放。这会导致内存碎片并影响向 CPU 缓存的传输。</p></li><li><p>Python 虚拟机抽象层使得矢量操作变得不是直接可用</p></li><li><p>Python 的动态类型让代码难以优化，并且 Python 并不是一门编译性的语言。（如 C）当编译静态代码时，编译器可以做很多的事情来改变对象的内存布局以及让 CPU 运行某些指令来优化它们。</p></li><li><p>对于 Python 来说，充分利用多核性能的阻碍主要在于 Python 的 全局解释器 锁 （GIL）。GIL 确保 Python 进程一次仅有一个核心可以被使用，无论当前有多少个核心。该问题可以通过 multiprocessing（多进程）、Cython、numexpr、分布式计算模型等避免。</p></li></ul><h4 id="为什么使用-python" tabindex="-1"><a class="header-anchor" href="#为什么使用-python" aria-hidden="true">#</a> 为什么使用 python</h4><p>python 易上手、且有大量稳定的库，如 numpy, sklearn, pytorch, pyspark 等。系统通常要在性能与可维护性上取舍，Cython 将 Python 代码注释成类似 C 语言的类型，被转化后的代码可以被一个 C 编译器编译。它在速度上的提升令人惊叹（相对较少的努力就能获得 C 语言的速度），但后续代码的维护成本也会上升。</p><h2 id="python-性能瓶颈分析" tabindex="-1"><a class="header-anchor" href="#python-性能瓶颈分析" aria-hidden="true">#</a> Python 性能瓶颈分析</h2><blockquote><p>性能分析为程序优化提供了方向。能够节省我们的时间消耗。</p></blockquote><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p><strong>如何找到代码中速度和 RAM 的瓶颈？</strong></p><ul><li>对于整个代码，可以使用 python 自带的 time 模块计时，更好的办法是采用 <code>/usr/bin/time -p python file.py</code> 来对整体运行速度进行判断；对于内部函数，可以使用 <code>cProfile</code> 查看函数开销，或使用 <code>line-profile</code> 逐行诊断；对于内存，可以使用 <code>memory_profiler</code></li></ul><p><strong>如何分析 CPU 和内存使用情况？</strong></p><ul><li>如 Ubuntu 系统中可以直接使用资源查看器</li></ul><p><strong>我应该分析到什么深度？</strong></p><ul><li>考虑使用 dis 来对字节码分析，直接了解到函数底层的运作。</li></ul><p><strong>如何分析一个长期运行的应用程序？</strong></p><ul><li>考虑 dowser 和 dozer（书中提到的，并没有细看）</li></ul><p><strong>在 CPython 台面下发生了什么？</strong></p>',49),h={href:"https://zhuanlan.zhihu.com/p/88048361",target:"_blank",rel:"noopener noreferrer"},g=a(`<p><strong>如何在调整性能的同时确保功能的正确？</strong></p><ul><li>不要抛弃单元测试，可以加入函数来动态调整 <code>@profile</code> 的效果；不要吝啬使用文本保存需要验证的中间值。</li></ul><h3 id="部分笔记" tabindex="-1"><a class="header-anchor" href="#部分笔记" aria-hidden="true">#</a> 部分笔记</h3><p>《python 高性能编程》一书中采用了 julia 集合的案例。以下提到的 <code>julia.py</code> 文件就是一个普通需要被测试性能的代码。（julia 集合很有趣，可以考虑复现以下书中成果）</p><h4 id="函数性能分析" tabindex="-1"><a class="header-anchor" href="#函数性能分析" aria-hidden="true">#</a> 函数性能分析</h4><p>可以考虑用 python 自带的 time 和装饰器判断函数开销，但这种方式很简单，能得到的信息也很有限。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> functools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> wraps</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timefn</span><span style="color:#24292E;">(fn):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@wraps</span><span style="color:#24292E;">(fn)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">measure_time</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        t1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        t2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@timefn:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> fn.</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; took &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(t2 </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> t1) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; seconds&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> measure_time</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>代码整体运行速度</strong></p><p>使用 timeit 来计算时间消耗。默认循环（n）10 次，重复(r)5 次。 <strong>timeit 暂时禁用了垃圾收集器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">timeit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;import julia1&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">&quot;julia1.calc_pure_python(desired_width=1000,</span></span>
<span class="line"><span style="color:#6F42C1;">max_iterations=300)&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过 UNIX 中的 <code>/usr/bin/time</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">/usr/bin/time</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">julia1_nopil.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">/usr/bin/time</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--verbose</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">julia1_nopil.py</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：该方案考虑到 python 脚本的启动时间，更适合用来测量。</strong></p><h4 id="代码性能诊断工具" tabindex="-1"><a class="header-anchor" href="#代码性能诊断工具" aria-hidden="true">#</a> 代码性能诊断工具</h4><p><strong>cProfile</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cProfile</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cumulative</span><span style="color:#24292E;"> </span><span style="color:#032F62;">julia1_nopil.py</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>采用 <code>-s cumulative</code> 来对每个函数累计花费时间进行排序。输出信息中包括函数调用总次数、pre-call 时间、函数名等</p><p>可以使用 <code>pstats</code> 库进行分析，首先生成函数分析文件：<code>python -m cProfile -o profile.stats julia1.py</code>。而后通过 python 分析数据：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pstats</span></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pstats.Stats(</span><span style="color:#032F62;">&quot;profile.stats&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">p.sort_stats(</span><span style="color:#032F62;">&quot;cumulative&quot;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 累计时间排序</span></span>
<span class="line"><span style="color:#24292E;">p.print_stats()</span></span>
<span class="line"><span style="color:#24292E;">p.print_callers()  </span><span style="color:#6A737D;"># 查看最耗时函数</span></span>
<span class="line"><span style="color:#24292E;">p.print_callees()  </span><span style="color:#6A737D;"># 显示函数相互调用情况</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 <code>runsnake</code> 对 <code>profile.state</code> 进行可视化分析（但似乎只支持 Python2）</p><p><strong>line-profile</strong></p><p><code>line-profile</code> 可以对函数进行逐行分析，包括每行调用次数、时间等。首先安装 <code>pip install line_profiler </code>，用 <code>@profile</code> 装饰器标记需要分析的函数，不需要导入任何的依赖。最后通过终端运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">kernprof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">julia1_lineprofiler.py</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-l:选项通知 kernprof 注入@profile 装饰器到你的脚步的内建函数， -v:选项通知 kernprof 在脚本执行完毕的时候显示计时信息。</p><p>对每一行进行分析往往是不够的，如对于判断语句 <code>if func1 and func2:</code> ，我们可能希望对行内的每一部分进行分析以及优化。</p><p><strong>memory_profiler</strong></p><p>对内存进行分析，安装：<code>pip install memory_profiler</code>；执行：<code>python -m memory_profiler julia.py</code>，同 <code>line-profile</code> 一样的，需要使用<code>@profile</code> 标记被分析函数。</p><p>内存分析很慢（通常需要花上原代码 10 倍+的运行时间）通过 memory_profiler 可以观察到 Julia 集案例中，使用 <code>range()</code> 占用了非常大的 RAM，对于 python2 建议使用 <code>xrange()</code>。python3 中将 <code>xrange()</code> 取消并合并为 r<code>range()</code></p><p><strong>dis Python 字节码反汇编器</strong></p><p>用 dis 模块检查 CPython 字节码，dis 模块可用于了解函数内部发生了什么<a href="">Python 中文官方文档</a>https://docs.python.org/zh-cn/3/library/dis.html。以下 5 列输出结果分别表示：代码所在行数、指向其他代码的跳转点、操作名和地址、操作的参数、原始参数名。 <strong>最后一列为笔者个人备注。</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dis</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> julia</span></span>
<span class="line"><span style="color:#24292E;">dis.dis(julia.func1)</span></span>
<span class="line"><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#032F62;">部分输出：</span></span>
<span class="line"><span style="color:#032F62;"> 26           0 LOAD_GLOBAL              0 (complex)  # 搜索名词空间，找到 complex 函数并加载到栈</span></span>
<span class="line"><span style="color:#032F62;">              2 LOAD_GLOBAL              1 (c_real)   # </span></span>
<span class="line"><span style="color:#032F62;">              4 LOAD_GLOBAL              2 (c_imag)</span></span>
<span class="line"><span style="color:#032F62;">              6 CALL_FUNCTION            2</span></span>
<span class="line"><span style="color:#032F62;">              8 STORE_FAST               3 (c)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;"> 27          10 LOAD_GLOBAL              3 (range)</span></span>
<span class="line"><span style="color:#032F62;">             12 LOAD_GLOBAL              4 (len)    </span></span>
<span class="line"><span style="color:#032F62;">         &gt;&gt;   38 FOR_ITER                68 (to 108)  # 跳转点（&gt;&gt;）匹配 JUMP_ABSOLUTE 以及</span></span>
<span class="line"><span style="color:#032F62;">         &gt;&gt;  108 JUMP_ABSOLUTE           22           # POP_JUMP_IF_FALSE 等指令</span></span>
<span class="line"><span style="color:#032F62;">&#39;&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如对于以下两个函数分析：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn_expressive</span><span style="color:#24292E;">(upper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(upper):</span></span>
<span class="line"><span style="color:#24292E;">        total </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> n</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> total</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn_terse</span><span style="color:#24292E;">(upper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(upper))</span></span>
<span class="line"><span style="color:#24292E;">dis.dis(fn_expressive)</span></span>
<span class="line"><span style="color:#24292E;">dis.dis(fn_terse)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fn_expressive</code> 的字节码是<code>fn_terse</code> 的两倍，字节码越多开销自然越大。<code>sum()</code> 由 C 编写，可以跳过循环中创建 python 对象的步骤。</p><h4 id="进行单元测试" tabindex="-1"><a class="header-anchor" href="#进行单元测试" aria-hidden="true">#</a> 进行单元测试</h4><p>如上节中提到，可以使用 <code>@profile</code> 来标记需要测试性能的函数，但如果我们要运行文件时有需要把 <code>@profile</code> 去掉，否则会出现 <code>NameError</code>，很麻烦。可以考虑加入以下函数来动态调整 <code>@profile</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;line_profiler&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dir</span><span style="color:#24292E;">():  </span><span style="color:#6A737D;"># python3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">profile</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inner</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inner</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外在因素" tabindex="-1"><a class="header-anchor" href="#外在因素" aria-hidden="true">#</a> 外在因素</h4><p>检查电脑是否处于节电模式，是否插入电源等；关闭其他运行软件或进程；重启并重跑第二次实验。 进行单元测试时候，不要吝啬将输出储存到一个文本文件中，而后用<code>diff</code>进行对比；比如浮点数取整或舍入等问题。</p><h2 id="列表和元组" tabindex="-1"><a class="header-anchor" href="#列表和元组" aria-hidden="true">#</a> 列表和元组</h2><h3 id="小结-1" tabindex="-1"><a class="header-anchor" href="#小结-1" aria-hidden="true">#</a> 小结</h3><p><strong>查询列表/元组的复杂度是什么？</strong></p><ul><li>均为 O(1)，Python 内建排序使用了 Tim 排序，其运用了多种排序算法，根据给定数据进行选择，以达到最优化。</li></ul><p><strong>列表和元组的区别是什么？</strong></p><ul><li>主要为动态静态之分，由于部分元组不会频繁地被内存释放机制回收，而是预留下了空间供其他程序使用，因此初始话列表比初始化元组慢 5 倍！</li></ul><p><strong>向列表添加新项目是如何实现的？</strong></p>`,46),v=s("ul",null,[s("li",null,[n("列表使用了动态数组，分配公式为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"M"),s("mo",null,"="),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",null,">"),s("mo",null,">"),s("mn",null,"3"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",null,"<"),s("mn",null,"9"),s("mo",{stretchy:"false"},"?"),s("mn",null,"3"),s("mo",null,":"),s("mn",null,"6"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"M = (N >> 3) + (N < 9 ? 3 : 6)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">>"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"<"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"9"),s("span",{class:"mclose"},"?"),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},":"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"6"),s("span",{class:"mclose"},")")])])]),n("，即当元素个数大于 M 中的阀值时，列表将会自动申请一个更大的空间，而后将数据移动到新空间上。因此当列表越长时，其浪费的空间也就越大（列表中有太多位置是空的、待填充的）。列表的 append 开销是很大的，可以通过为列表预分配内存等来优化速度。")])],-1),b=a(`<h2 id="字典和集合" tabindex="-1"><a class="header-anchor" href="#字典和集合" aria-hidden="true">#</a> 字典和集合</h2><h3 id="小结-2" tabindex="-1"><a class="header-anchor" href="#小结-2" aria-hidden="true">#</a> 小结</h3><p><strong>字典和集合的共同点是什么？</strong></p><ul><li>字典与集合都采用散列表。散列函数对键的使用方式极大影响了数据结构的性能</li></ul><p><strong>字典的开销在哪里？</strong></p><p>字典最基本的功能为键值查询：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Cpthon 中字典查询的近似伪代码</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index_sequence</span><span style="color:#24292E;">(key, mask</span><span style="color:#D73A49;">=0b</span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, PERTURB_SHIFT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    perturb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">(key) </span><span style="color:#6A737D;">#X</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> perturb </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> mask</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> i</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((i </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> perturb </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 此处公式并不重要，仅表示一个线性转换</span></span>
<span class="line"><span style="color:#24292E;">        perturb </span><span style="color:#D73A49;">&gt;&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PERTURB_SHIFT</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> mask</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上为字典散列（HASH）函数的近似伪代码。可以看出大部分开销由解决碰撞产生。因此，让散列值均匀分布（熵最大化）可以提高性能。</p><p>自定义类默认的 <code>__hash__</code> 和 <code>__cmp__</code> 比较的是对象在内存中的位置，因此会出现类中以下情况：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, x, y):</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.x, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x, y</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Point(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Point(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">Point(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">set</span><span style="color:#24292E;">([p1, p2])  </span><span style="color:#6A737D;"># False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方案是重写 <code>__hash__</code> 与 <code>__eq__</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, x, y):</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.x, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x, y</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__hash__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">((</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.x, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.y))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__eq__</span><span style="color:#24292E;">(self, other):</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> other.x </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.y </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> other.y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典与集合默认大小为 8，每次改变大小时，桶的个数增加到原来的 4 倍，直至达到 50000 个元素，之后每次增加到原来的 2 倍。</p><p><strong>我如何优化字典的性能？</strong></p><ul><li>提前知道字典大小或者散列值范围，可以通过修改散列函数 <code>def __hash__(self)</code>来优化性能。</li></ul><blockquote><p>为了找到大小为 N 的字典的掩码，我们首先找到能令该字典保持三分之二满的最低桶数（ N * 5 / 3 ），然后找到能满足这个数字的最小字典大小（8; 32; 128; 512; 2048; 等等）并找到足以保存这一数字的 bit 的位数。比如，如果 N=1039 ，那么我们至少需要 1731 个桶，这意味着我们的字典有 2048 个桶。那么掩码就是 bin(2048 - 1) = 0b11111111111 。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 最优双字母散列函数（如果键值仅由双字幕组成）</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">twoletter_hash</span><span style="color:#24292E;">(key):</span></span>
<span class="line"><span style="color:#24292E;">    offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    k1, k2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(k2) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> offset) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">ord</span><span style="color:#24292E;">(k1) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> offset)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Python 如何使用字典记录命名空间？</strong></p><p>Python 查找 <code>locals()</code> 数组，其内保存了所有本地变量的条目。Python 花了很多精力优化本地变量查询的速度，而这也是整条链上唯一一个不需要字典查询的部分。如果它不在本地变量里，那么会搜索 <code>globals()</code> 字典。最后，如果对象也不在那里，则搜索<code>__builtin__</code> 对象。要注意 <code>locals()</code> 和 <code>globals()</code> 是显式的字典而<code>__builtin__</code>则是模块对象，在搜索<code>__builtin__</code>中的一个属性时，我们其实是在搜索它的 <code>locals()</code>字典（对所有的模块对象和类对象都是如此！）。</p><p>通过以下操作，我们便知道如何通过修改引用变量的方式，来提高效率：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> math</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> math </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sin</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(x):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">%timeit test1(123456)</span></span>
<span class="line"><span style="color:#032F62;">    1000000 loops, best of 3: 381 ns per loop</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> math.sin(x)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">(x):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">%timeit test2(123456)</span></span>
<span class="line"><span style="color:#032F62;">    1000000 loops, best of 3: 311 ns per loop</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sin(x)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test3</span><span style="color:#24292E;">(x, sin</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">math.sin):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#D73A49;">&gt;&gt;&gt; </span><span style="color:#032F62;">%timeit test3(123456)</span></span>
<span class="line"><span style="color:#032F62;">    1000000 loops, best of 3: 306 ns per loop</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sin(x)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于以上函数，可以用 <code>dis</code> 查看字节码，发现 <code>test1</code> 比另外两者多了一步 <code>LOAD_GLOBAL (math)</code> 即对 math 模块的引入。此外 <code>test3</code> 中使用本地变量保存了 <code>sin</code> 函数，因此无需进行额外的字典查询，这样的字典查询被大量调用时会降低性能，一个有趣的例子便是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test3</span><span style="color:#24292E;">(iterations</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    local_sin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sin</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(iterations):</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> local_sin(i)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 直接使用 result += sin(i) 会慢 8% </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迭代器和生成器" tabindex="-1"><a class="header-anchor" href="#迭代器和生成器" aria-hidden="true">#</a> 迭代器和生成器</h2><h3 id="小结-3" tabindex="-1"><a class="header-anchor" href="#小结-3" aria-hidden="true">#</a> 小结</h3><p><strong>生成器是怎样节约内存的？</strong></p><p>生成器的一个特点是使用 <code>yield</code> 返回值，当函数结束时，一个 <code>StopIteration</code> 异常会被跑出来终止函数。</p><p><strong>使用生成器的最佳时机是什么？</strong></p><p>对大数据进行分析，内存不足以一次分析全部信息的时候。</p><p><strong>我如何使用 itertools 来创建复杂的生成器工作流？</strong></p><p><code>itertools</code> 中常用的函数：</p><ul><li><code>islice(fun(),beg,end)</code> 对一个无穷生成器进行切片</li><li><code>chain()</code> 将多个生成器链接在一起</li><li><code>takewhile()</code> 给生成器添加终止条件</li><li><code>cycle()</code> 不断重复有穷生产器，使其变为无穷</li></ul><p>更多查看<a href="">官方文档</a>。</p><p><strong>延迟估值何时有益，何时无益？</strong></p><p>延迟估值：仅当生成器被调用时才回去读取下一组数据，如果出现了一个提前终止的条件，那么就可以 大幅降低整体的运行时间。</p><p>对于生成器，很多时候都智能访问当前的值，而无法访问数列中其他的元素，导致原生成器难用。</p><h2 id="矩阵和矢量计算" tabindex="-1"><a class="header-anchor" href="#矩阵和矢量计算" aria-hidden="true">#</a> 矩阵和矢量计算</h2><blockquote><p>该节突出了代码优化的两个核心思想：矢量计算和减少内存分配。</p><p>矢量操作（比如两个数组相乘）和非矢量操作使用的是不同的 CPU 计算单元和指令集。为了让 Python 能够使用这些特殊指令，我们必须有一个模块专门用来使用这些指令集，如 numpy。</p></blockquote><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><p>本节以热传导为例子。u 表示扩散质量的矢量</p>`,40),E=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mi",{mathvariant:"normal"},"∂"),s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("mi",null,"t")])]),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"D"),s("mfrac",null,[s("msup",null,[s("mi",{mathvariant:"normal"},"∂"),s("mn",null,"2")]),s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("msup",null,[s("mi",null,"x"),s("mn",null,"2")])])]),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"}),s("mfrac",null,[s("mi",{mathvariant:"normal"},"∂"),s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("mi",null,"t")])]),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mfrac",null,[s("mrow",null,[s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"d"),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")")]),s("mrow",null,[s("mi",{mathvariant:"normal"},"d"),s("mi",null,"t")])]),s("mspace",{linebreak:"newline"}),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"d"),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"d"),s("mi",null,"t"),s("mo",null,"∗"),s("msup",null,[s("mi",null,"D"),s("mo",{lspace:"0em",rspace:"0em"},"∗")]),s("mfrac",null,[s("mrow",null,[s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",null,"+"),s("mi",{mathvariant:"normal"},"d"),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",null,"−"),s("mi",{mathvariant:"normal"},"d"),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"−"),s("mn",null,"2"),s("mo",null,"⋅"),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")")]),s("mrow",null,[s("mi",{mathvariant:"normal"},"d"),s("msup",null,[s("mi",null,"x"),s("mn",null,"2")])])])]),s("annotation",{encoding:"application/x-tex"}," \\frac{\\partial}{\\partial t} u(x, t)=D \\frac{\\partial^{2}}{\\partial x^{2}} u(x, t)\\\\ \\frac{\\partial}{\\partial t} u(x, t)=\\frac{u(x, t+\\mathrm{d} t)+u(x, t)}{\\mathrm{d} t}\\\\ u(x, t+\\mathrm{d} t)=u(x, t)+\\mathrm{d} t * D^{*} \\frac{u(x+\\mathrm{d} x, t)+u(x-\\mathrm{d} x, t)-2 \\cdot u(x, t)}{\\mathrm{d} x^{2}} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord mathnormal"},"t")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.1771em","vertical-align":"-0.686em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.4911em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7401em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord mathnormal"},"t")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.113em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.427em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"d"),s("span",{class:"mord mathnormal"},"t")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathrm"},"d"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathrm"},"d"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathrm"},"d"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.113em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7387em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"∗")])])])])])])])]),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.427em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"d"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7401em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathrm"},"d"),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathrm"},"d"),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),C=a(`<p>根据以上公式，我们可以给出一阶扩散方程的伪代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Create the initial conditions</span></span>
<span class="line"><span style="color:#24292E;">u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vector of length N</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(N):</span></span>
<span class="line"><span style="color:#24292E;">	u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> there </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> water, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> there </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> dye</span></span>
<span class="line"><span style="color:#6A737D;"># Evolve the initial conditions</span></span>
<span class="line"><span style="color:#24292E;">D </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">dt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0001</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Current time is: </span><span style="color:#005CC5;">%f</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> t</span></span>
<span class="line"><span style="color:#24292E;">    unew </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vector of size N</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Update step for every cell</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(N):</span></span>
<span class="line"><span style="color:#24292E;">    	unew[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> u[i] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> D </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> dt </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (u[(i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">N] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> u[(i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">N] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> u[i])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Move the updated solution into u</span></span>
<span class="line"><span style="color:#24292E;">    u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> unew</span></span>
<span class="line"><span style="color:#24292E;">    visualize(u)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于二阶扩散方程，有：</p>`,3),f=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mfrac",null,[s("mi",{mathvariant:"normal"},"∂"),s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("mi",null,"t")])]),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"D"),s("mo",null,"⋅"),s("mrow",null,[s("mo",{fence:"true"},"("),s("mfrac",null,[s("msup",null,[s("mi",{mathvariant:"normal"},"∂"),s("mn",null,"2")]),s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("msup",null,[s("mi",null,"x"),s("mn",null,"2")])])]),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mfrac",null,[s("msup",null,[s("mi",{mathvariant:"normal"},"∂"),s("mn",null,"2")]),s("mrow",null,[s("mi",{mathvariant:"normal"},"∂"),s("msup",null,[s("mi",null,"y"),s("mn",null,"2")])])]),s("mi",null,"u"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",{separator:"true"},","),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mo",{fence:"true"},")")])]),s("annotation",{encoding:"application/x-tex"}," \\frac{\\partial}{\\partial t} u(x, y, t)=D \\cdot\\left(\\frac{\\partial^{2}}{\\partial x^{2}} u(x, y, t)+\\frac{\\partial^{2}}{\\partial y^{2}} u(x, y, t)\\right) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0574em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3714em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord mathnormal"},"t")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.4411em","vertical-align":"-0.95em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},"(")]),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.4911em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7401em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.4911em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7401em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},[s("span",{class:"mord",style:{"margin-right":"0.05556em"}},"∂"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8804em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal"},"u"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mclose delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},")")])])])])])])],-1),_=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 计算 2 阶差分算法</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(N):</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(M):</span></span>
<span class="line"><span style="color:#24292E;">        unew[i][j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> u[i][j] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dt </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    \\</span></span>
<span class="line"><span style="color:#24292E;">            (u[(i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">N][j] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> u[(i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">N][j] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> u[i][j]) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> \\ </span><span style="color:#B31D28;font-style:italic;"># d^2 u / dx^2</span></span>
<span class="line"><span style="color:#24292E;">            (u[i][(j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">M] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> u[j][(j</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">M] </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> u[i][j]) \\ </span><span style="color:#B31D28;font-style:italic;"># d^2 u / dy^2</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩散方程也被称为热方程。此时， u 表示一个区域的温度而 D 描述了材料的热传导能力。解开方程可以告诉我们热如何传导。这样，我们就能够了解 CPU 产生的热量如何扩散到散热片上而不是水中染料的扩散。</p></blockquote><p>更多关于扩散方程请百度。</p><p>这边的案例中对上述热扩散计算进行了多次优化，包括</p><ul><li><strong>矢量运算代替 python 原生 for 循环。</strong> 原生 Python 并不支持矢量操作。这有两个原因： Python 列表存储的是指向实际数据的指针，且 Python 字节码并没有针对矢量操作进行优化，所以 for 循环无法预测何时使用矢量操作能带来好处。</li><li><strong>减少计算二阶差分时候额外分配的内存</strong> ，如额外的中间变量赋值等。</li><li><strong>通过 <code>numexpr</code> 优化 numpy 运算。</strong> numexpr 引入的大多数额外的机制都跟缓存相关。当我们的矩阵较小且计算所需的所有数据都能被放入缓存时，这些额外的机制只是白白增加了更多的指令而不能对性能有所帮助。另外，将字符串编译成矢量操作也会有很大的开销。当程序运行的整体时间较少时，这个开销就会变得相当引人注意。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> numexpr </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> evaluate</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">evolve</span><span style="color:#24292E;">(grid, dt, next_grid, D</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    laplacian(grid, next_grid)</span></span>
<span class="line"><span style="color:#24292E;">    evaluate(</span><span style="color:#032F62;">&quot;next_grid*D*dt+grid&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">out</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">next_grid)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">evolve2</span><span style="color:#24292E;">(grid, dt, next_grid, D</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    laplacian(grid, next_grid)</span></span>
<span class="line"><span style="color:#24292E;">    next_grid </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> D </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> dt</span></span>
<span class="line"><span style="color:#24292E;">    next_grid </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> grid</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上例子为 <code>numexpr</code>优化，当 grid 维度越大， <code>evolve</code> 的优化效果越明显，相反的维度的时候，可能会有性能损失。而这一阀值由电脑的缓存决定，如 20480KB 的缓存，其阀值约为 20480KB/64bit=2560K 个数，大概用 2 个 1131 的矩阵就能填满</p><h3 id="小结-4" tabindex="-1"><a class="header-anchor" href="#小结-4" aria-hidden="true">#</a> 小结</h3><p><strong>cache-miss 和 page-faults 是什么？</strong></p><blockquote><p>这个在正确的时候将正确的数据传输给 CPU 的问题被称为“冯诺伊曼瓶颈”。</p></blockquote><ul><li><p><strong>缓存失效 cache-miss：</strong> 为了支持 CPU 运算，我们必须从 RAM 中预取数据并将其保存在一个更小但更快的 CPU 缓存中，并希望当 CPU 需要某个数据时，它可以从中更快读取到。如果我们的缓存中还没有数据并需要从 RAM 获取，缓存失效 cache-miss 便发生了。</p></li><li><p><strong>page-fault 页面丢失：</strong> 是现代 UNIX 内存分配机制的一部分。分配内存时，内核除了告诉程序一个内存的引用地址以外没做任何事。但是，之后在这块内存第一次被使用时，操作系统会抛出一个缺页小中断，这将暂停程序的运行并正确分配内存。这被称为延迟分配系统。虽然这种手段相比以前的内存分配系统是一个很大的优化，缺页小中断本身依然是一个相当昂贵的操作，因为大多数操作都发生在你的程序外部。另外还有一种缺页大中断，发生于当你的程序需要从设备（磁盘、网络等）上请求还未被读取的数据时。这些操作更加昂贵，因为他们不仅中断了你的程序，还需要读取数据所在的设备。这种缺页不总是影响 CPU 密集的工作，但是，它会给任何需要读写磁盘或网络的程序带来痛苦</p></li></ul><p><strong>矢量计算的瓶颈在哪里？</strong></p><ul><li><strong>数据传输速度</strong> 是瓶颈。减少瓶颈最好的方法是让代码知道如何分配我们的内存以及如何使用我们的数据进行计算。矢量计算（或者说让 CPU 在同一时间进行多个计算）仅能发生在我们能够将相关数据填满 CPU 缓存的情况下。</li></ul><p><strong>我可以用什么工具查看 CPU 进行计算时的效率？</strong></p><p>使用 Linux 的 <code>pref</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">perf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cycles,stalled-cycles-frontend,stalled-cycles-backend,instructions,</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">cache-references,cache-misses,branches,branch-misses,task-clock,faults,</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">minor-faults,cs,migrations </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diffusion_python_memory.py</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详细查看《python 高性能变成 6.3.1》如果你想要一个在 CPU 层面各种性能指标更彻底的解释，请参考 Gurpur M. Prabhu 的“计算机架构导论”</p><p>其中的 <strong>page-fault, cache-miss</strong> 等指标都能很好的说明我们要优化的方向</p><p><strong>numpy 为什么比纯 Python 更适合数值计算？</strong></p><ul><li>在后台有极其优化的 C 代码来专门使用 CPU 的 <strong>矢量操作</strong> 。</li><li>numpy 数组在内存中是 <strong>连续储存</strong> 的底层数字类型</li><li>numpy 也降低了 <strong>缓存失效</strong> 的频率。减少了 <strong>内存分配</strong> 频率。</li></ul><p><strong>我如何追踪代码中的内存分配？</strong></p><ul><li>python 中可以通过 id 查询，减小内存分配可以有效的优化代码速度</li></ul><h2 id="编译成-c" tabindex="-1"><a class="header-anchor" href="#编译成-c" aria-hidden="true">#</a> 编译成 C</h2><figure><img src="`+c+'" alt="相关图片" height="300" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>编译后的代码不可能比精心编写的 C 程序快，但也不可能慢太多。切忌投入 <strong>过多</strong> 精力在这方面上。</p><p><strong>我怎样让我的 Python 代码作为低级代码来运行？</strong></p><ul><li>本节主要以 Cython 为例总结</li></ul><p><strong>JIT 编译器和 AOT 编译器的区别是什么？</strong></p><ul><li>JIT（即使编译）存在冷启动问题，但不需要人工干涉；AOT（提前编译）需要人工的改动更多的代码，但是效率兼容性等更高。</li></ul><p><strong>编译后的 Python 代码运行什么任务能够比本地 Python 快？</strong></p><ul><li>确定变量类型，少让代码保持泛型。python 对象告状了额外的函数，如 <code>__hash__</code>, <code>__str__</code> 等，对于 <strong>CPU 密集型</strong> 的代码区域，不改变变量类型情况下可以做静态编译加快代码。</li></ul><p><strong>为什么类型注解提升了编译后 Python 代码的运行速度？</strong></p><ul><li><p>函数几乎每一行都回调了 Python 虚拟机。因此数值运算也都 回调了 Python 虚拟机，因为我们使用的是高层的 Python 对象。如果没有类型注解，再回调 python 时候，所有的数值对象都需要再转化为 python 对象。</p></li><li><p>Cython 中进行类型注解，数值不需要回调 python 栈，但是也损失了灵活性。</p></li></ul><p><strong>我该怎样使用 C 或 Fortran 为 Python 编写模块？</strong></p><ul><li>Cython 使用了 gcc， shed skin 使用了 g++。</li><li>以之前的 julia 集合为例子，编译模块需要的文件大致为：<code>julia.py</code> <code>cythonfn.pyx </code> <code>setup.py</code></li><li>setup.py 脚本调用 Cython 把.pyx 文件编译成一个编译模块。在类 UNIX 系统上，编译模块可能会是一个.so 文件；在 Windows 上应该是一个.pyd（类 DLL 的 Python 库）。</li></ul><p><strong>我该怎样在 Python 中使用 C 或者 Fortran 的库？</strong></p><ul><li>采用外部函数接口模块，如 Ctypes 等，具体参考书中第 7 章。</li></ul><h3 id="cython" tabindex="-1"><a class="header-anchor" href="#cython" aria-hidden="true">#</a> Cython</h3>',38),A={href:"https://cython.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},D=s("code",null,"pip install Cython",-1),x=a(`<p>》Cython 使用了 gcc， shed skin 使用了 g++。</p><h4 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h4><p>以之前的 julia 集合为例子，编译模块需要的文件大致为：<code>julia.py</code> <code>calculate.pyx </code> <code>setup.py</code></p><p><code>calculate.pyx</code> 中定义需要编译的函数，一般为 CPU 密集型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">calculate_z</span><span style="color:#24292E;">(maxiter, x, y):</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;"># ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(y)):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(x)):</span></span>
<span class="line"><span style="color:#24292E;">            z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">complex</span><span style="color:#24292E;">(x[i],y[j])</span></span>
<span class="line"><span style="color:#24292E;">            n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">abs</span><span style="color:#24292E;">(z) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> maxiter:</span></span>
<span class="line"><span style="color:#24292E;">                z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> z </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c</span></span>
<span class="line"><span style="color:#24292E;">                n </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">            pix[i,j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  (n</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#005CC5;">19</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (n</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;"># ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而后 <code>setup.py</code> 中配置需要编译的文件，并通过 <code>python setup.py build_ext --inplace</code> 来生成 <code>.so/.pxd</code> 文件。<code>setup.py</code> 脚本调用 Cython 把.pyx 文件编译成一个编译模块。在类 UNIX 系统上，编译模块可能会是一个.so 文件；在 Windows 上应该是一个.pyd（类 DLL 的 Python 库）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> setuptools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> setup</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> Cython.Build </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cythonize</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> Cython.Distutils </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> build_ext</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> distutils.extension </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Extension</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">setup(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;julia cal app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">cmdclass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;build_ext&#39;</span><span style="color:#24292E;">: build_ext},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">ext_modules</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [Extension(</span><span style="color:#032F62;">&quot;calculate&quot;</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&quot;calculate.pyx&quot;</span><span style="color:#24292E;">])],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 也可以直接使用：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># ext_modules=cythonize(&quot;calculate.pyx&quot;),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">zip_safe</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后在你的文件 <code>julia.py</code> 中就可以导入 <code>import calculate</code> 并使用其中的函数了。 <strong>这样花费很少的工作量就可以提升越 10%以上的速度性能。</strong></p><h4 id="优化思路分析" tabindex="-1"><a class="header-anchor" href="#优化思路分析" aria-hidden="true">#</a> 优化思路分析</h4><p>通过 <code>cython -a calculate.pyx</code> 来生成 一个 <code>calculate.html</code> 文件，越黄的部分代表越多 python 虚拟机调用，白色为更多的 C 代码执行，因此目的就是尽量转黄为白。</p><p>当然我们也可以使用 <code>line_profile</code></p><figure><img src="`+i+'" alt="相关图片" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>一般最消耗 CPU 时间的代码都在紧凑的循环内、复杂的数学运算或解引用 list、array 等这些项。</p><h4 id="进一步的优化" tabindex="-1"><a class="header-anchor" href="#进一步的优化" aria-hidden="true">#</a> 进一步的优化</h4><p>以上的优化并没有对代码进行较大的改动， <code>calculate_z</code> 函数还是使用 python 来编写的。为了进一步提高 Cython 的运行效率，可以考虑类型注释等方案。</p><p><strong>类型注解等</strong></p>',16),k={href:"https://cython.readthedocs.io/en/latest/src/userguide/language_basics.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://zhuanlan.zhihu.com/p/339599667",target:"_blank",rel:"noopener noreferrer"},P=a(`<blockquote><p>优化方案总结：变量类型优化、更换 python 函数为 Cython 函数、取消 Cython 保护性检查、采用并行计算</p><p>除此外，也可以考虑前几章讨论的优化方向，如减少字节码数量，减少内存分配次数</p></blockquote><ul><li>首先考虑为数添加类型，如整数、复数等：</li></ul><p>声明变量使用 <code>cdef int i</code>，<code>cdef double complex j</code>等；类型包括了常见的 C 语言变量类型。 变量类型转换：<code>b = &lt;double&gt; a</code></p><ul><li>而后考虑对使用的 python 函数进行替换，如 <code>abs()</code> ,<code>complex()</code>等替换为 Cython 版本。</li><li>而后考虑对列表等进行优化，首先是关闭边界检查</li></ul><p>Cython 中默认会保护程序员免于超出边界，因此可以在文件头添加以下代码进行配置，<code>True</code>为开启：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;">#cython: boundscheck=False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用装饰器：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">cimport cython</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@cython.boundscheck</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myfun</span><span style="color:#24292E;">():</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了边界检查外，还有其他的一些可以关闭以提高速度：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">boundscheck</span><span style="color:#24292E;">         </span><span style="color:#6A737D;"># 数组下标越界</span></span>
<span class="line"><span style="color:#6F42C1;">wraparound</span><span style="color:#24292E;">          </span><span style="color:#6A737D;"># 负索引</span></span>
<span class="line"><span style="color:#6F42C1;">cdivision</span><span style="color:#24292E;">           </span><span style="color:#6A737D;"># 除 0 检查</span></span>
<span class="line"><span style="color:#6F42C1;">initializedcheck</span><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 内存视图是否初始化</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而后对列表类型进行定义，如:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(double[:]x):</span></span>
<span class="line"><span style="color:#24292E;">    cdef int[:] y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">...</span><span style="color:#24292E;">.</span><span style="color:#B31D28;font-style:italic;">;</span></span>
<span class="line"><span style="color:#24292E;">    cdef int[:,:] z </span><span style="color:#6A737D;"># 二维数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，若使用 <code>cimport numpy as np</code> 需要在 <code>setup.py</code> 中添加 <code>include_dirs=[np.get_include()]</code></p><ul><li>采用并行计算</li></ul><p><code>.pyx</code> 中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> cython.parallel </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> parallel, prange</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> nogil:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> prange(leny,</span><span style="color:#E36209;">schedule</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;guided&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setup.py</code> 中引入 openmp：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">ext_modules</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[Extension(</span><span style="color:#032F62;">&quot;calculate&quot;</span><span style="color:#24292E;">,[</span><span style="color:#032F62;">&quot;calculate.pyx&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">extra_compile_args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;-fopenmp&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">extra_link_args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;-fopenmp&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>效果记录：Cython 编译纯 python（1.34s），类型转变（0.51s)，替换 python 基础函数如<code>abs()</code> 等（0.32s), 关闭各种检查（0.31s)，对传入的 array 参数进行类型定义（0.18s)。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 结构体定义</span></span>
<span class="line"><span style="color:#24292E;">cdef union Food:</span></span>
<span class="line"><span style="color:#24292E;">    char </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">spam</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">float</span><span style="color:#24292E;"> eggs</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">cdef </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> a_global_variable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> func(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> a, int[:] b):</span></span>
<span class="line"><span style="color:#24292E;">    cdef </span><span style="color:#005CC5;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, j, k</span></span>
<span class="line"><span style="color:#24292E;">    cdef </span><span style="color:#005CC5;">float</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.5</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># cdef float g[4] = [1,2,3,4]  # currently not supported</span></span>
<span class="line"><span style="color:#24292E;">    cdef </span><span style="color:#005CC5;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    cdef </span><span style="color:#005CC5;">float</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">f</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>numpy 代替 list</strong> ：list 中的对象分布再内存的各个位置，而 <code>numpy.array</code> 中的对象储存再连续的内存中。</p><h3 id="其他工具" tabindex="-1"><a class="header-anchor" href="#其他工具" aria-hidden="true">#</a> 其他工具</h3><p>除了 Cython 外，还有 Shed Skin，pypy 等。PyPy 是普适的 CPython 代替工具，提供了几乎所有的内置模块，并且他的效率也挺高（几乎与上一些中经过所有优化环节后的 Cython 速度相当），但是 PyPy 与 C 拓展代码的兼容性不是很好。并且占用内存较大</p><figure><img src="`+y+`" alt="相关图片" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>上图中对比了几种比较古老的编译器，可以看出 Cython 是一个较为好的选择。</p><h3 id="外部函数接口" tabindex="-1"><a class="header-anchor" href="#外部函数接口" aria-hidden="true">#</a> 外部函数接口</h3><p>有时候自动化解决方案不起作用，这时候就需要自己写函数接口。比如用 C 写好接口，然后编译成 <code>.so</code> 的文件共享模块。</p><p>CPython 中最基础的外部函数接口是 Ctypes，此外还有 cffi，f2py</p><h2 id="并发" tabindex="-1"><a class="header-anchor" href="#并发" aria-hidden="true">#</a> 并发</h2><blockquote><p>前一节我们介绍了如何优化 CPU 密集型程序。这节讨论了如何优化 I/O 密集型程序。</p></blockquote><h3 id="小结-5" tabindex="-1"><a class="header-anchor" href="#小结-5" aria-hidden="true">#</a> 小结</h3><p><strong>什么是并发，它如何起帮助作用？</strong></p><p>CPU 并不是不间断的在计算，进程中需要有 IO 读取等其他操作，因此 CPU 暂停计算进入等待（I/O 等待）的时间可以用来计算其他的任务。</p><p><strong>并发和并行的区别是什么？</strong></p><p>并发单 CPU，并行多 CPU。</p><p><strong>什么任务能够用并发来做，什么不能做？什么时候是利用并发的合适时机？</strong></p><p>比如爬虫等需要有 IO 等待的任务，可以对获取数据（如 request）函数采用并发。常见的并发库有 gevent，grequest，tornado， AsyncIO</p><p><strong>并发的各种模式是什么？</strong></p><p>事件循环编程可以分为两种：回调型和 future 型。</p><p>以 下载数据-处理数据-打印处理成功 为例：</p><p>回调型中的异步函数没有返回值，一般处理数据函数内调用打印处理函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save_value</span><span style="color:#24292E;">(value, callback):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Saving </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> to database&quot;</span><span style="color:#24292E;">.format(value))</span></span>
<span class="line"><span style="color:#24292E;">    save_result_to_db(result, callback) </span><span style="color:#6A737D;"># 异步函数</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(db_response):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Response from database: </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(db_response))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>future 型中，异步函数通常有返回值；其中让步函数 yield 会暂定 <code>save_value</code>，直到值准备好了再继续。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@coroutine</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save_value</span><span style="color:#24292E;">(value, callback):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Saving </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;"> to database&quot;</span><span style="color:#24292E;">.format(value)</span></span>
<span class="line"><span style="color:#24292E;">    db_response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> save_result_to_db(result)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Response from database: </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(db_response)	</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="multiprocessing" tabindex="-1"><a class="header-anchor" href="#multiprocessing" aria-hidden="true">#</a> multiprocessing</h2><h4 id="amdahl-定律" tabindex="-1"><a class="header-anchor" href="#amdahl-定律" aria-hidden="true">#</a> Amdahl 定律</h4>`,46),q=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"S"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"a"),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"a"),s("mi",{mathvariant:"normal"},"/"),s("mi",null,"n")])])]),s("annotation",{encoding:"application/x-tex"}," S=\\frac 1 {(1-a)+a/n} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.2574em","vertical-align":"-0.936em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord"},"/"),s("span",{class:"mord mathnormal"},"n")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.936em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),w=a(`<p>其中，a 为并行计算部分所占比例，n 为并行处理结点个数。这样，当 1-a=0 时，(即没有串行，只有并行)最大加速比 s=n；当 a=0 时（即只有串行，没有并行），最小加速比 s=1；当 n→∞时，极限加速比 s→ 1/（1-a），这也就是加速比的上限。例如，若串行代码占整个代码的 25%，则并行处理的总体性能不可能超过 4。这一公式已被学术界所接受，并被称做“阿姆达尔定律”，也称为“安达尔定理”(Amdahl law)。--引用百度百科</p><h3 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1" aria-hidden="true">#</a> 案例</h3><h4 id="预测-pi" tabindex="-1"><a class="header-anchor" href="#预测-pi" aria-hidden="true">#</a> 预测 pi</h4><p>采用蒙特卡洛来预测 pi。我们模拟投掷 n 次飞镖，以一个正方形为靶子。则 pi 可以通过落在正方形内切圆中的飞镖数量和总飞镖数量推算出来。</p><p>python 串行</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate_nbr_points_in_quarter_circle</span><span style="color:#24292E;">(nbr_estimates):</span></span>
<span class="line"><span style="color:#24292E;">	nbr_trials_in_quarter_unit_circle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> step </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#E36209;">xrange</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(nbr_estimates)):</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> random.uniform(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> random.uniform(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        is_in_unit_circle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#24292E;">        nbr_trials_in_quarter_unit_circle </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> is_in_unit_circle</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nbr_trials_in_quarter_unit_circle</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>multiprocessing 多进程</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> multiprocessing.dummy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Pool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate_pi_multiprocessing</span><span style="color:#24292E;">(nbr_estimates):</span></span>
<span class="line"><span style="color:#24292E;">    nbr_parallel_blocks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">    pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pool(</span><span style="color:#E36209;">processes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">nbr_parallel_blocks)</span></span>
<span class="line"><span style="color:#24292E;">    nbr_samples_per_worker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nbr_estimates </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> nbr_parallel_blocks</span></span>
<span class="line"><span style="color:#24292E;">    nbr_trials_per_process </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [nbr_samples_per_worker] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> nbr_parallel_blocks</span></span>
<span class="line"><span style="color:#24292E;">    nbr_in_unit_circles </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.map(estimate_nbr_points_in_quarter_circle, nbr_trials_per_process)</span></span>
<span class="line"><span style="color:#24292E;">    pi_estimate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(nbr_in_unit_circles)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pi_estimate</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多线程（一个进程）测试只需要将上面多进程案例的导入函数更改为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> multiprocessing.dummy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Pool</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>效率对比：</strong> 以上三个版本代码运行速度对比：</p><figure><img src="`+d+`" alt="相关图片" height="300" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>可以注意到多线程的运行效率更差了，因为由“GIL 竞争”所导致的开销实际上让我们的代码运行得更慢了。注意“GIL 竞争”近存在于多核程系统。 <strong>如果没有 GIL 的限制的话，多线程是可以提高速度的，因为所有的 CPU 都会参与到线程的计算当中。</strong></p><p>现实中，还有很多其他的线程、进程模块以及调用方法。</p><h4 id="检查素数" tabindex="-1"><a class="header-anchor" href="#检查素数" aria-hidden="true">#</a> 检查素数</h4><p>最朴素的串行方案：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check_prime</span><span style="color:#24292E;">(n):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">    from_i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    to_i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> math.sqrt(n) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#E36209;">xrange</span><span style="color:#24292E;">(from_i, </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(to_i), </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将检查范围分区，而后通过多进程对每个区域进行检查：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check_prime</span><span style="color:#24292E;">(n, pool, nbr_processes):</span></span>
<span class="line"><span style="color:#24292E;">    from_i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    to_i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(math.sqrt(n)) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    ranges_to_check </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_range(from_i, to_i, nbr_processes)  </span><span style="color:#6A737D;"># 对检查范围分区</span></span>
<span class="line"><span style="color:#24292E;">    ranges_to_check </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zip</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(ranges_to_check) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> [n], ranges_to_check)</span></span>
<span class="line"><span style="color:#24292E;">    results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.map(check_prime_in_range, ranges_to_check)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> results:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但当 <code>n</code> 较小的时候，进程之间的通信消耗将令整个程序运算效率降低，因此可以对以上版本进行改进，根据 <code>n</code> 的大小采取不同的算法。（就和 python 中的排序算法一样）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check_prime</span><span style="color:#24292E;">(n, pool, nbr_processes):</span></span>
<span class="line"><span style="color:#6A737D;"># cheaply check high-probability set of possible factors</span></span>
<span class="line"><span style="color:#24292E;">from_i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">to_i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> check_prime_in_range((n, (from_i, to_i))):</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以添加不同进程间的通讯信号，当一个进程发现非质数时，通知其他进程终止计算。书中使用了 <code>multiprocessing.Manager</code> 的 <code>Value</code> 对象进行进程间共享参数。要注意的是： <strong>通讯的频率设计是值得考虑的。</strong> 或者采用 <code>multiprocessing.RawValue</code></p>`,22),z={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},L=s("p",null,[n("书中认为，最快的共享方式是使用 "),s("code",null,"mmap"),n(" 内存映射（共享内存）。")],-1),M=s("h3",{id:"小结-6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#小结-6","aria-hidden":"true"},"#"),n(" 小结")],-1),U=s("strong",null,"multiprocessing 模块提供了什么？",-1),j={href:"https://docs.python.org/zh-cn/3/library/multiprocessing.html",target:"_blank",rel:"noopener noreferrer"},S=s("p",null,"multiprocessing 封装了进程、池、队列、管理者、ctypes、同步原语等模块。支持单机多核并行计算（多机多核计算我们有更好的选择），提供队列来共享工作，再并行任务之间共享状态，如数据、字典、字节等。",-1),R=s("p",null,[s("strong",null,"进程和线程的区别是什么？")],-1),I={href:"https://www.zhihu.com/question/25532384",target:"_blank",rel:"noopener noreferrer"},N=a(`<p><code>ps -ef|grep python</code> 查看以下案例中的代码运行情况，多线程下会有多个 <code>PPID</code> 以及对应的 <code>PID</code>。而单进程多线程的话，只能查看到一个进程 <code>PID</code>。</p><p><strong>我该如何选择合适大小的进程池？</strong></p><p>一个额外的进程会占用额外的内存，因此需要根据代码的实际情况判断。大多数情况下，进程池的数量不会大于 CPU 的核心数。当进程池数量大于 CPU 核数时，效率的提升将会减少。</p><p><strong>我该如何使用非持久队列来处理工作？</strong></p><p><code>multiprocessing.Queue</code>，考虑采用<code>in</code>,<code>out</code>两个队列进行进程间通信。在每个进程中，我们从 <code>in</code> 队列中获取任务，处理完成后导入到 <code>out</code> 队列中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">manager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> multiprocessing.Manager() </span><span style="color:#6A737D;"># 多线程采用 multiprocess.manager 中的 Queue</span></span>
<span class="line"><span style="color:#24292E;">queue_in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> manager.Queue()</span></span>
<span class="line"><span style="color:#24292E;">queue_out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> manager.Queue()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subprocess</span><span style="color:#24292E;">(queue_in, queue_out):</span></span>
<span class="line"><span style="color:#24292E;">    args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue_in.get()  </span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> task(args)</span></span>
<span class="line"><span style="color:#24292E;">    queue_out.put(args)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>进程间通信的代价和好处是什么？</strong></p><p>进程间通讯是需要开销的，但进程间通讯能够实现更复杂的，更大的任务。如书中验证多个素数案例，进程数量越大，进程间通讯代价越高，导致多进程不如单进程来得快。</p><p><strong>我该如何用多 CPU 来处理 numpy 数据？</strong></p><blockquote><p>多进程可以提高效率，矢量化也可以提高效率。那么这个讨论的就是多进程+矢量化。</p></blockquote><p>备注：多进程中的随机数要避免相同随机数种子。就该节中的 pi 估值案例而言，采用 numpy 的代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimate_nbr_points_in_quarter_circle</span><span style="color:#24292E;">(nbr_samples):</span></span>
<span class="line"><span style="color:#6A737D;"># set random seed for numpy in each new process</span></span>
<span class="line"><span style="color:#6A737D;"># else the fork will mean they all share the same state</span></span>
<span class="line"><span style="color:#24292E;">    np.random.seed()</span></span>
<span class="line"><span style="color:#24292E;">    xs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.random.uniform(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, nbr_samples)</span></span>
<span class="line"><span style="color:#24292E;">    ys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.random.uniform(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, nbr_samples)</span></span>
<span class="line"><span style="color:#24292E;">    estimate_inside_quarter_unit_circle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (xs </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> xs </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ys </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> ys) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    nbr_trials_in_quarter_unit_circle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.sum(estimate_inside_quarter_unit_circle)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nbr_trials_in_quarter_unit_circle</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若使用多进程的话，操作方式与本文中的 pi 估计案例类似。由于使用并行运算，因此很难使用之前提到的 line_profiler 一类工具。若要检验效率的话，可以尝试人工地注释掉每一行，然后分别计算时间。</p><p>可以在进程之间共享矩阵来节省 RAM 的占用，比如使用 <code>multiprocessing.Array</code> , <code>multiprocessing.RawArray</code>等。</p><p><strong>为什么我需要加锁来避免数据丢失</strong></p><p>如 4 个进程以一定次数递增一个共享的计数器时。缺少同步的话，计数就是错误的。</p><p>对于文件的读写同步，可以采用 <code>lockfile</code> 模块；对于值，可以考虑 <code>multiprocessing.Value</code> 及其 <code>lock()</code></p><p><strong>multiprocessing 解决棘手问题的贴士</strong></p><ul><li>把你的工作拆分成独立的工作单元。</li><li>如果工作者所花的时间是可变的（如检查素数任务），那就考虑随机化工作序列（另一个例子 就是处理大小可变的文件）。</li><li>对你的工作队列进行排序，这样首先处理最慢的任务可能是一个平均来说有用的策略。</li><li>使用默认的 chunksize，除非你已经验证了调节它的理由。</li><li>让任务数量与物理 CPU 数量保持一致（默认的 chunksize 再次为你考虑到了，尽管它默认会使用超线程，这样可能不会提供额外的性能收益）。</li></ul><p><strong>multiprocessing 的一些基础</strong></p>`,20),O={href:"https://docs.python.org/zh-cn/3/library/multiprocessing.html#multiprocessing.Process",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"mp.set_start_method('spawn')",-1),T=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> multiprocessing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Process(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">print</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bob&#39;</span><span style="color:#24292E;">,))  </span><span style="color:#6A737D;"># 定义一个进程</span></span>
<span class="line"><span style="color:#24292E;">p.is_alive()  </span><span style="color:#6A737D;"># 查看进程状态</span></span>
<span class="line"><span style="color:#24292E;">p.start()  </span><span style="color:#6A737D;"># 启动一个进程</span></span>
<span class="line"><span style="color:#24292E;">p.join()  </span><span style="color:#6A737D;"># join(t) 阻塞 t 秒，t 默认为 None，即阻塞知道该进程终止</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G={href:"https://docs.python.org/zh-cn/3/library/multiprocessing.html#multiprocessing.Queue",target:"_blank",rel:"noopener noreferrer"},Q=s("code",null,"Queue",-1),V={href:"https://docs.python.org/zh-cn/3/library/queue.html#queue.Queue",target:"_blank",rel:"noopener noreferrer"},J=s("code",null,"queue.Queue",-1),X=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> multiprocessing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Process, Queue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(q):</span></span>
<span class="line"><span style="color:#24292E;">    q.put([</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">])  </span><span style="color:#6A737D;"># </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Queue()</span></span>
<span class="line"><span style="color:#24292E;">    p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Process(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">f, </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(q,))</span></span>
<span class="line"><span style="color:#24292E;">    p.start()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(q.get(</span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))  </span><span style="color:#6A737D;"># 提取头元素，等待 1 秒。timeout 默认为 None（一直等待）</span></span>
<span class="line"><span style="color:#24292E;">    p.join()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),H={href:"https://docs.python.org/zh-cn/3/library/multiprocessing.html#module-multiprocessing.pool",target:"_blank",rel:"noopener noreferrer"},K=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> multiprocessing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Pool</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(x):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> Pool(</span><span style="color:#E36209;">processes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pool:         </span><span style="color:#6A737D;"># start 4 worker processes</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.apply_async(f, (</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,)) </span><span style="color:#6A737D;"># evaluate &quot;f(10)&quot; asynchronously in a single process</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.get(</span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))        </span><span style="color:#6A737D;"># 尝试获取结果</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(pool.map(f, </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)))       </span><span style="color:#6A737D;"># 返回可迭代对象，将 range10 分块添加到进程中</span></span>
<span class="line"><span style="color:#24292E;">        it </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.imap(f, </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))        </span><span style="color:#6A737D;"># 对于很长的可迭代对象，考虑使用 imap</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(it))                     </span><span style="color:#6A737D;"># prints &quot;0&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(it.next(</span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))           </span><span style="color:#6A737D;"># prints &quot;1&quot; ，除非 timeout</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.apply_async(time.sleep, (</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.get(</span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))        </span><span style="color:#6A737D;"># raises multiprocessing.TimeoutError</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),W={href:"https://docs.python.org/zh-cn/3/library/multiprocessing.html#managers",target:"_blank",rel:"noopener noreferrer"},Y=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#005CC5;">FLAG_CLEAR</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;0&#39;</span></span>
<span class="line"><span style="color:#005CC5;">FLAG_SET</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 此处使用 1-byte char 作为进程通信的信号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">manager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> multiprocessing.Manager()</span></span>
<span class="line"><span style="color:#24292E;">value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> manager.Value(</span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">FLAG_CLEAR</span><span style="color:#24292E;">) </span><span style="color:#6A737D;"># 1-byte character 生成一个可储存值的 value 对象</span></span>
<span class="line"><span style="color:#24292E;">value.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FLAG_CLEAR</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># ...</span></span>
<span class="line"><span style="color:#24292E;">lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> multiprocessing.Lock()  </span><span style="color:#6A737D;"># 变量锁可以确保数据同步正确</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> lock:</span></span>
<span class="line"><span style="color:#24292E;">    value2.value </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>Array 的共享：4 个进程分别采用 random 来生成随机数的效率，不如生成完一个大随机块后再共享开得快。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> multiprocessing.Pool(</span><span style="color:#E36209;">processes</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">nbr_parallel_blocks) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pool:</span></span>
<span class="line"><span style="color:#24292E;">    ranges_to_check </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_range(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(eval_examples), nbr_parallel_blocks)  </span><span style="color:#6A737D;"># 对检查范围分区</span></span>
<span class="line"><span style="color:#24292E;">    tydi_pred_dict_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        pool.apply_async(construct_prediction_object_in_range,</span></span>
<span class="line"><span style="color:#24292E;">                         (eval_examples, beg, end, candidate_beam, max_answer_length)</span></span>
<span class="line"><span style="color:#24292E;">                        ).get()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> beg, end </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> ranges_to_check</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 pool 进行多线程时候，运行的函数不可以是 local 函数。尽管如此，但我们可以用 partial 来传递内部参数。</p><p>此外，multiprocessing 中的字典或者 list 对象无法直接通过引用更改，需要整个对象重新赋值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># create a list proxy and append a mutable object (a dictionary) </span></span>
<span class="line"><span style="color:#24292E;">lproxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> manager.list() </span></span>
<span class="line"><span style="color:#24292E;">lproxy.append({})</span></span>
<span class="line"><span style="color:#6A737D;"># now mutate the dictionary </span></span>
<span class="line"><span style="color:#24292E;">d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lproxy[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">d[</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">d[</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#6A737D;"># at this point, the changes to d are not yet synced, but by</span></span>
<span class="line"><span style="color:#6A737D;"># reassigning the dictionary, the proxy is notified of the change </span></span>
<span class="line"><span style="color:#24292E;">lproxy[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存占用问题：</p><p>multiprocessing 的 fork 方式下，子进程会复制一份父进程的资源。尝试使用 forkserver 或者 spawn。</p>`,9),Z=s("code",null,"imap",-1),$=s("code",null,"imap_unordered",-1),ss=s("code",null,"map",-1),ns=s("em",null,"chunksize",-1),as={href:"https://docs.python.org/zh-cn/3/library/multiprocessing.html#multiprocessing.pool.Pool.map",target:"_blank",rel:"noopener noreferrer"},ls=s("code",null,"map()",-1),es=s("em",null,"chunksize",-1),ps=s("code",null,"1",-1),os=s("strong",null,"极大",-1),ts=a(`<h2 id="集群和工作队列" tabindex="-1"><a class="header-anchor" href="#集群和工作队列" aria-hidden="true">#</a> 集群和工作队列</h2><p>集群的关键点落在了维护集群上，书中重点强调需要考虑到操作集群时可能发生的任何情况，并且定期地检查集群的健康状况。</p><p>而后书中介绍了三个集群化解决方案：Parallel Python、IPython Parallel 和 NSQ。</p><p>其他集群化工具：Celery，Gearman，PyRes，SQS</p><h3 id="小结-7" tabindex="-1"><a class="header-anchor" href="#小结-7" aria-hidden="true">#</a> 小结</h3><p><strong>为什么集群是有用的？</strong></p><ul><li>集群的特点在于能够轻松的扩展服务器规模，只要激活服务器的速度够快，就能够很好的应对业务高峰期。并且集群能够提升系统整体的容错性（部分集群点宕机不会影响整体服务）</li></ul><p><strong>集群的代价是什么？</strong></p><ul><li>你所面临的问题包括：机器间版本、信息统一问题；每台机器维护；数据转移；集群管理成本高；集群部分机器宕机后可能面临的问题；</li></ul><p>惨痛的案例：在 2012 年，高频交易公司骑士资本在集群中做软件升级期间引入了一个错误，损失了 4.62 亿美元。软件做出了超出客户所请求的股票买卖。在交易软件中，一个更老的标记转用于新函数。升级已进行到了 8 台活跃机器中的 7 台，但是第 8 台机器使用了更旧的代码来处理标记，这导致了所做出的错误的交易。</p><p><strong>我该如何把一个多进程的解决方案转换成一个集群解决方案？</strong></p><p>采用 Parallel Python，通过<code>multiprocessing</code> 转化集群方案。</p><p><strong>IPython 集群如何工作？</strong></p><p><strong>NSQ 是怎样有助于创建鲁棒的生产系统？</strong></p><p>NSQ 提供了关于消息递送的基本保证，并且它使用了两个简单的设计模式来做好了一切：队列和发布者/订阅者模式。</p><ul><li><strong>队列：</strong> 起到缓冲的作用；一、如果处理任务的机器下线，那么客户任务会被缓存在队列中；二、在业务高峰期，不能被及时处理的任务能够得到存放。NSQ 的队列能够存储与内存或硬盘，这取决于队列中的任务数量。</li><li><strong>发布者/订阅者：</strong> 有点类似于 MQTT 的发布者/消费者。NSQ 提出数据消费者，（多个进程能够连接到相同的数据进行发布）当新数据发布时，订阅者能够得到一份拷贝。</li></ul><p>一般来说，当使用队列系统来工作时，设法让下流的系统处于正常工作负载 60%的容量是一个好主意。</p><h2 id="使用更少的-ram" tabindex="-1"><a class="header-anchor" href="#使用更少的-ram" aria-hidden="true">#</a> 使用更少的 RAM</h2><h3 id="小结-8" tabindex="-1"><a class="header-anchor" href="#小结-8" aria-hidden="true">#</a> 小结</h3><p><strong>为什么我应该使用更少的 RAM？</strong></p><ul><li><p>了解为什么 RAM 被吃光了而且考虑更有效的方式来使用这个稀缺资源将有助于你处理扩展性的问题。</p></li><li><p>抽象的来说，内存中数据越多，移动起来越慢</p></li></ul><p><strong>为什么 numpy 和 array 对存储大量数字而言更有利？</strong></p><ul><li>用连续的 RAM 块来保存底层数据。</li><li>numpy 或 array 中的数字对象并不是 python 对象，而是字节。</li></ul><p><strong>怎样把许多文本高效地存储进 RAM？</strong></p><p>要在一个静态结构中存储大量的 Uncode 对象，可以采用 Trie 树和有向无环图单词图（DAWGs）<code>import dawg </code>来压缩文本内容。</p><p>可以考虑概率数据结构，如 HyperLogLog++ 算法。该方法牺牲了准确率来换取 RAM。</p><p><strong>我该如何能仅仅使用一个字节来（近似地）计数到 1e77？</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MorrisCounter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(self, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> random() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.counter):</span></span>
<span class="line"><span style="color:#24292E;">        	</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.counter </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__len__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">**</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.counter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上计数器，再计数的时候，当 <code>counter</code>越大，<code>counter += 1</code> 的概率就越小。因此，从概率的角度出发，通过<code>counter</code>大小能够大致知道具体计数的次数。概率计数能够用一个无符号字节，<code>math.pow(2, 255)</code> 可以计数到 <code>5e76</code>。</p><p>除此外可以使用散列函数来进行非 <strong>重复元素个数的计数</strong> 。如 KMinValues 算法：如果我们保存了我们所见到的 k 个最小的唯一散列值，我们就能近似估算散列值的总体空间，并且推导出这些项的全部数量。</p><p>KMinValues 算法 - Beyer,K.,Haas, P.J., Reinwald, B., Sismanis, Y.,和 Gemulla, R“. 在多集和操作下，有关对独立值估算的概要”。2007 年 ACM SIGMOD 数据管理国际会议进展——SIGMOD ’07, (2007): 199　210. doi:10.1145/1247480.1247504。</p><p><strong>什么是布隆过滤？为什么我可能会需要它们？</strong></p><p>布隆过滤主要思想：对数据进行多次散列，得到散列列表，从而降低散列冲撞的概率。</p><p>布隆过滤 - Bloom,B.H. “以允许的误差使用 hash 编码做空间/时间的权衡。”ACM 通信。13:7（1970）：422-426doi:10.1145/362686.362692</p><h2 id="现场教训" tabindex="-1"><a class="header-anchor" href="#现场教训" aria-hidden="true">#</a> 现场教训</h2><p><strong>书中的这一部分值得任何技术出身的创业者反复斟酌！</strong></p><p>该部分包括自适应实验室（Adaptive Lab）案例、专注于机器学习的咨询业务的技术框架等</p><p>几个关键想法：</p><p><strong>Redis</strong> 消息服务中心。其中的 <strong>Celery</strong> 任务队列（面对需求变动大）可以快速分发大量的数据流给任意数量的服务器来做独立处理和索引</p><p><strong>Elasticsearch</strong> 做索引产品、实时文档存储</p><p><strong>Cassendra</strong> 数据库</p><p><strong>Graphite</strong> 被用来做报告、和 collectd、statsd 一起可以画出运行状况的漂亮图表。这带来一种观察趋 势的方法，并反溯分析问题来找到根本原因</p><p><strong>Sentry</strong> 一个针对事件日志的大系统，并且跟踪了集群中的机器所产生的异常被用来记录和诊断 Python 的栈跟踪信息；</p><p><strong>Jekins</strong> 被用来和内存数据库配置做连续集成。</p><p><strong>SaltStack</strong> 被用来定义和配给复杂的集群，并处理所有的库、语言、数据库和文档存储的设置</p><p><strong>flask</strong> web 框架，比 Django 更容易追踪代码，更灵活（但不意味着 flask 更好）。</p><p><strong>ngix</strong> 反向代理</p><h3 id="一个例子" tabindex="-1"><a class="header-anchor" href="#一个例子" aria-hidden="true">#</a> 一个例子</h3><p>来看看一家帮助客户为数据处理设计（文本数据）和构建系统的公司的建议。<u>（就是 gensim 的创作团队！他们用 python 实现了比 c 更快的 word2vec！）</u>该企业面对不同的客户，需要考虑不同的技术栈来插入客户已经存在的数据流和管道中。来看看他们给的建议：</p><p><strong>创业建议：</strong></p><ul><li><strong>沟通：</strong> 和客户沟通分为几个步骤：</li></ul><ol><li><strong>业务开端：</strong> 在更高的层面（业务）上理解客户的问题。包括他们所需要的东西、他们在联系你之前对问题解决方案的理解（什么方法是可以做的、方法的效果等）</li><li><strong>业务结束：</strong> 事先对验证解决方案的方式达成一致</li></ol><ul><li><strong>寻找有前途的技术：</strong> 发觉那些良好的、健壮的、正在得到关注的技术，让价值/成本比值最大化。如几年前的 Elasticsearch。</li><li><strong>保持简单：</strong> 注重系统的维护，并且让维护变得简单。除非是性能上的强行要求。</li><li><strong>在数据管道中使用手动的完整性检查：</strong> 优化数据处理系统时，容易停留在二进制模式中，即使用高效的、紧凑的二进制数据格式和压缩过的 I/O。这样在很多情况下，数据总是以不可理解的形式进行传递，当系统发生问题时也难以调试。 <strong>建议：</strong> <u>对系统中的这些部分计入日志，挑选一些做简单的数据可视化，真实世界的数据总是杂乱无章的。</u></li><li><strong>小心地在潮流中导航：</strong> 一个客户痴迷 X 技术，并且希望得到他，但他可能并不需要这个技术。X 随时间变化，因为炒作的浪潮来来去去。想想现在可能有哪些 X？大数据？人工智能？</li></ul>`,53),rs=s("strong",null,"代码优化建议：",-1),cs={href:"https://radimrehurek.com/",target:"_blank",rel:"noopener noreferrer"},is=a("<ul><li><strong>流化你的数据，观察你的内存：</strong> 学习过程中，很多时候我们把所有数据都装进 RAM。但实际情况下，面对海量数据，这是不可能完成的。</li><li><strong>利用 Python 的丰富生态系统：</strong> gensim Word2vec 就是从一个可读的、使用 numpy 的干净的 word2vec 的移植开始的。numpy 是 python 科学与数字领域的开拓者。虽然他很快，但是还是比 google 的 C 版本 word2vec 慢了不少。</li><li><strong>配置和编译热点：</strong> gensim 团队选择使用 Cython + C。由于团队基于一个移植版本的 word2vec 进行开发，因此优化过程中可以进行免费的单元测试。</li><li><strong>知道你的 BLAS：</strong></li></ul><ol><li>numpy 中包装了 BLAS（基础线性代数子例程）- 这些是低级的例程集合，直接通过处理器供应商（英特尔、AMD 等）使用汇编、Fortran 或者 C 来做优化，被设计用于从一种特定的处理器架构中挤榨出最佳的性能</li><li>如，调用一个 axpy 的 BLAS 例程来计算 vector_y += scalar * vector_x，这样比通用的编译器为一 个等价的显式的循环所产生的代码要更快。因此把 word2vec 的训练表示成 BLAS 操作导致了额外的 4 倍速度提升。这也是 python gensim word2vec 快过 google C 版本 word2vec 的关键。</li></ol><ul><li><strong>并行化和多核、静态内存分配</strong> 等，请参考原书最后一章。</li></ul>",3);function ys(ds,ms){const l=o("ExternalLinkIcon");return t(),r("div",null,[u,s("ul",null,[s("li",null,[s("a",h,[n("教你阅读 Cpython 的源码"),e(l)]),n(" CPython 可以轻松导入 C 库并从 Python 中使用它们一样")])]),g,v,b,E,C,f,_,s("p",null,[s("a",A,[n("Cython 文档"),e(l)]),n(),D]),x,s("p",null,[s("a",k,[n("Cython 官方语法参考"),e(l)]),n(", "),s("a",F,[n("网友笔记"),e(l)])]),P,q,w,s("p",null,[n("采用 "),s("a",z,[n("Redis"),e(l)]),n(" 来进行数据共享，任何与 Redis 有接口的语言或工具都能以一种可兼容的方式来共享数据。可以轻易地不同编程语言之间平等地共享数据。")]),L,M,s("p",null,[U,n(),s("a",j,[n("python multiprocessing 库链接"),e(l)])]),S,R,s("p",null,[n("进程是资源分配的最小单位，线程是 CPU 调度的最小单位。参考"),s("a",I,[n("知乎回答"),e(l)]),n(" 可以将进程-线程关系比喻成火车与车厢。")]),N,s("ul",null,[s("li",null,[n("Process 类 - 及用于操作进程的类。"),s("a",O,[n("doc"),e(l)]),n(" multiprocessing 支持 spawn，fork，forkserver 三种不同的进程启动方式。可以通过 "),B,n(" 来更改。")])]),T,s("ul",null,[s("li",null,[n("Queue - "),s("a",G,[Q,e(l)]),n(" 类是一个近似 "),s("a",V,[J,e(l)]),n(" 的克隆。在 multiprocessing 中可用来做进程通信。multiprocessing 中的 queue 不能用于 pool 进程池。线程池中通信可以使用 Manager 中的 queue")])]),X,s("ul",null,[s("li",null,[s("a",H,[n("Pool"),e(l)]),n(" - 进程池可以对一系列进程进行操作。常用的方法包括如下：")])]),K,s("ul",null,[s("li",null,[s("a",W,[n("Manager"),e(l)]),n(" - 管理器提供了一种创建共享数据的方法，从而可以在不同进程中共享，甚至可以通过网络跨机器共享数据。")])]),Y,s("p",null,[n("对于需要多进程处理超大队列，可以考虑采用 "),Z,n("或 "),$,n(" 代替 "),ss,n("。使用 "),ns,n(" 参数的作用和 "),s("a",as,[ls,e(l)]),n(" 方法的一样。对于很长的迭代器，给 "),es,n(" 设置一个很大的值会比默认值 "),ps,n(),os,n(" 地加快执行速度。")]),ts,s("p",null,[rs,n(" 很多优化的细节在 "),s("a",cs,[n("radim rehurek 博客"),e(l)]),n(" 上能找到。")]),is])}const gs=p(m,[["render",ys],["__file","笔记python_advanced.html.vue"]]);export{gs as default};
