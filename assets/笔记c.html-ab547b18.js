import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as e,a as s,b as n,d as c,e as r,f as t}from"./app-441d5a1b.js";const i={},y=s("h1",{id:"c-非常入门笔记",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-非常入门笔记","aria-hidden":"true"},"#"),n(" C 非常入门笔记")],-1),d=s("p",null,"嵌入式自学开始啦~ 为了自己的贾维斯",-1),E={href:"https://www.bilibili.com/video/BV1FA411v7YW?p=530&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="_1-1-入门" tabindex="-1"><a class="header-anchor" href="#_1-1-入门" aria-hidden="true">#</a> 1.1 入门</h2><ul><li>key word <ul><li><p>rigister (for char, int) - 不能对 register 取地址</p></li><li><p>static - 修饰的变量保存再内存的静态空间种 | const - 不能修改的值 | extern - 用于全局变量声明</p></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  // char a = 97; 其中 97 为 ASCII 值</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//%c 对数字输出 ASCII 对应字符, %d 对字符，输出 ASCII 值</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">d 十进制；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">ld </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> 十进制有符号； </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">u 十进制无符号； </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">#o 八进制表示；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">#x 十六进制表示；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">f </span><span style="color:#D73A49;">float</span><span style="color:#24292E;">；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">lf </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">e 指数型浮点数；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">c 单个字符；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">s 字 c 符串；</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">p 指针的值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类型转换</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 自动转换：</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">signed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#6A737D;"> // = 2</span></span>
<span class="line"><span style="color:#005CC5;">5.0</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#6A737D;"> //  = 2.5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8.1</span><span style="color:#D73A49;">f</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span><span style="color:#6A737D;"> //c: 8</span></span>
<span class="line"><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 强制转换</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">float</span><span style="color:#24292E;">)a; (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)(x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y);</span><span style="color:#6A737D;">  //计算后再转换</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>运算符：</p><ul><li>三目运算符：(A)?(B):(C) -- return B if A else C</li></ul></li><li><p>A = (B,C,D) -- 依次执行 BCD，A 为 D 的结果</p></li><li><p>% 只对整数有用</p></li><li><p>&amp;&amp; ( and), || (or), ! (not)</p></li><li><p><mark>位运算(二进制的运算，计算机自动转换)</mark></p></li><li><p>| , 等于 or</p></li><li><p>~， 1 变 0，0 变 1</p></li><li><p>^，异或</p><ul><li>、&gt;&gt; 右移，逻辑右移：低位溢出，高位补 0/ 算数右移：高位补符号位</li></ul></li><li><p>b = a++ same as b = a, a += 1 b = ++a same as a += 1, b = a</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int/char</span><span style="color:#24292E;"> condition)</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> condition1:</span><span style="color:#6A737D;">  // if condition = condition1</span></span>
<span class="line"><span style="color:#24292E;"> 		</span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // 如果没有 break，执行完后会执行下一个 case 的语句，知道遇到 break</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">goto</span><span style="color:#24292E;"> NEXT;}</span></span>
<span class="line"><span style="color:#24292E;">NEXT:</span></span>
<span class="line"><span style="color:#24292E;">	跳转到这里</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// myfun.h 头文件中用来声明函数</span></span>
<span class="line"><span style="color:#D73A49;">#pragma</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">once</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myfun1</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//myfun.c 中</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;stdio.h&gt;</span><span style="color:#24292E;"> #include </span><span style="color:#032F62;">&quot;myfun.h&quot;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myfun1</span><span style="color:#24292E;">(){</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my functino&quot;</span><span style="color:#24292E;">);	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//main</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;stdio.h&gt;</span><span style="color:#24292E;"> #include </span><span style="color:#032F62;">&quot;myfun.h&quot;</span><span style="color:#6A737D;">//用“”包含当前目录下找文件，&lt;&gt;包含系统中头文件。不要#include xxx.c 文件</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">){</span><span style="color:#6F42C1;">myfun1</span><span style="color:#24292E;">();</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存分区</p><ul><li><p>虚拟内存</p><ul><li><p>再写程序的，%p 看到的都是虚拟内存</p></li><li><p>32 位操作系统中，虚拟内存分为 3G 用户空间和 1G 内核空间</p></li><li><p>堆，栈（存放局部变量），静态全局区，代码区，文字常量区</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num;</span><span style="color:#6A737D;">  // 静态全局变量， 只在定义的.c 文件中有效</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a;</span><span style="color:#6A737D;"> //默认随机值   </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //静态局部变量只初始化一次，默认赋值 0}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="宏" tabindex="-1"><a class="header-anchor" href="#宏" aria-hidden="true">#</a> 宏</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PI</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#6A737D;">  //不带参宏，一般大写</span></span>
<span class="line"><span style="color:#D73A49;">#undef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PI</span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) ((a)</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">(b))</span><span style="color:#6A737D;">  //加上括号防止计算顺序错误  </span></span>
<span class="line"><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">S</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)；</span><span style="color:#6A737D;"> //带参宏浪费空间，节省时间； 带参函数浪费空间，节省空间</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择编译: 只有一块代码会被编译，都是再预编译，预处理阶段执行的 // 常用于头文件中，防止重复包含</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AAA</span></span>
<span class="line"><span style="color:#D73A49;">#ifdef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AAA</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#D73A49;">#else</span></span>
<span class="line"><span style="color:#24292E;">	...</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指针-以下内存为虚拟内存用户空间" tabindex="-1"><a class="header-anchor" href="#指针-以下内存为虚拟内存用户空间" aria-hidden="true">#</a> 指针 （以下内存为虚拟内存用户空间）</h3><p><strong>指针类型的转换</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">；</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p1,</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p2;</span></span>
<span class="line"><span style="color:#24292E;"> p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a;</span><span style="color:#6A737D;">  //*p1 = 0x34,把&amp;a 转换成 char 地址，</span></span>
<span class="line"><span style="color:#24292E;">p1</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  //*p1 = 0x12，*+指针 取值，char 类型后取一个字节，指针++为加上指针字节数量，char 加 1，int 指针加 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数组与指针</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">];  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;  </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//p 指向 a[] 第一个元素所在地址  </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//p 和 a 的不同：p 是变量，可以被赋值，a 是常量，不能被修改,其他功能大致相同</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">p</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">(p</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //等于*(a+2), p+2 等于&amp;a[2]为 index 2 所在位置（对于 int，p+2 相当于 16 进制的地址+8）</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//指针相减，等于指针之间数据个数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>指针数组</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">p</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> //指针变量的类型相同 这边都是 int</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a,b; </span><span style="color:#E36209;">p</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a; </span><span style="color:#E36209;">p</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;">q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">name</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;follow me&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;???&quot;</span><span style="color:#24292E;">}</span><span style="color:#6A737D;"> //常用于保存字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>指针字符串</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //str[0] = &quot;y&quot;可以执行修改。栈和全局内存中的内容课修改。通常使用再局部的函数</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //*str == &quot;a&quot;，几乎不用，执行*str = &quot;y&quot; error,文字常量区的内容不可修改. str == &quot;abc&quot;</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">*sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">//动态申请了 10 个字节的储存空间。堆区中的内容可修改。</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">如果想要再其他的文件中也是用对应的字符串，建议使用堆区。堆区空间手动申请，手动释放</span><span style="color:#D73A49;">**</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> buf_aver</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">buf_point </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //字符数组，指针指向的字符串，可以直接初始化</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">buf_heap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">*sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">  //堆中存放的字符串不能初始化，只能用 srcpy/scanf 复制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(buf_heap,</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">buf_aver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  //error,这边 buf_aver 被定义成数组名。用 strcpy(buf_aver,&quot;hello&quot;)</span></span>
<span class="line"><span style="color:#24292E;">buf_point </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">  //可以，*buf_point 为 h，且无法修改</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数组指针</strong> -- 用于给传入二维数组参数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p)[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // 数组指针的作用是，可以保存二维数组的首地址；</span></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span><span style="color:#6A737D;"> //</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p)[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]);</span><span style="color:#6A737D;">//可以将二维数组传参, 调用时候： fun(a);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // &amp;a 变成一个一维数组指针（升级指针）， (&amp;a) + 1 跳跃了 40 个字节。但是对 p 取地址变成一个 int 地址</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // *b 表示地址的降级为列指针，b 为行指针，b+1 为下一行的首地址，*b +1 为下一个元素的地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>指针与函数</strong> (修改变量地址上的数值，实现对全局变量的修改)</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myfun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">p</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">q</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#E36209;">z</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">z; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a,b; </span><span style="color:#6F42C1;">myfun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">b</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">z</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// 传参时取地址，myfun 函数中用取值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数传参</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun1</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">p</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> // 传入一维数组的地址</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p)[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">])</span><span style="color:#6A737D;"> //传入 2 维数组，a[0][2]相当于 p[0][2]</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun3</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">**</span><span style="color:#E36209;">q</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> //传指针数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>指针函数</strong> ，函数返回指针（用于返回字符串）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">fun4</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //栈区定义的空间会在函数运行结束后释放，这样 return 的指针指向 null</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">// static char str[100] = &quot;hello&quot;; //静态区的空间不会随着函数的结束而释放</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数指针</strong> , 将一个函数作为参数传递给另一个函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p)(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> max;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>回调函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">y}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p)(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">),</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p)(a,b);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process</span><span style="color:#24292E;">(add,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>空类型指针</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">q;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p;q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span><span style="color:#6A737D;"> //void 通用指针,主要用在函数的参数和返回值</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">z </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>main 函数传参</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> //argc：传入参数的个数；argv：保存每一个命令终端传入的参数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="动态内存申请" tabindex="-1"><a class="header-anchor" href="#动态内存申请" aria-hidden="true">#</a> 动态内存申请</h3><p>malloc, calloc</p><ul><li>申请后一定要判断是否申请成功，多次申请的内存，内存不一定连续；</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //一般用 memset 初始化</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">ptr</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> //释放堆区的空间，必须释放 malloc，calloc 或 relloc 的返回值对应的所有空间。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">));</span><span style="color:#6A737D;"> //强转指针类型，为 str 开辟堆区空间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">calloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nmemb</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  //参数（申请个数，每块的大小）</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">realloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">newsize</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 增加或减少原先申请的空间，参数（原空间首地址，重新开辟空间大小）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存泄漏（首地址丢了）</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){ </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p;</span></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//或 free(p)；释放</span></span>
<span class="line"><span style="color:#6A737D;">// p = NULL； 防止野指针</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串处理函数" tabindex="-1"><a class="header-anchor" href="#字符串处理函数" aria-hidden="true">#</a> 字符串处理函数</h3><p>字符串遇到\\0 结束</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;string.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">s1</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(s1));</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">dest</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">src</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //赋值包括\\0，输出遇到\\0 结束，保证目的地参数足够大</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strnpy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">dest</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">src</span><span style="color:#24292E;">, size_t_n);</span><span style="color:#6A737D;"> //复制前 n 个 char</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strcat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">dest</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">src</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //append 字符串,包括\\0</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strncat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">dest</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">src</span><span style="color:#24292E;">, size_t_n);</span><span style="color:#6A737D;"> //append n 个字符串,包括\\0</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strcmp</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s2</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">// 相等返回 0，strncmp 比较前 n 字符</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strchr</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> //找 ascii 码为 c 的字符，首次匹配。strrchr 末次匹配。 返回所在地址</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strstr</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">haystack</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">needle</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//在 haystack 指向的字符串中找 needle 指像字符串</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">atoi</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">nptr</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //将 nptr 转为 int，“123”转成 123 #include &lt;stdlib.h&gt; 用 atof 转化字符串为浮点型的数字</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">strtok</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">str</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">delim</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //切割字符串</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ret; </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> s</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;11:22:33:44:55&quot;</span></span>
<span class="line"><span style="color:#24292E;">ret  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strtok</span><span style="color:#24292E;">(s,</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 返回 11</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">((ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strtok</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">))){ </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,ret) }</span><span style="color:#6A737D;"> //返回 22 33 44 55</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>格式化字符串</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sprintf</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">buf</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char*</span><span style="color:#E36209;">format</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">sprintf</span><span style="color:#24292E;">(buf,</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">,</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">,</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // buf = ‘1,2,3&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">sscanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1:2:3&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">b</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">c</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //a = 1, b = 2 匹配同样类型的字</span></span>
<span class="line"><span style="color:#6F42C1;">sscanf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1234 5678&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%*d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%4s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,buf);</span><span style="color:#6A737D;"> //跳过数字， %[width]s 保存 n 个字</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>const</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //全局变量，只读，不能修改</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){ </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;}</span><span style="color:#6A737D;"> //不能直接赋值修改，可以通过地址修改局部变量</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">c;</span><span style="color:#6A737D;"> //这样无法修改 *p = 1;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">c;</span><span style="color:#6A737D;"> //这样无法修改 p = &amp;d;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体-共用体-枚举" tabindex="-1"><a class="header-anchor" href="#结构体-共用体-枚举" aria-hidden="true">#</a> 结构体，共用体，枚举</h3><p><strong>普通结构体变量</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu{ </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num; </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">];}xiaoming, xiaohong;</span><span style="color:#6A737D;">//一般结构体都会定义在全局</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu bob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">，</span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">};</span><span style="color:#6A737D;"> //初始化变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> year; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> month; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> day}BD;</span></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num; </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">]; BD birthday;}STU;</span><span style="color:#6A737D;"> // STU 为结构体类型，相当于 struct + 结构体名</span></span>
<span class="line"><span style="color:#24292E;">STU xiaohong </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">，</span><span style="color:#032F62;">&quot;小明&quot;</span><span style="color:#24292E;">,{</span><span style="color:#005CC5;">2008</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">}};</span><span style="color:#6A737D;"> //或{123，“小明”,2008,12,12}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">xiaohong.num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1001</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(xiaohong.name,</span><span style="color:#032F62;">&quot;小红&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">xiaohong.birthday.year </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2008</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">xiaohong.birthday.month </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">xiaohong </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xiaoming;</span><span style="color:#6A737D;"> //相同结构的结构体可以互相赋值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结构体数组</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#E36209;">edu</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;xiaoming&quot;</span><span style="color:#24292E;">},{</span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;asd&quot;</span><span style="color:#24292E;">}};</span><span style="color:#6A737D;"> //edu[0],edu[1]..</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>结构体指针</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">s;  (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">s).num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">; s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu));</span><span style="color:#6A737D;"> //常用</span></span>
<span class="line"><span style="color:#24292E;">s</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体内存分配，</p><ul><li>按照最大的字节类型开辟空间，根据最大的字节类型进行字节对齐</li><li>出现数组时，可以看作多个变量</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu{ </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> a;</span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c; }</span><span style="color:#6A737D;"> //8 字节 </span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu{ </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> a; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c; </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;}</span><span style="color:#6A737D;"> //12 字节</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>位段</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu{</span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b:</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};</span><span style="color:#6A737D;">  // a 只能取 0-3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>共用体 （struct 换成 union)</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">union</span><span style="color:#24292E;"> un{</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c};</span></span>
<span class="line"><span style="color:#D73A49;">union</span><span style="color:#24292E;"> un myun;</span></span>
<span class="line"><span style="color:#24292E;">myun.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; myun.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">; myun.c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //最后 abc 都是 300</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>枚举</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> week {mon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,tue</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, wed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, fri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}; </span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> week day1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mon;</span><span style="color:#6A737D;"> //变量只能用里面的值，这边 day1 = 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h3><p><strong>单项链表</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu{ </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num; </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">]; </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stu </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">next;}STU;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linked_list_append</span><span style="color:#24292E;">(STU </span><span style="color:#D73A49;">**</span><span style="color:#E36209;">p_head</span><span style="color:#24292E;">,STU </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">p_new</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    STU </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p_mov </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p_head;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p_head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {  </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p_head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p_new;</span></span>
<span class="line"><span style="color:#24292E;">        p_new -&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(p_mov-&gt;next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        { p_mov </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p_mov-&gt;next; }</span></span>
<span class="line"><span style="color:#24292E;">        p_mov -&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p_new;</span></span>
<span class="line"><span style="color:#24292E;">        p_new-&gt;next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    STU </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p_new </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num,i;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">num;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        p_new </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (STU</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(STU));</span></span>
<span class="line"><span style="color:#24292E;">        p_new-&gt;num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(p_new-&gt;name,</span><span style="color:#032F62;">&quot;小红&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">linked_list_append</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">head,p_new)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">STU head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">STU node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;node1&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">}; head </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>链表释放</p><ul><li>重新定义一个指针，保存 p-&gt; next。 然后释放 p free(p);p = NULL;</li></ul></li></ul><h3 id="文件" tabindex="-1"><a class="header-anchor" href="#文件" aria-hidden="true">#</a> 文件</h3><p>行缓冲 - 到换行，程序退出 或缓冲区满 1024 bytes 时候才刷新，执行读写操作</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ello&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">  //不加换行符不输出</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){}</span></span>
<span class="line"><span style="color:#6F42C1;">ffulsh</span><span style="color:#24292E;">(stdout);</span><span style="color:#6A737D;"> //刷新</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件结构体指针</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">stdin , stdout, stderr</span><span style="color:#6A737D;"> // 三个特殊文件指针</span></span>
<span class="line"><span style="color:#24292E;">FILE </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">fp;</span></span>
<span class="line"><span style="color:#24292E;">fp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fopen</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;c:/Users/file.txt&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;r&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fp </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; fail to open&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fgetc</span><span style="color:#24292E;">(fp);</span><span style="color:#6A737D;">  //int fgetc(FILE *stream); 读取一个字节,可以读取到换行符。while((c = fgetc(fp)) != EOF)</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,c);</span></span>
<span class="line"><span style="color:#6F42C1;">fputc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;w&quot;</span><span style="color:#24292E;">,fp);</span><span style="color:#6A737D;"> //写入一个字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">buf</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">fgets</span><span style="color:#24292E;">(buf,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,fp);</span><span style="color:#6A737D;"> // 读取 7 个字节加上一个\\0， 遇到换行结束</span></span>
<span class="line"><span style="color:#6F42C1;">fputs</span><span style="color:#24292E;">(“hhhhhh”，fp); </span></span>
<span class="line"><span style="color:#6F42C1;">fclose</span><span style="color:#24292E;">(fp);</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fread</span><span style="color:#24292E;">(str,</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,fp);</span><span style="color:#6A737D;"> //读取 3 块，每块 100 字节； 读到 200-299 个字，返回 2。</span></span>
<span class="line"><span style="color:#6F42C1;">fwrite</span><span style="color:#24292E;">(str,</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,fp);</span><span style="color:#6A737D;"> //返回实际写的块数。可以写入结构体</span></span>
<span class="line"><span style="color:#6F42C1;">rewind</span><span style="color:#24292E;">(fp);</span><span style="color:#6A737D;"> //重置文件偏移量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">fprintf</span><span style="color:#24292E;">(fp,</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //写入字符串</span></span>
<span class="line"><span style="color:#6F42C1;">fscanf</span><span style="color:#24292E;">(fp,</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,a,b);</span><span style="color:#6A737D;">  //读取文件，保存到 a,b</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文件指定位置读写</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">ftell</span><span style="color:#24292E;">(fp);</span><span style="color:#6A737D;"> //获取当前指针位置 %ld</span></span>
<span class="line"><span style="color:#6F42C1;">fseek</span><span style="color:#24292E;">(fp,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,SEEK_SET);</span><span style="color:#6A737D;"> //开头后移 3 个位置，SEEK_SET,SEEK_CUR(当前位置),SEEK_END</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,82);function v(A,D){const a=p("ExternalLinkIcon");return o(),e("div",null,[y,s("blockquote",null,[d,s("p",null,[n("笔记总结 课程链接："),s("a",E,[n("千峰嵌入式教程"),c(a)])])]),r(" more"),u])}const h=l(i,[["render",v],["__file","笔记c.html.vue"]]);export{h as default};
