import{_ as p,E as o,S as c,W as l,$ as n,a3 as a,Z as t,aS as e}from"./framework-d5c0d2cb.js";const r={},i=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1),u={href:"https://link.zhihu.com/?target=https%3A//github.com/alibaba/Chat2DB/blob/main/README_CN.md",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"AI 智能助手",-1),k=n("p",null,"总体感觉，Chat2DB 在数据库操作平台上嵌入了 AI 交互功能，但用户与 AI 的交互方式还有待改善。目前支持的功能并不够惊艳，以使用 MySQL 为例，如果用户手动在 ChatGPT 上提问 SQL 相关问题，然后将生成的代码内容粘贴到 MySQL 上执行，那么使用体验基本与 Chat2DB 差不多。",-1),b=n("h2",{id:"chat2db-示例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#chat2db-示例","aria-hidden":"true"},"#"),a(" Chat2db 示例")],-1),m={href:"https://github.com/alibaba/Chat2DB/blob/main/README_CN.md",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"test.db",-1),g=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-ti</span> <span class="token parameter variable">-v</span> ./test.db:/app/test.db <span class="token parameter variable">--name</span><span class="token operator">=</span>chat2db <span class="token parameter variable">-p</span> <span class="token number">10824</span>:10824 chat2db/chat2db:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动容器后，打开 <code>localhost:10824</code> 就能看到 Chat2DB 的 web UI。在 UI 界面选择添加以下 SQLite 数据源。</p>`,2),_={href:"https://github.com/nlpxucan/WizardLM",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/lm-sys/FastChat",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/lm-sys/FastChat/blob/main/fastchat/serve/openai_api_server.py",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/nlpxucan/WizardLM",target:"_blank",rel:"noopener noreferrer"},q=n("h3",{id:"ai-配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ai-配置","aria-hidden":"true"},"#"),a(" AI 配置")],-1),S={href:"https://github.com/lm-sys/FastChat/blob/main/fastchat/serve/openai_api_server.py",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"本地服务 ip:端口",-1),y=n("figure",null,[n("img",{src:"https://pic1.zhimg.com/80/v2-8e74baa2832990864f808fbdcbb938e8_1440w.webp",alt:"image-20230620213720429",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230620213720429")],-1),C={href:"https://github.com/lm-sys/FastChat/blob/main/fastchat/serve/openai_api_server.py",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"http://api_host/v1/chat/completions",-1),A=e(`<figure><img src="https://pic4.zhimg.com/80/v2-a6b194ad7e2f278b148920674f0dda6f_1440w.webp" alt="Chat2DB 的五种 AI 功能" tabindex="0" loading="lazy"><figcaption>Chat2DB 的五种 AI 功能</figcaption></figure><p>以下为 Chat2DB 的五种 AI 功能： chatbot，自然语言转 SQL，SQL 解释，SQL 优化，SQL 转换 的示例以及请求内容。</p><h4 id="chatbot" tabindex="-1"><a class="header-anchor" href="#chatbot" aria-hidden="true">#</a> chatbot</h4><ol><li>示例：该功能类似 chatgpt 的闲聊，同一窗口下 <strong>支持多轮对话</strong> 。如下图 <code>--- BEGIN ---</code> 下面的语句为用户输入，<code>--- Chat 机器人 ---</code> 之后内容为 AI 回复。</li></ol><figure><img src="https://pic1.zhimg.com/80/v2-700fa2c394d53b8b4dbe887b2ea8e11c_1440w.webp" alt="示例提问 记住：一斤苹果的价格是 5 块钱; 一斤苹果多少钱？" tabindex="0" loading="lazy"><figcaption>示例提问 记住：一斤苹果的价格是 5 块钱; 一斤苹果多少钱？</figcaption></figure><ol start="2"><li>以下为 Chat2DB 向 OpenAI API 发送的请求内容。对于多轮对话功能，通过在发送的 messages 参数中进行拼接历史对话实现：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gpt-3.5-turbo&quot;</span><span class="token punctuation">,</span> 
 <span class="token property">&quot;messages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;记住：一斤苹果的价格是 5 块钱。&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
              <span class="token punctuation">{</span><span class="token property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;一斤苹果多少钱？&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 

 <span class="token property">&quot;temperature&quot;</span><span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> 
 <span class="token property">&quot;top_p&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
 <span class="token property">&quot;n&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
 <span class="token property">&quot;max_tokens&quot;</span><span class="token operator">:</span> <span class="token number">2048</span><span class="token punctuation">,</span> 
 <span class="token property">&quot;stop&quot;</span><span class="token operator">:</span> None<span class="token punctuation">,</span> 
 <span class="token property">&quot;stream&quot;</span><span class="token operator">:</span> True<span class="token punctuation">,</span> 
<span class="token property">&quot;presence_penalty&quot;</span><span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> 
 <span class="token property">&quot;frequency_penalty&quot;</span><span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> 
 <span class="token property">&quot;user&quot;</span><span class="token operator">:</span> None<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自然语言转-sql" tabindex="-1"><a class="header-anchor" href="#自然语言转-sql" aria-hidden="true">#</a> 自然语言转 SQL</h4><ol><li>示例提问 <code>这个表有多少行？</code>， <code>2012 年的记录有多少条？</code>：</li></ol><p>除了 chatbot 功能之外，目前自然语言转 SQL，SQL 解释等其他功能都不支持多轮对话。</p><figure><img src="https://pic3.zhimg.com/80/v2-91aad580b6e5bd0b487c29d5ed077ac6_1440w.webp" alt="提问： 这个表有多少行？ 2012 年的记录有多少条？" tabindex="0" loading="lazy"><figcaption>提问： 这个表有多少行？ 2012 年的记录有多少条？</figcaption></figure><ol start="2"><li>该功能会使用 prompt template 处理用户的提问，如问 <code>2012 年的记录有多少条？</code> 时，表的结构信息会被添加到 prompt 中，而后发送给 LLM，以下是完整的请求内容：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;model&#39;<span class="token operator">:</span> &#39;gpt<span class="token number">-3.5</span>-turbo&#39;<span class="token punctuation">,</span> 
 &#39;messages&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>&#39;role&#39;<span class="token operator">:</span> &#39;user&#39;<span class="token punctuation">,</span> &#39;content&#39;<span class="token operator">:</span> &#39; 请根据以下 table properties 和 SQL input 将自然语言转换成 SQL 查询. \\n\\n SQLITE SQL tables<span class="token punctuation">,</span> with their properties<span class="token operator">:</span>\\n\\n my_table(index<span class="token punctuation">,</span> date<span class="token punctuation">,</span> type<span class="token punctuation">,</span> locale<span class="token punctuation">,</span> locale_name<span class="token punctuation">,</span> description<span class="token punctuation">,</span> transferred)\\n\\n\\n SQL input<span class="token operator">:</span> <span class="token number">2012</span> 年的记录有多少条？&#39;<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
 &#39;temperature&#39;<span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> &#39;top_p&#39;<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> &#39;n&#39;<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> &#39;max_tokens&#39;<span class="token operator">:</span> <span class="token number">2048</span><span class="token punctuation">,</span> &#39;stop&#39;<span class="token operator">:</span> None<span class="token punctuation">,</span> &#39;stream&#39;<span class="token operator">:</span> True<span class="token punctuation">,</span> &#39;presence_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;frequency_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;user&#39;<span class="token operator">:</span> None<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sql-解释" tabindex="-1"><a class="header-anchor" href="#sql-解释" aria-hidden="true">#</a> SQL 解释</h4><ol><li>示例：针对 <code>SELECT COUNT(*) FROM my_table WHERE date BETWEEN &#39;2012-01-01&#39; AND &#39;2012-12-31&#39;;&quot;</code> 进行解释，并添加附加信息 <code>这条语句有涉及到对数据库的删除和修改吗？</code>：</li></ol><p>关于附加信息：SQL 解释、SQL 优化和 SQL 转换都支持用户在对话时提供额外信息。</p><figure><img src="https://pic4.zhimg.com/80/v2-1eddf66237b4fcf1b3c17be72d7f9d9f_1440w.webp" alt="相关图片" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>下图为 SQL 解释对话示例，原始用户输入为 <code>SELECT COUNT(*) FROM my_table WHERE date BETWEEN &#39;2012-01-01&#39; AND &#39;2012-12-31&#39;;&quot;</code>，其他附加信息为 <code>这条语句有涉及到对数据库的删除和修改吗？</code></p><figure><img src="https://pic3.zhimg.com/80/v2-d4c4905b37a24f0590018db11134a3f6_1440w.webp" alt="示例：SQL 解释功能" tabindex="0" loading="lazy"><figcaption>示例：SQL 解释功能</figcaption></figure><ol start="2"><li>prompt template：用户提供的其他附加信息会被添加到 prompt 当中，参考上面示例，填充完 SQL 解释模板后的请求为：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;model&#39;<span class="token operator">:</span> &#39;gpt<span class="token number">-3.5</span>-turbo&#39;<span class="token punctuation">,</span> 
 &#39;messages&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>&#39;role&#39;<span class="token operator">:</span> &#39;user&#39;<span class="token punctuation">,</span> &#39;content&#39;<span class="token operator">:</span> <span class="token string">&quot; 请根据以下 SQL input 解释 SQL. 这条语句有涉及到对数据库的删除和修改吗？\\n\\n SQL input: SELECT COUNT(*) FROM my_table WHERE date BETWEEN &#39;2012-01-01&#39; AND &#39;2012-12-31&#39;;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
 &#39;temperature&#39;<span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> &#39;top_p&#39;<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> &#39;n&#39;<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> &#39;max_tokens&#39;<span class="token operator">:</span> <span class="token number">2048</span><span class="token punctuation">,</span> &#39;stop&#39;<span class="token operator">:</span> None<span class="token punctuation">,</span> &#39;stream&#39;<span class="token operator">:</span> True<span class="token punctuation">,</span> &#39;presence_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;frequency_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;user&#39;<span class="token operator">:</span> None<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sql-优化" tabindex="-1"><a class="header-anchor" href="#sql-优化" aria-hidden="true">#</a> SQL 优化</h4><ol><li>示例：针对 <code>SELECT COUNT(*) FROM my_table WHERE date BETWEEN &#39;2012-01-01&#39; AND &#39;2012-12-31&#39;;&quot;</code> 进行优化。其他附加信息为 <code>这行有什么优化的空间吗？</code></li></ol><figure><img src="https://pic3.zhimg.com/80/v2-e3c1ae638b61581aea1560bbabe64002_1440w.webp" alt="SQL 优化示例" tabindex="0" loading="lazy"><figcaption>SQL 优化示例</figcaption></figure><ol start="2"><li>该功能同样会使用 prompt template 填充，完整请求内容如下：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;model&#39;<span class="token operator">:</span> &#39;gpt<span class="token number">-3.5</span>-turbo&#39;<span class="token punctuation">,</span> 
 &#39;messages&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>&#39;role&#39;<span class="token operator">:</span> &#39;user&#39;<span class="token punctuation">,</span> &#39;content&#39;<span class="token operator">:</span> <span class="token string">&quot; 请根据以下 SQL input 提供优化建议. 这行有什么优化的空间吗？\\n\\n SQL input: SELECT COUNT(*) FROM my_table WHERE date BETWEEN &#39;2012-01-01&#39; AND &#39;2012-12-31&#39;;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
 &#39;temperature&#39;<span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> &#39;top_p&#39;<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> &#39;n&#39;<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> &#39;max_tokens&#39;<span class="token operator">:</span> <span class="token number">2048</span><span class="token punctuation">,</span> &#39;stop&#39;<span class="token operator">:</span> None<span class="token punctuation">,</span> &#39;stream&#39;<span class="token operator">:</span> True<span class="token punctuation">,</span> &#39;presence_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;frequency_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;user&#39;<span class="token operator">:</span> None<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sql-转换" tabindex="-1"><a class="header-anchor" href="#sql-转换" aria-hidden="true">#</a> SQL 转换</h4><ol><li>示例：我们选择将选中的 SQL 转换为 <code>python pandas</code></li></ol><figure><img src="https://pic3.zhimg.com/80/v2-228c3f8ddb859203564fb6b47026bd3e_1440w.webp" alt="SQL 转换示例" tabindex="0" loading="lazy"><figcaption>SQL 转换示例</figcaption></figure><ol start="2"><li>prompt template 及发送的请求内容：</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;model&#39;<span class="token operator">:</span> &#39;gpt<span class="token number">-3.5</span>-turbo&#39;<span class="token punctuation">,</span> 
 &#39;messages&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>&#39;role&#39;<span class="token operator">:</span> &#39;user&#39;<span class="token punctuation">,</span> &#39;content&#39;<span class="token operator">:</span> <span class="token string">&quot; 请根据以下 SQL input 进行 SQL 转换. \\n\\n SQL input: SELECT COUNT(*) FROM my_table WHERE date BETWEEN &#39;2012-01-01&#39; AND &#39;2012-12-31&#39;;\\n\\n 目标 SQL 类型: python pandas&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
 &#39;temperature&#39;<span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> &#39;top_p&#39;<span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> &#39;n&#39;<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> &#39;max_tokens&#39;<span class="token operator">:</span> <span class="token number">2048</span><span class="token punctuation">,</span> &#39;stop&#39;<span class="token operator">:</span> None<span class="token punctuation">,</span> &#39;stream&#39;<span class="token operator">:</span> True<span class="token punctuation">,</span> &#39;presence_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;frequency_penalty&#39;<span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span> &#39;user&#39;<span class="token operator">:</span> None<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一点心得" tabindex="-1"><a class="header-anchor" href="#一点心得" aria-hidden="true">#</a> 一点心得</h2>`,32),x=e("<li><p>目前 Chat2DB 似乎只支持对单个表格的 query。如果想要对多个表格进行操作，需要自己写 prompt。</p></li><li><p>Chat2DB 发送的请求中仅包含了表格名称和表属性，因此向 OPENAI 发送什么样的数据是可控的。不像 Langchain 中的 SQL Agent 等，会在不经意间将表格数据发送给 OPENAI API。</p></li><li><p>Chat2DB 的使用体验在很大程度上依赖于 LLM 的能力。然而，对于 Text2SQL 任务， 笔者测试了 GPT-4 API，Google PaLM2 API 以及其他开源 LLM 模型， 它们的发挥都不够很稳定，潜在的问题包括：</p><ul><li><p><strong>生成的 SQL 语句不能执行；</strong> 通常回复的 SQL 语法是正确的，但是因为列不存在、表不存在等情况导致 SQL 执行异常。</p></li><li><p><strong>生成的 SQL 语句与问题无关；</strong> 有少数情况下，LLM 会对数据进行不必要的求和、取平均等操作。</p></li></ul><p>导致以上问题的因素可能有：</p><ul><li>表属性太多，无法将全部列名及对应表述都添加到 prompt 中；</li><li>用户提问不明确；</li><li>表格数据本身就是杂乱无章的，表格属性（如列名称等）不直观，非常抽象；</li></ul></li><li><p>回到文章开头提到的点，Chat2DB 中 AI 的交互功能，几乎就是数据库操作平台 + ChatGPT Web UI ，不同的是 Chat2DB 让你能够在数据库操作平台上直接对 AI 进行提问，省去了复制粘贴的麻烦，同时为你提供了几个简易的 prompt template。</p></li>",4),I={href:"https://github.com/alibaba/Chat2DB/blob/main/README_CN.md",target:"_blank",rel:"noopener noreferrer"};function N(T,B){const s=o("ExternalLinkIcon");return c(),l("div",null,[i,n("p",null,[a("最近在 github trending 看到了 "),n("a",u,[a("Chat2DB"),t(s)]),a("，碰巧个人正在做 Text2SQL, SQL2Text 等相关工作，因此便尝试了一下。Chat2DB 包含 AI 智能助手、团队协作、支持链接多种数据库等特性，本文仅覆盖 "),d,a(" 相关的分享。")]),k,b,n("p",null,[a("以下通过官方提供的 "),n("a",m,[a("docker"),t(s)]),a(" 进行安装，而后将一个 sqlite3 文件 "),h,a(" 共享到容器中进行测试。")]),g,n("p",null,[a("Chat2DB 默认使用 OPENAI 的 API，基于测试目的，笔者使用 "),n("a",_,[a("WizardLM"),t(s)]),a(" 及 "),n("a",v,[a("FastChat"),t(s)]),a(" 在本地的 5001 端口部署了 "),n("a",f,[a("OpenAI-compatible RESTful API"),t(s)]),a(" 。下文中的 AI 回复内容均来自于 "),n("a",L,[a("WizardLM-13B"),t(s)]),a(" 。")]),q,n("p",null,[a("在搭建好 "),n("a",S,[a("API 服务"),t(s)]),a(" 后，在 Chat2DB 自定义 AI 界面进行 AI 来源配置。其中 Api Host 输入 "),E,a(" 即可：")]),y,n("p",null,[n("a",C,[a("OpenAI-compatible RESTful API"),t(s)]),a(" 提供了 Text-to-embeddings，Text-completions，Chat-Completions 等多种 API。通过 FastChat 的 API 日志发现， Chat2DB 连接 OpenAI API 时，几乎所有的 AI 功能均使用了 Chat Completions 服务，即系统会向 "),Q,a("发送请求，不同 AI 功能发送的请求内容不同。")]),A,n("ol",null,[x,n("li",null,[n("p",null,[a("总感觉自己漏掉了某些重大功能，若 Chat2DB 仅有上文提到的 5 种 SQL 相关的 AI 交互功能，似乎不太值 7 千个 star？期待 "),n("a",I,[a("官方公布"),t(s)]),a(" 6 月底即将发布的重大更新！")])])])])}const z=p(r,[["render",N],["__file","笔记chat2db.html.vue"]]);export{z as default};
