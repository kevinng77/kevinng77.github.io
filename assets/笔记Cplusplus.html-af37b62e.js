import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as s,b as n,d as c,e as r,f as i}from"./app-4ea08187.js";const t={},y=s("h1",{id:"c-非常入门笔记",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-非常入门笔记","aria-hidden":"true"},"#"),n(" C++ 非常入门笔记")],-1),d=s("p",null,"嵌入式自学开始啦~ 为了自己的贾维斯",-1),v=s("p",null,"想不到一个金融学生竟然走上了这样的路",-1),E={href:"https://www.bilibili.com/video/BV1FA411v7YW?p=530&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},u=i(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;iostream&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//标准输入输出流</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> Namespace ::</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//namespace 定义在全局</span></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;}</span><span style="color:#6A737D;"> //添加项目进 namespace B</span></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">{ </span><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> {</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">();}}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> ::a </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span><span style="color:#6A737D;"> //全局变量 100</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">::a </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span><span style="color:#6A737D;"> //a = 20;</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">::a </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span><span style="color:#6A737D;"> //a = 10;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>void A::fun(){int a = 19;}</code> 在外部定义 namespace A 声明的函数</p><p><code>namespace{int a = 1;}</code> namespace 没有取名，则全部成员只能被当前文件调用</p><p><code>namespace newname = oldname;</code> 改名</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nameA</span><span style="color:#24292E;">::a;</span><span style="color:#6A737D;"> //声明后，函数中不能定义其他 a</span></span>
<span class="line"><span style="color:#24292E;">cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>using namespace nameA;</code> 后 namespaceA 中的全部标识符都可以直接使用，可以省略 nameA::，有变量冲突则使用局部变量</p><h2 id="c-c-对比" tabindex="-1"><a class="header-anchor" href="#c-c-对比" aria-hidden="true">#</a> C++ /C 对比</h2><ul><li>C++：全局变量无法重复定义。C 中多次定义会默认一次定义，多次声明</li><li>C 编译函数形参可以没有类型定义，C++必须有参数类型</li><li>C 编译函数 void 可以有返回值</li><li>C++：更严格的类型转换</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //不允许</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //允许</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>C++：定义结构体可以省略 struct</p></li><li><p>C++: bool 类型关键字可以直接使用</p></li><li><p>三目运算符：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">a</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">b</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">b;</span><span style="color:#6A737D;"> //C 返回 a 的值，C++返回变量 a</span></span>
<span class="line"><span style="color:#24292E;">(a</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">b</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">A</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">b) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //c++ 允许</span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">(a</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">b</span><span style="color:#D73A49;">?&amp;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">:&amp;</span><span style="color:#24292E;">b) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //c 中操作</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>const:</p><ul><li><p>C: 函数中 const 修饰的局部变量保存在栈区，可以用*p = &amp;a; 改变 a 的值；</p></li><li><p>c++: 局部的 const 变量保存在符号表中，无法修改</p></li><li><p>C/C++: 全局变量 const 保存在常量区，不能修改;</p></li><li><p>C: extern const int b; //声明外部可用（其他文件使用）</p></li><li><p>c++: const 局部变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//如果是函数局部变量，onst 修饰局部变量没有分配内存</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a;</span><span style="color:#6A737D;"> //会分配一个临时空间，int tmp = a, *p = &amp;tmp</span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //无法修改 a 的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span><span style="color:#6A737D;"> //const 修饰的局部变量为变量，a 可以被修改，存在栈区</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">cosnt </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stu</span><span style="color:#24292E;"> obj;</span><span style="color:#6A737D;"> //保存在栈区</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">obj；</span><span style="color:#6A737D;"> //修改 obj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //定义外部文件可以引用的 const 变量</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> <strong>引用</strong></h3><ul><li>实质是为变量取别名</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span><span style="color:#6A737D;"> //等号左边&amp;为引用，等号右边为取地址; 引用初始化后无法改变引用指向的目标；引用定义时必须初始化，不能写 int b; </span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c;</span><span style="color:#6A737D;"> //表示把 c 的值赋值给 b，不是给 c 取别名为 b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c[]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">arr)[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c;</span><span style="color:#6A737D;"> //typedef int ARR[5]; ARR &amp; arr = c;</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> arr[i] </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数的引用 (190)</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">y</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y; y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp}</span><span style="color:#6A737D;">//交换 x，y;引用做函数形参</span></span>
<span class="line"><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(a,b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> b;}</span><span style="color:#6A737D;">//返回 int 的引用；不能返回局部变量的引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">type </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span><span style="color:#6A737D;"> //常量引用,无法修改引用指向空间的值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //允许； int tmp = 1; int &amp;b = tmp;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>引用本质是指针常量 // Type * const ref = &amp;val; 指针常量只能指向同一块地址</strong></li></ul><h3 id="内联函数" tabindex="-1"><a class="header-anchor" href="#内联函数" aria-hidden="true">#</a> 内联函数</h3><ul><li><p>（保持宏函数的效率）（用空间换效率）（不能存在循环，判断，取地址）</p></li><li><p>内联函数只是给编译器一个建议，编译器不一定会接受这种建议</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FUN</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) a+b // 宏问题 FUN(a,b) * 5 = a + b*5,预处理只会替换，不会检查函数问题</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b;}</span><span style="color:#6A737D;"> //替换发生在编译阶段，不会有函数调用的开销</span></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FUN</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">) a&lt;b?a:b // FUN(++a,b)出错</span></span>
<span class="line"><span style="color:#D73A49;">inline</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">b</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">b;}</span></span>
<span class="line"><span style="color:#6A737D;">//任何在类中的函数自动成为内联函数</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>函数参数默认值，占位参数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 声明和定义只能一处设置默认参数</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">){}</span><span style="color:#6A737D;">//占位参数，没什么用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数重载: 同一 namespace, 不同参数个数，参数顺序，参数类型 （编译器自动更换函数名）</p></li><li><p>extern C (205) ：c++编译修改函数名</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myfun</span><span style="color:#24292E;">(a,b)</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//C 的头文件加入</span></span>
<span class="line"><span style="color:#D73A49;">#if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__cplusplus</span></span>
<span class="line"><span style="color:#D73A49;">extern</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myfun</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">#if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__cplusplus</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结构体，C 中不能放函数，C++可以放函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_stu</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print_stu</span><span style="color:#24292E;">(){cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;}</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected:int</span><span style="color:#24292E;"> tall;</span><span style="color:#6A737D;">//子类可访问</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private:int</span><span style="color:#24292E;"> money;</span><span style="color:#6A737D;"> //子类不可访问</span></span>
<span class="line"><span style="color:#24292E;">};</span><span style="color:#6A737D;">//struct 换成 class 就行；class 中成员默认都是私有访问</span></span>
<span class="line"><span style="color:#6A737D;">//尽量提供接口（public 函数）来实现类中变量的修改和初始化</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person_init</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">name</span><span style="color:#24292E;"> ){</span></span>
<span class="line"><span style="color:#24292E;">        m_age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(m_name, name);      </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show_person</span><span style="color:#24292E;">(){ }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_age</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> m_age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set_age</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (age </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            m_age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">get_name</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> m_name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set_name</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">name</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(m_name, name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">private:</span><span style="color:#6A737D;">  //建议成员设为私有，然后提供接口进行访问</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> m_name[</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    Person p1;</span></span>
<span class="line"><span style="color:#24292E;">    p1.</span><span style="color:#6F42C1;">person_init</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    p1.</span><span style="color:#6F42C1;">show_person</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    p1.</span><span style="color:#6F42C1;">set_age</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>构造和析构（初始化和清理）系统会默认提供构造和析构函数，但系统提供的构造和析构函数不做事，一般需要人为提供</strong> （及时清理指针等，节约内存）</li></ul><p>构造函数可分为有参构造，无参构造</p><ul><li>拷贝构造：旧对象初始化新对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#6A737D;">        //构造函数 1. 函数名和类名一致 没有返回值，不能写 void，可以有参数， 可以发生函数重载</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){}</span><span style="color:#6A737D;">//无参构造</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b){m_a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a; m_b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;}</span><span style="color:#6A737D;"> //有参构造，提供构造函数后系统不在提供默认构造函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(person </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#6A737D;">        //添加 explicit ，禁止通过隐式法调用构造函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p){</span></span>
<span class="line"><span style="color:#24292E;">            m_a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.a; name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(str)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//再做拷贝时候，重新给对象开辟一个空间</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(name,p.name);</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#6A737D;">//使用深拷贝，代替系统默认的浅拷贝构造，简单的浅拷贝做了简单的值拷贝，类中变量指向同一个地址，析构时会出错</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">~</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){</span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">             name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;}</span><span style="color:#6A737D;"> //析构函数 类名前加上~， 没有返回值，无参数，不能发生函数重载   </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造与调用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">    //括号法</span></span>
<span class="line"><span style="color:#24292E;">Person </span><span style="color:#6F42C1;">p1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //构造函数再实例化对象时自动调用</span></span>
<span class="line"><span style="color:#24292E;">    Person P2;</span><span style="color:#6A737D;"> //无参构造不使用括号</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//匿名对象；或 person()无参构造调用匿名对象;生命周期再当前行</span></span>
<span class="line"><span style="color:#6A737D;">    //销毁之前（如出了函数，或作用域）析构函数自动调用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(p2);</span><span style="color:#6A737D;">//再定义时，不能用括号法调用匿名对象</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">  	//显示法</span></span>
<span class="line"><span style="color:#24292E;">    person p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;luchy&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //显示法调用有参构造</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;">    //隐式法(不大使用)</span></span>
<span class="line"><span style="color:#24292E;">    person p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>初始化列表</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b): </span><span style="color:#6F42C1;">m_a</span><span style="color:#24292E;">(a),</span><span style="color:#6F42C1;">m_b</span><span style="color:#24292E;">(b){}</span><span style="color:#6A737D;">//下方先声明 int m_a,int m_b，再根据声明的顺序进行定义初始化</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类对象作为类成员</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">per_name</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">phone_name</span><span style="color:#24292E;">):</span><span style="color:#6F42C1;">per_name</span><span style="color:#24292E;">(name1),</span><span style="color:#6F42C1;">phone</span><span style="color:#24292E;">(phone_name){}</span><span style="color:#6A737D;"> //通过初始化列表调用有参构造</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    string per_name;</span></span>
<span class="line"><span style="color:#24292E;">string phone；</span><span style="color:#6A737D;">//先构造内部类，先声明先构造；析构顺序与构造相反</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类的其他特性</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Screen</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pos</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">size_type</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Screen</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Screen</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pos</span><span style="color:#24292E;"> </span><span style="color:#E36209;">h</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">pos</span><span style="color:#24292E;"> </span><span style="color:#E36209;">w</span><span style="color:#24292E;">):</span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">(h),</span><span style="color:#6F42C1;">width</span><span style="color:#24292E;">(w), </span><span style="color:#6F42C1;">contents</span><span style="color:#24292E;">(h </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> w,</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">){}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Screen</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pos</span><span style="color:#24292E;"> </span><span style="color:#E36209;">w</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">pos</span><span style="color:#24292E;"> </span><span style="color:#E36209;">h</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">) : </span><span style="color:#6F42C1;">width</span><span style="color:#24292E;">(w), </span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">(h), </span><span style="color:#6F42C1;">contents</span><span style="color:#24292E;">(h</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> w, c) {}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Screen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pos</span><span style="color:#24292E;"> </span><span style="color:#E36209;">w</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">pos</span><span style="color:#24292E;"> </span><span style="color:#E36209;">h</span><span style="color:#24292E;">) { cursor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> w </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">  h</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">height; </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Screen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#24292E;">) { contents[cursor] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c; </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ostream</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">os</span><span style="color:#24292E;">) { </span><span style="color:#6F42C1;">do_display</span><span style="color:#24292E;">(os);  }</span></span>
<span class="line"><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">do_display</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ostream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">os</span><span style="color:#24292E;">) { os </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> contents; }</span></span>
<span class="line"><span style="color:#24292E;">	pos height</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, width</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	pos cursor</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	string contents;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#24292E;">[] ) {</span></span>
<span class="line"><span style="color:#24292E;">	Screen </span><span style="color:#6F42C1;">myScreen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	myScreen.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(cout);</span></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	myScreen.</span><span style="color:#6F42C1;">display</span><span style="color:#24292E;">(cout);</span></span>
<span class="line"><span style="color:#24292E;">	cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态内存分配，new</p><ul><li><p>C++，使用 malloc 动态申请对象，不会调用构造和析构函数</p></li><li><p>new 先为对象再堆中分配内存，然后调用构造函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">类型 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> 类型;</span><span style="color:#6A737D;"> //int *p = new int; new 出来返回的是指针，可用于无参构造并调用析构函数</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> //new 数组，返回首元素地址</span></span>
<span class="line"><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> []p;</span><span style="color:#6A737D;"> //释放数组申请的空间;delete p;释放非数组申请的空间</span></span>
<span class="line"><span style="color:#6A737D;">//new 和 delete 采用相同的类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">person </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// new 时候调用有参构造</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">void *p = new person; //不会调用析构函数</span></span>
<span class="line"><span style="color:#24292e;">//new 调用有参构造;new 对象的数组时不能调用有参构造</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类中可以使用静态成员</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public:</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span><span style="color:#6A737D;"> //编译阶段就分配内存；不能再类内初始化，只能声明；存在静态全局区；所有类成员共享 1 个静态成员</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//可以访问静态成员变量，不能访问非静态成员变量</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //保存在常量区，不可修改，可以在类中初始化。</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">::b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //类的作用域，静态变量的访问定义 或通过对象访问静态成员函数: person p1; p1.b = 100;</span></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#24292E;">::c;</span><span style="color:#6A737D;"> //访问类中的一个成员变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单例模式：一个类只能有一个对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> single;}</span><span style="color:#6A737D;"> //提供接口操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">single;</span><span style="color:#6A737D;"> //私有化静态指针 new 对象，先创建指针，后在类外定义</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(){}</span><span style="color:#6A737D;">//无参构造私有化</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p</span><span style="color:#24292E;">){}</span><span style="color:#6A737D;"> //拷贝构造私有化</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Person </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">instance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">p-&gt;age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>类成员的空间占用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#6A737D;">    //空类至少为 1 个字节</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a;</span><span style="color:#6A737D;"> //4 bytes，占用对象空间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span><span style="color:#6A737D;"> //0 bytes 不存在类中，存在静态全局区</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(){}</span><span style="color:#6A737D;"> //0 bytes 不存在类中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show1</span><span style="color:#24292E;">(){}</span><span style="color:#6A737D;"> // 不存在类中</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>//函数存在代码区，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">+ this(对象调用成员函数，会将对象地址传给 this 指针)</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">\`\`\`cpp</span></span>
<span class="line"><span style="color:#24292e;">public：</span></span>
<span class="line"><span style="color:#24292e;">	Person(int a, int b){ this-&gt;a = a;this-&gt;b = b;}</span></span>
<span class="line"><span style="color:#24292e;">	person fun()const{} //常函数，不能通过 this 指针修改 this 指针指向的对象内容；const 修饰 const type * const this</span></span>
<span class="line"><span style="color:#24292e;">  </span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="友元" tabindex="-1"><a class="header-anchor" href="#友元" aria-hidden="true">#</a> 友元：</h2><ul><li>让 person 类中的 visit 函数可以访问 building</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Building</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#6A737D;">//类中所有的函数和成员都能访问 bilding 中的私有属性</span></span>
<span class="line"><span style="color:#24292E;">或</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Building</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">visit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}    </span><span style="color:#6A737D;">//person 的 visit 函数能访问，其他不能</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;"> //类外实现构造</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>全局函数声明为类的友元，以访问私有属性</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"></div></div></li></ul><p>class Person{</p><p>friend void fun(Person &amp;b); ...}</p><pre><code>\`\`\`
</code></pre><h3 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载" aria-hidden="true">#</a> 运算符重载</h3><p>给符号赋予新的意义，运算符只能运算内置的数据类型，如 char，int。所以我们可以做运算符重载</p><p>string 类相当于对字符串的操作进行了各种重载</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">person p1;</span></span>
<span class="line"><span style="color:#24292E;">person p2;</span></span>
<span class="line"><span style="color:#24292E;">person p3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p2;</span></span>
<span class="line"><span style="color:#6A737D;">//系统调用</span></span>
<span class="line"><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">+</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">p2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">或</span></span>
<span class="line"><span style="color:#24292E;">p1.</span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">(p2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">+</span><span style="color:#24292E;">( </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">person </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(p1.age </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p2.age)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 或类内实现</span></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">+</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    person </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(this -&gt; age</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">pe.age)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重载左移运算符( 右击 cout，转到定义可以查看函数定义)</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ostream</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ostream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">count</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">++</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;num </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ostream</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">&lt;&lt;</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ostream</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">count</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> p.age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cout;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">person </span><span style="color:#6F42C1;">p1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> p1;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以重载的运算符，但不要改变符号的意义，不能重载的又. :: .* ?: sizeof</p><ul><li>自加自减运算符重载</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">++</span><span style="color:#24292E;">a;</span><span style="color:#6A737D;"> //operator++(p1)  pi.operator++()</span></span>
<span class="line"><span style="color:#24292E;">a</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//p1.operator++(int)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>=重载</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span><span style="color:#6A737D;"> //p2.operator=(p1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1.age;</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1.name;</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;"> //系统自动生成的=重载只做简单的值拷贝；这样 p1 的 name 与 p2 的 name 指向同一个地址。在释放空间时会出错</span></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1.age;</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(p1.name)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name, p1.name);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重载不等号</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">==</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">age </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p2.age </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p2.name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    string name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> person </span><span style="color:#6F42C1;">p1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    person </span><span style="color:#6F42C1;">p2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p2)</span><span style="color:#6A737D;"> //p1.operator==(p2)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;p1 == p2&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数调用符号（）重载，又名函数对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myadd</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">()</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    myadd p;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //p.opertor()(3,4)</span></span>
<span class="line"><span style="color:#6A737D;">	//或</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myadd</span><span style="color:#24292E;">()(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span><span style="color:#6A737D;"> //匿名对象 调用 operator（3，4）函数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>总结</li></ul><p>=，[]，()，和-&gt;操作智能通过成员函数进行重载</p><p>&lt;&lt; 和&gt;&gt;只能通过全局函数配合友元函数进行重载</p><p>不要重载&amp;&amp;，||，不然短路规则可能会实现不了</p><p>所有的一元运算符建议使用成员函数重载</p><h3 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针" aria-hidden="true">#</a> 智能指针</h3><p>定义一个对象，保存另外对象的地址，等出了函数自动释放内存。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">smartpointer</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Smartpointer</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">~Smartpointer</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    person </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    person </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    Smartpointer </span><span style="color:#6F42C1;">sp</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> sp-&gt;age</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span><span style="color:#6A737D;"> //可以修改 sp.operator-&gt;()，让他返回 p 的地址</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;"> //这样运行完程序就会自动释放 p</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>子类（派生类）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#D73A49;">protected:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> tail_len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">        //子类函数不能访问父类的 private 成员</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    /*</span></span>
<span class="line"><span style="color:#6A737D;">    public:</span></span>
<span class="line"><span style="color:#6A737D;">    int age;</span></span>
<span class="line"><span style="color:#6A737D;">protected:</span></span>
<span class="line"><span style="color:#6A737D;">    int b;</span></span>
<span class="line"><span style="color:#6A737D;">private:</span></span>
<span class="line"><span style="color:#6A737D;">    int c;</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#6A737D;">//公有继承方式，基类中是什么控制权限，继承到子类中也是什么控制权限</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#6A737D;">        /* 保护继承，将父类中共有的变成保护的，子类不能访问父类的 private 成员</span></span>
<span class="line"><span style="color:#6A737D;">protected:</span></span>
<span class="line"><span style="color:#6A737D;"> int age;</span></span>
<span class="line"><span style="color:#6A737D;">    int b;</span></span>
<span class="line"><span style="color:#6A737D;">private:</span></span>
<span class="line"><span style="color:#6A737D;">    int c;</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> d;</span></span>
<span class="line"><span style="color:#6A737D;">            /* 私有继承，将父类中所有成员变成私有的，子类不能访问父类的 private 成员，看继承之前的权限</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">private:</span></span>
<span class="line"><span style="color:#6A737D;">    int c;</span></span>
<span class="line"><span style="color:#6A737D;">     int age;</span></span>
<span class="line"><span style="color:#6A737D;">    int b;</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对象构造和析构调用原则</p></li><li><p>创建子类对象时候，必须先创建出父类的对象，需要调用父类的构造函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">son</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Base</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#6F42C1;">son</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name</span><span style="color:#24292E;">): </span><span style="color:#6F42C1;">Base</span><span style="color:#24292E;">(age,name)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//系统会先调用父类的构造函数，再是子类的构造函数。先析构</span></span>
<span class="line"><span style="color:#6A737D;">//如果子类和父类又同名的成员变量或者函数，父类的成员会被隐藏，访问的是子类的成员</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>继承中的静态成员特性，如果子类与父类有同名的静态成员变量或函数，父类的同名的静态成员变量或函数会被隐藏。</p></li><li><p>多继承</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">class C:public A, public B</span></span>
<span class="line"><span style="color:#24292e;">{}</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>菱形继承和虚继承</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sheep</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span><span style="color:#6A737D;"> //虚继承</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">}; </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">camel</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> camel_num;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shenshou</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sheep</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">camel</span><span style="color:#6A737D;"> //这边的 age 只会从 animal 继承</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    shenshou p;</span></span>
<span class="line"><span style="color:#24292E;">    p.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>cl /d1 reportSingleClassLayoutanimal file.cpp</li></ul><p>虚继承后，类中储存 Virtural base ptr, 指向 VBtable</p><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h3><p>一种接口多种形态</p><ul><li>父类有虚函数</li><li>必须发生继承</li><li>子类重写虚函数，参数，函数名要一致</li><li>父类的指针或引用指向子类的对象</li></ul><p>静态多态：编译时，调用的地址已经绑定（静态联编）</p><p>动态多态：运行时才确定需要调用的地址</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dog</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#6A737D;">//如果两个类发生了继承，父类和子类编译器会自动转换</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dowork</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    obj.</span><span style="color:#6F42C1;">speak</span><span style="color:#24292E;">();</span><span style="color:#6A737D;"> //地址早绑定</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    animal p1;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">dowork</span><span style="color:#24292E;">(p1);</span></span>
<span class="line"><span style="color:#24292E;">    dog p2;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">dowork</span><span style="color:#24292E;">(p2);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//如果：</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">speak</span><span style="color:#24292E;">(){}        </span></span>
<span class="line"><span style="color:#24292E;">}    </span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dog</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public :</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">speak</span><span style="color:#24292E;">(){}</span><span style="color:#6A737D;"> //重写虚函数，函数名一致</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dowork</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">ogj</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    obj.</span><span style="color:#6F42C1;">speak</span><span style="color:#24292E;">();</span><span style="color:#6A737D;"> //地址晚绑定，动态多态</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开发时 对源码的修改是关闭的 对扩展是开放的</li><li>多态实现增添计算机功能</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cal</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mycal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mycal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">do_work</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">cal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">mycal</span><span style="color:#24292E;">(a,b);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    add p1;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">do_work</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,p1);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>抽象基类和纯虚函数</li></ul><p>有纯虚函数的类 叫做抽象类 抽象类不能实例出例子， 子类继承了抽象类，如果子类没有重写虚函数，那么这个子类也是抽象类</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mycal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //纯虚函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="虚析构函数" tabindex="-1"><a class="header-anchor" href="#虚析构函数" aria-hidden="true">#</a> 虚析构函数</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">animal </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> dog;</span></span>
<span class="line"><span style="color:#24292E;">    p-&gt;</span><span style="color:#6F42C1;">speak</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> p;</span><span style="color:#6A737D;"> //这边调用的是父类的析构函数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果再父类析构函数加上 virtual，变成虚析构函数，再调用基类的析构函数之前会先调用子类的析构函数。</p><ul><li>纯虚析构：虚析构函数等于 0。同纯虚函数</li></ul><h3 id="重写-重载-重定义" tabindex="-1"><a class="header-anchor" href="#重写-重载-重定义" aria-hidden="true">#</a> 重写 重载 重定义</h3><p>重载：</p><ul><li>函数名相同</li><li>作用域</li><li>桉树的各户，顺序，类型不一致</li><li>const 也可以称为重载的条件</li></ul><p>重定义</p><ul><li>发生继承</li><li>子类和父类有同名的函数和变量父类中的同名的变量和函数都会被隐藏</li></ul><p>重写</p><ul><li>父类中有虚函数</li><li>发生了继承</li><li>子类重写了虚函数，函数名返回值参数一致</li></ul>`,109);function b(m,A){const a=p("ExternalLinkIcon");return e(),o("div",null,[y,s("blockquote",null,[d,v,s("p",null,[n("笔记总结 课程链接："),s("a",E,[n("千峰嵌入式教程"),c(a)])])]),r("more"),u])}const h=l(t,[["render",b],["__file","笔记Cplusplus.html.vue"]]);export{h as default};
