import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c,a as s,b as n,d as l,f as e}from"./app-af903ae7.js";const i={},t=s("h1",{id:"sanic",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sanic","aria-hidden":"true"},"#"),n(" sanic")],-1),d=s("p",null,[n("sanic 因为 Sanic 不仅仅是一个 "),s("strong",null,"框架"),n(" ，它还是一个 "),s("strong",null,"Web 服务器"),n(" 。网上对他的标签有：异步，快，开发效率高等")],-1),y={href:"https://github.com/mekicha/awesome-sanic",target:"_blank",rel:"noopener noreferrer"},u={href:"https://sanic.dev/zh/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://sanic.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},h=e(`<h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sanic</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sanic 旨在提高性能、灵活性和易用性。 写一个简单的 api 服务（官方推荐在 server.py 中来实例化你的 app）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># server.py</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sanic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Sanic</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sanic.response </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> text</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Sanic(</span><span style="color:#032F62;">&quot;MyHelloWorldApp&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> text(</span><span style="color:#032F62;">&quot;Hello, world.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>除非有特殊目的，请尽量使用 <code>async</code> 来声明响应函数。 <strong>必须</strong> 使用 <code>Response</code> 或继承自 <code>Response</code> 的类作为响应类型。不能直接 <code>return something</code></p></div><p>sanic 可以用于生产环境：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">sanic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.app</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h2>`,8),b={href:"https://sanic.dev/zh/plugins/sanic-ext/getting-started.html",target:"_blank",rel:"noopener noreferrer"},m=e(`<ul><li><strong>OpenAPI</strong> 使用 Redoc 和/或 Swagger 的文档</li><li><strong>CORS</strong> 保护</li><li><strong>依赖注入</strong> 路由处理程序</li><li>Request 参数 <strong>检查</strong></li><li>自动创建 <code>HEAD</code>, <code>OPTIONS</code>, 和 <code>TRACE</code> 响应函数</li><li>响应序列化</li></ul><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">pip install sanic[ext]</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h2><h3 id="注册表" tabindex="-1"><a class="header-anchor" href="#注册表" aria-hidden="true">#</a> 注册表</h3><p>可以在其他 py 文件中，通过注册表的方式获得对应的 app 实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># ./path/to/server.py</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sanic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Sanic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Sanic(</span><span style="color:#032F62;">&quot;my_awesome_server&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># ./path/to/somewhere_else.py</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sanic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Sanic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Sanic.get_app(</span><span style="color:#032F62;">&quot;my_awesome_server&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3>`,8),E={href:"https://sanic.dev/zh/guide/deployment/configuration.html",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>添加 sanic 配置可以通过：</p><ol><li><p>直接赋值：<code>app.config.DB_NAME = &quot;appdb&quot;</code></p></li><li><p>通过系统环境变量赋值：</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> SANIC_REQUEST_TIMEOUT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#6A737D;">#  python 中 print(app.config.REQUEST_TIMEOUT)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>通过 python 字典：<code>app.update_config({&quot;A&quot;: 1, &quot;B&quot;: 2})</code></p></li><li><p>通过 python 类：</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyConfig</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    A </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    B </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.update_config(MyConfig)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>通过 python 文件：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">app.update_config(</span><span style="color:#032F62;">&quot;/path/to/my_config.py&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>my_config.py</code> 中定义好要配置的变量，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># my_config.py</span></span>
<span class="line"><span style="color:#24292E;">A </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">B </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的配置有：</p><p>请求超时设置：<code> app.config.RESPONSE_TIMEOUT = response_timeout</code></p><p>CORS 配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configure_cors</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    app: Sanic, cors_origins: Union[Text, List[Text], </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*&quot;</span></span>
<span class="line"><span style="color:#24292E;">) -&gt; </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Configure CORS origins for the given app.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Workaround so that socketio works with requests from other origins.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># https://github.com/miguelgrinberg/python-socketio/issues/205#issuecomment-493769183</span></span>
<span class="line"><span style="color:#24292E;">    app.config.</span><span style="color:#005CC5;">CORS_AUTOMATIC_OPTIONS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    app.config.</span><span style="color:#005CC5;">CORS_SUPPORTS_CREDENTIALS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    app.config.</span><span style="color:#005CC5;">CORS_EXPOSE_HEADERS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;filename&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CORS(</span></span>
<span class="line"><span style="color:#24292E;">        app, </span><span style="color:#E36209;">resources</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;/</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&quot;origins&quot;</span><span style="color:#24292E;">: cors_origins </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">}}, </span><span style="color:#E36209;">automatic_options</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应函数-handlers" tabindex="-1"><a class="header-anchor" href="#响应函数-handlers" aria-hidden="true">#</a> 响应函数 Handlers</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> text(</span><span style="color:#032F62;">&quot;Hello, world.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>除非有特殊目的，请尽量使用 <code>async</code> 来声明响应函数。 <strong>必须</strong> 使用 <code>Response</code> 或继承自 <code>Response</code> 的类作为响应类型。不能直接 <code>return something</code></p></div><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h3><p>响应函数接收 request 参数，可以通过以下方式接收不同类型的请求参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">request.json  </span><span style="color:#6A737D;"># 接收 json 对象</span></span>
<span class="line"><span style="color:#24292E;">request.body  </span><span style="color:#6A737D;"># 接收 raw 对象</span></span>
<span class="line"><span style="color:#24292E;">request.form  </span><span style="color:#6A737D;"># 接收表单对象， 用 .get 方法获取表单内容</span></span>
<span class="line"><span style="color:#24292E;">request.file  </span><span style="color:#6A737D;"># 接收文件对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上下文-context" tabindex="-1"><a class="header-anchor" href="#上下文-context" aria-hidden="true">#</a> 上下文 Context</h3><h4 id="请求上下文-request-context" tabindex="-1"><a class="header-anchor" href="#请求上下文-request-context" aria-hidden="true">#</a> 请求上下文(Request context)</h4><p>具体查看中间件(Middleware)</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.middleware</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;request&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run_before_handler</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    request.ctx.user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> fetch_user_by_token(request.token)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/hi&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hi_my_name_is</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> text(</span><span style="color:#032F62;">&quot;Hi, my name is </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(request.ctx.user.name))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="连接上下文-connection-context" tabindex="-1"><a class="header-anchor" href="#连接上下文-connection-context" aria-hidden="true">#</a> 连接上下文(Connection context)</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.on_request</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment_foo</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(request.conn_info.ctx, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        request.conn_info.ctx.foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    request.conn_info.ctx.foo </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count_foo</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> text(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;request.conn_info.ctx.foo=</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">request.conn_info.ctx.foo</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应-response" tabindex="-1"><a class="header-anchor" href="#响应-response" aria-hidden="true">#</a> 响应 Response</h3><p>sanic 内置的响应方式包括返回文本， html，json，文件，streaming，raw 等方式。在 <code>sanic.response</code> 中查看</p><h3 id="路由-routing" tabindex="-1"><a class="header-anchor" href="#路由-routing" aria-hidden="true">#</a> 路由 Routing</h3><p>常用的路由方式如 <code>@app.post()</code>, <code>@app.get()</code> 等。路由支持传参</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/foo/&lt;foo_id:uuid&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uuid_handler</span><span style="color:#24292E;">(request, foo_id: </span><span style="color:#005CC5;">UUID</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> text(</span><span style="color:#032F62;">&quot;UUID - </span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">.format(foo_id))</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),f=s("code",null,"str, int, float, path, uuid",-1),C={href:"https://sanic.dev/zh/guide/basics/routing.html#%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0-path-parameters",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>正则表达式案例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;/&lt;foo:</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">{3}</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">txt&gt;&quot;</span><span style="color:#24292E;">)                </span><span style="color:#6A737D;"># 全模式匹配</span></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;/&lt;foo:</span><span style="color:#005CC5;">([a-z]</span><span style="color:#D73A49;">{3}</span><span style="color:#005CC5;">).</span><span style="color:#032F62;">txt&gt;&quot;</span><span style="color:#24292E;">)              </span><span style="color:#6A737D;"># 定义单个匹配组</span></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;/&lt;foo:</span><span style="color:#005CC5;">(</span><span style="color:#22863A;">?P&lt;foo&gt;</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">{3}</span><span style="color:#005CC5;">).</span><span style="color:#032F62;">txt&gt;&quot;</span><span style="color:#24292E;">)       </span><span style="color:#6A737D;"># 定义单个命名匹配组</span></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;/&lt;foo:</span><span style="color:#005CC5;">(</span><span style="color:#22863A;">?P&lt;foo&gt;</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">{3}</span><span style="color:#005CC5;">).(?:</span><span style="color:#032F62;">txt</span><span style="color:#005CC5;">)</span><span style="color:#032F62;">&gt;&quot;</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;"># 用一个或多个不匹配组定义单个命名匹配组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如要提取 <code>/image/123456789.jpg</code> 中的数字作为参数，可以使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">app.route(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;/image/&lt;img_id:</span><span style="color:#005CC5;">(</span><span style="color:#22863A;">?P&lt;img_id&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">)</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">jpg&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="监听器-listeners" tabindex="-1"><a class="header-anchor" href="#监听器-listeners" aria-hidden="true">#</a> 监听器 Listeners</h3><p>支持在以下 8 个 server 运行节点进行监听和操作：</p><ul><li><code>main_process_start</code></li><li><code>main_process_stop</code></li><li><code>reload_process_start</code></li><li><code>reload_process_stop</code></li><li><code>before_server_start</code></li><li><code>after_server_start</code></li><li><code>before_server_stop</code></li><li><code>after_server_stop</code></li></ul><h3 id="中间件-middleware" tabindex="-1"><a class="header-anchor" href="#中间件-middleware" aria-hidden="true">#</a> 中间件 Middleware</h3>`,8),A={href:"https://sanic.dev/zh/guide/basics/middleware.html#%E5%90%AF%E7%94%A8-attaching-middleware",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.middleware</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;response&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prevent_xss</span><span style="color:#24292E;">(request, response):</span></span>
<span class="line"><span style="color:#24292E;">    response.headers[</span><span style="color:#032F62;">&quot;x-xss-protection&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1; mode=block&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.middleware</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;request&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleware_1</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;middleware_1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.middleware</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;request&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleware_2</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;middleware_2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.middleware</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;response&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleware_3</span><span style="color:#24292E;">(request, response):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;middleware_3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.middleware</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;response&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">middleware_4</span><span style="color:#24292E;">(request, response):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;middleware_4&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/handler&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;~ handler ~&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> text(</span><span style="color:#032F62;">&quot;Done.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sanic 中的 HTTP 流执行的顺序为：接收请求，request 中间件，response 中间件，响应函数。因此请求 <code>/handler</code> 时候，日志端会打印：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">middleware_1</span></span>
<span class="line"><span style="color:#24292E;">middleware_2</span></span>
<span class="line"><span style="color:#D73A49;">~</span><span style="color:#24292E;"> handler </span><span style="color:#D73A49;">~</span></span>
<span class="line"><span style="color:#24292E;">middleware_4</span></span>
<span class="line"><span style="color:#24292E;">middleware_3</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">INFO</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">127.0</span><span style="color:#24292E;">.0.1:</span><span style="color:#005CC5;">44788</span><span style="color:#24292E;">]: </span><span style="color:#005CC5;">GET</span><span style="color:#24292E;"> http:</span><span style="color:#D73A49;">//</span><span style="color:#24292E;">localhost:</span><span style="color:#005CC5;">8000</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">handler  </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后台任务" tabindex="-1"><a class="header-anchor" href="#后台任务" aria-hidden="true">#</a> 后台任务</h3><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    input_channels: List[</span><span style="color:#032F62;">&quot;InputChannel&quot;</span><span style="color:#24292E;">], app: Sanic, route: Optional[Text]</span></span>
<span class="line"><span style="color:#24292E;">) -&gt; </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Registers input channel blueprints with Sanic.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(message: UserMessage) -&gt; </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> app.ctx.agent.handle_message(message)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> channel </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> input_channels:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> route:</span></span>
<span class="line"><span style="color:#24292E;">            p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> urljoin(route, channel.url_prefix())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">        app.blueprint(channel.blueprint(handler), </span><span style="color:#E36209;">url_prefix</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    app.ctx.input_channels </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input_channels</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级" tabindex="-1"><a class="header-anchor" href="#高级" aria-hidden="true">#</a> 高级</h2><h3 id="蓝图-bluprint" tabindex="-1"><a class="header-anchor" href="#蓝图-bluprint" aria-hidden="true">#</a> 蓝图 Bluprint</h3><p>蓝图是应用中可以作为子路由的对象。蓝图定义了同样的添加路由的方式，您可以将一系列路由注册到蓝图上而不是直接注册到应用上，然后再以可插拔的方式将蓝图注册到到应用程序。</p><p>蓝图对于大型应用特别有用。在大型应用中，您可以将应用代码根据不同的业务分解成多个蓝图。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># ./my_blueprint.py</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sanic.response </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sanic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Blueprint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">bp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Blueprint(</span><span style="color:#032F62;">&quot;my_blueprint&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@bp.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bp_root</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> json({</span><span style="color:#032F62;">&quot;my&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;blueprint&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sanic </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Sanic</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> my_blueprint </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> bp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Sanic(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">app.blueprint(bp)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function D(x,F){const a=o("ExternalLinkIcon");return r(),c("div",null,[t,d,s("p",null,[s("a",y,[n("awesome sanic"),l(a)]),n(),s("a",u,[n("中文用户指南"),l(a)]),n(),s("a",v,[n("API doc"),l(a)])]),h,s("p",null,[s("a",b,[n("Sanic Extensions"),l(a)]),n(" 包括了各种易用的功能：")]),m,s("p",null,[s("a",E,[n("官方文档"),l(a)])]),g,s("p",null,[n("参数类型包括 "),f,n(" 等。可以通过正则表达式来自定义自己想要的参数类型 "),s("a",C,[n("官方指南"),l(a)])]),_,s("p",null,[s("a",A,[n("文档"),l(a)]),n(" 。中间件支持在 http 流的生命周期中挂载额外功能。以下为中间件响应的函数：")]),q])}const S=p(i,[["render",D],["__file","笔记sanic.html.vue"]]);export{S as default};
