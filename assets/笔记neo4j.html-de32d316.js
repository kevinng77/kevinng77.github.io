import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as r,a as s,b as e,d as a,e as t,f as l}from"./app-8cb4cedc.js";const i={},d={href:"https://neo4j.com/",target:"_blank",rel:"noopener noreferrer"},u=s("p",null,"Neo4j 采用属性图模型（每个节点都有唯一标识符，节点与关系下储存有对应的属性与属性值键值对。节点之间使用关系链接，类似于 ER 图。）",-1),y=s("h2",{id:"安装搭建",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装搭建","aria-hidden":"true"},"#"),e(" 安装搭建")],-1),v={href:"https://neo4j.com/download-center/#community",target:"_blank",rel:"noopener noreferrer"},h=l('<p>解压后安装服务 <code>&lt;NEO4J_HOME&gt;/bin/neo4j install-service</code>，在后台启动服务：</p><p><code>&lt;NEO4J_HOME&gt;/bin/neo4j start</code></p><p>浏览器访问 <code>localhost:7474</code>，首次访问会弹出登录界面，默认用户名与密码为 <code>neo4j</code>。</p><p>网页由多个命令框组成，顶部命令框中 <code>neo4j$</code> 表示目前正在使用 <code>neo4j</code> 数据库，命令都以 <code>:</code> 开头，一些常用与命令框的快捷键有： <code>ctrl+ Enter</code> 执行代码行，<code>ctrl + up-arrow/down-arrow</code> 查看上/下一条执行的代码。<code>F1</code> 查看更多快捷键。</p><p>可以点击命令框最右侧的星来收藏框中的命令。</p><p>可以将查询结果与代码等保存成 Cypher 文件，并储存与项目对应的仓库中，其他项目成员也可以访问到他们。</p><h2 id="cypher" tabindex="-1"><a class="header-anchor" href="#cypher" aria-hidden="true">#</a> Cypher</h2>',7),m=s("code",null,"CREATE",-1),b=s("code",null,"MATCH",-1),E=s("code",null,"RETURN",-1),g=s("code",null,"WHERE",-1),f=s("code",null,"DELETE",-1),_=s("code",null,"REMOVE",-1),x=s("code",null,"ORDER BY",-1),A=s("code",null,"SET",-1),C={href:"https://neo4j.com/docs/cypher-manual/current/clauses/",target:"_blank",rel:"noopener noreferrer"},k=l(`<h4 id="create-与-match" tabindex="-1"><a class="header-anchor" href="#create-与-match" aria-hidden="true">#</a> CREATE 与 MATCH</h4><p>通常使用 <code>()</code> 表示节点，<code>[]</code> 表示关系。</p><p>创建一个节点 <code>ee</code>，节点 <code>name</code> 为 &quot;张三&quot; ，标签为 <code>Person</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">CREATE (ee:Person {name:&#39;张三&#39;,属性 2:&#39;属性 2 值&#39;})</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>MATCH</code> 查找对应的节点，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">MATCH (ee:Person) WHERE ee.name = &#39;张三&#39; RETURN ee;</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>ee</code> 为临时变量，用来代表节点搜查结果。随后建立张三住在北京的关系：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">match (c:Person) where c.name=&quot;张三&quot;</span></span>
<span class="line"><span style="color:#24292e;">CREATE(a:location {name:&quot;北京&quot;}),</span></span>
<span class="line"><span style="color:#24292e;">(b:location {name:&quot;上海&quot;}),</span></span>
<span class="line"><span style="color:#24292e;">(n:Person {name:&quot;李四&quot;}) ,</span></span>
<span class="line"><span style="color:#24292e;">(n)-[:住在 {since:2001}]-&gt;(a),</span></span>
<span class="line"><span style="color:#24292e;">(n)-[:住在 {since:2011}]-&gt;(b),</span></span>
<span class="line"><span style="color:#24292e;">(c)-[:住在 {since:1999}]-&gt;(a)</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>[]</code>表示关系，此处关系也可以写成<code>(b)&lt;-[:住在 {since:2011}]-(n)</code>；查找和张三住一个地方的人：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">MATCH (a:Person)-[]-&gt;(location)&lt;-[]-(c:Person) return a,c,location</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时 match 支持正则表达式（语法如：<code>where n.name=~&quot;.*三&quot;</code>） 。也可以根据关系搜索：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">match p=()-[c:relation]-() return p</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询所有有对外关系的节点：<code>MATCH (a)--&gt;() RETURN a</code>；查询所有有关系的节点<code>MATCH (a)--() RETURN a</code></p><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> DELETE</h3><p>删除节点前需要修改节点属性：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">MATCH (a:Person {name:&#39;张三&#39;}) SET a.test=&#39;test&#39;</span></span>
<span class="line"><span style="color:#24292e;">MATCH (a:Person {name:&#39;张三&#39;}) REMOVE a.test</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除所有节点与关系</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">MATCH (n) DETACH DELETE n</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="load-csv" tabindex="-1"><a class="header-anchor" href="#load-csv" aria-hidden="true">#</a> LOAD CSV</h4><p>加载 csv 文件中的数据，csv 文件需要是 UTF-8 编码。导入后使用 <code>line[i]</code> 来索引需要的列。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">LOAD CSV FROM &#39;file:///sample.csv&#39; as line</span></span>
<span class="line"><span style="color:#24292e;">create (:person {name:line[0]})</span></span>
<span class="line"><span style="color:#24292e;">或</span></span>
<span class="line"><span style="color:#24292e;">LOAD CSV WITH HEADERS FROM &#39;file:///sample.csv&#39; as line</span></span>
<span class="line"><span style="color:#24292e;">create (:person {name:line.name})</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上例，CSV 文件应放置于 <code>&lt;NEO4J_HOME&gt;/data/csv/sample.csv</code>。</p><p>通过导入存有 RDF 三元组的文件来导入节点关系：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">USING PERIODIC COMMIT LOAD CSV FROM &#39;file:///rdf.csv&#39; as line</span></span>
<span class="line"><span style="color:#24292e;">create (:myrelation {subject:line[0],relation:line[1],object:line[2]})</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>USING PERIODIC COMMIT </code> 使 neo4j 在加载一定数据后 commit 一次，常用于载入大文件。在导入数据后，对两个数据集的内容进行匹配，建立节点关系：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">match (n:person),(m:relation),(s:person) where n.name=m.subject and m.object=s.name</span></span>
<span class="line"><span style="color:#24292e;">create (n)-[r:关系 {relation:m.relation}]-&gt;(s)</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> INDEX</h4><p>创建索引可加快检索速度</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">CREATE INDEX ON :label(property)</span></span>
<span class="line"><span style="color:#24292e;">CREATE INDEX ON :person(name)</span></span>
<span class="line"><span style="color:#24292e;">DROP INDEX ON :person(name)</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unique" tabindex="-1"><a class="header-anchor" href="#unique" aria-hidden="true">#</a> UNIQUE</h4><p>确保数据库中 <code>person.name</code>是唯一的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">CREATE CONSTRAINT ON (n:Person) ASSERT (n.name) IS UNIQUE</span></span>
<span class="line"><span style="color:#24292e;">DROP CONSTRAINT ON (n:Person) ASSERT (n.name) IS UNIQUE</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据回复与备份" tabindex="-1"><a class="header-anchor" href="#数据回复与备份" aria-hidden="true">#</a> 数据回复与备份</h2><p>备份需要关闭 neo4j 服务。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">neo4j stop</span></span>
<span class="line"><span style="color:#24292e;">neo4j-admin dump --database=neo4j --to=backup/1.dump</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还原时仍需要关闭 neo4j 服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">bin/neo4j-admin load --from=backup/1.dump --database=new.db --force</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="插件安装" tabindex="-1"><a class="header-anchor" href="#插件安装" aria-hidden="true">#</a> 插件安装</h2>`,38),D={href:"https://neo4j.com/labs/apoc/",target:"_blank",rel:"noopener noreferrer"},j=s("strong",null,"APOC 安装：",-1),q={href:"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases",target:"_blank",rel:"noopener noreferrer"},T=s("p",null,[e("重启 neo4j 后，输入 "),s("code",null,"return apoc.version()"),e(" 验证是否安装成功。")],-1),N={href:"https://downloads.mysql.com/archives/c-j/",target:"_blank",rel:"noopener noreferrer"},O=s("code",null,"mysql-connector-java-8.0.26.jar",-1),R=l(`<p><code>apoch.load.jdbc</code> 加载 MySQL 数据库时，使用<code>row.col_name</code> 选择。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">call apoc.load.jdbc(&#39;jdbc:mysql://{IP}:{PORT}/{DBNAME}? user={USERNAME}&amp;password={PASSWORD} &quot;,&quot;{TABLENAME}&quot;) yield row</span></span>
<span class="line"><span style="color:#24292e;">create (b:Black{number:row.black_id, type:row.type})</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="py2neo" tabindex="-1"><a class="header-anchor" href="#py2neo" aria-hidden="true">#</a> py2neo</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> py2neo </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Graph</span></span>
<span class="line"><span style="color:#24292E;">graph </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Graph(</span><span style="color:#032F62;">&quot;http://localhost:7687&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">auth</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;neo4j&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建带有属性的节点</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> py2neo </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Graph,Node</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_diseases_nodes</span><span style="color:#24292E;">(self, disease_infos):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> disease_dict </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> disease_infos:</span></span>
<span class="line"><span style="color:#24292E;">        node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Node(</span><span style="color:#E36209;">label</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Disease&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">desc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;desc&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">prevent</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;prevent&#39;</span><span style="color:#24292E;">] ,</span><span style="color:#E36209;">cause</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;cause&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#E36209;">easy_get</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;easy_get&#39;</span><span style="color:#24292E;">],</span><span style="color:#E36209;">cure_lasttime</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;cure_lasttime&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#E36209;">cure_department</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;cure_department&#39;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">cure_way</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;cure_way&#39;</span><span style="color:#24292E;">] , </span><span style="color:#E36209;">cured_prob</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">disease_dict[</span><span style="color:#032F62;">&#39;cured_prob&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.g.create(node)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建关系</strong> - 使用 <code>Graph.run(query)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_relationship</span><span style="color:#24292E;">(self, start_node, end_node, edges, rel_type, rel_name):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 去重处理</span></span>
<span class="line"><span style="color:#24292E;">    set_edges </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> edge </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> edges:</span></span>
<span class="line"><span style="color:#24292E;">        set_edges.append(</span><span style="color:#032F62;">&#39;###&#39;</span><span style="color:#24292E;">.join(edge))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">all</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(set_edges))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> edge </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(set_edges):</span></span>
<span class="line"><span style="color:#24292E;">        edge </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> edge.split(</span><span style="color:#032F62;">&#39;###&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> edge[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> edge[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;match(p:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">),(q:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">) where p.name=&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;and q.name=&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39; create (p)-[rel:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">{name:&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;}]-&gt;(q)&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">            start_node, end_node, p, q, rel_type, rel_name)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.g.run(query)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># self.create_relationship(&#39;Disease&#39;, &#39;Food&#39;, rels_doeat, &#39;do_eat&#39;, &#39;宜吃&#39;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询的方式类似：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;MATCH (m:Disease) where m.name = &#39;苯中毒&#39; return m.name, m.cause&quot;</span></span>
<span class="line"><span style="color:#24292E;">ress </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.g.run(query).data()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>`,11),F={href:"https://neo4j.com/labs/apoc/4.1/overview/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://neo4j.com/docs/operations-manual/current/installation/linux/debian/#debian-ubuntu-prerequisites",target:"_blank",rel:"noopener noreferrer"},P=l(`<h4 id="ubuntu18-04-上安装-jdk11" tabindex="-1"><a class="header-anchor" href="#ubuntu18-04-上安装-jdk11" aria-hidden="true">#</a> ubuntu18.04+上安装 jdk11</h4><p><code>apt-get install default-jdk</code> 安装好后，<code>jave -version</code> 检查。</p><p>处理多个 java 版本问题：<code>update-java-alternatives --list</code> 显示已安装的版本，</p><p><code>sudo update-java-alternatives --jre --set &lt;java11name&gt;</code> 指定 java 版本</p><h4 id="docker-运行" tabindex="-1"><a class="header-anchor" href="#docker-运行" aria-hidden="true">#</a> docker 运行：</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">docker pull neo4j:community</span></span>
<span class="line"><span style="color:#24292e;">docker run \\</span></span>
<span class="line"><span style="color:#24292e;">    -p 7474:7474 \\</span></span>
<span class="line"><span style="color:#24292e;">    -p 7687:7687 \\</span></span>
<span class="line"><span style="color:#24292e;">    -p 7473:7473 \\</span></span>
<span class="line"><span style="color:#24292e;">    -v $HOME/neo4j/data:/data \\</span></span>
<span class="line"><span style="color:#24292e;">    neo4j:community</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最短路径查询：(<code>*..10</code> 表示限定 10 跳内)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">match (p1:Person{name:&quot;Joel Silver&quot;}),(p2:Person{name:&quot;Emil Eifrem&quot;}),p=shortestpath((p1)-[*..10]-(p2)) return p1, p2, p</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8);function S(I,w){const n=p("ExternalLinkIcon");return c(),r("div",null,[s("blockquote",null,[s("p",null,[e("Neo4j 安装搭建、基础 Cypher 语法。大部分内容参考与 Neo4j "),s("a",d,[e("官网"),a(n)]),e("。")])]),t("more"),u,y,s("p",null,[s("a",v,[e("neo4j 下载中心"),a(n)]),e(" 选择需要的版本，Neo4j 4.4，需要 jdk11。")]),h,s("p",null,[e("常用命令有 "),m,e(", "),b,e(", "),E,e(", "),g,e(", "),f,e(", "),_,e(", "),x,e(", "),A,e(" 等 "),s("a",C,[e("查看官网详细文档"),a(n)]),e("。")]),k,s("p",null,[e("APOC（Awesome Procedures On Cypher） APOC 可以提供 文本索引、图算法、空间函数 、数据集成、图形重构、触发器等功能 "),s("a",D,[e("APOC 详细"),a(n)]),e("。")]),s("p",null,[j,e(" 从 "),s("a",q,[e("apoc release"),a(n)]),e(" 下载对应版本 xx-all.jar 包，放置于 neo4j plugins 文件夹下。")]),T,s("p",null,[e("要实现与 MySQL 数据库链接的话，需要安装 MySQL connector 插件。从 "),s("a",N,[e("页面"),a(n)]),e(" 下载 Platform Independent 对应文件，解压出其中的 "),O,e(" 放置于 neo4j plugins 文件夹。")]),R,s("p",null,[s("a",F,[e("APOC 函数"),a(n)])]),s("p",null,[s("a",M,[e("Debian/Ubuntu 下安装 Neo4j server"),a(n)])]),P])}const L=o(i,[["render",S],["__file","笔记neo4j.html.vue"]]);export{L as default};
