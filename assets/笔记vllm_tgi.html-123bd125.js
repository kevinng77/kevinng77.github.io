import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c as r,a as n,b as s,d as l,f as e}from"./app-29ce8251.js";const c={},i=e(`<p>LLM 高并发部署是个难题，具备高吞吐量的服务，能够让用户有更好的体验（比如模型生成文字速度提升，用户排队时间缩短）。本文对 vllm 和 TGI 两个开源方案进行了实践测试，并整理了一些部署的坑。</p><p>测试环境：单卡 4090 + i9-13900K。限制于设备条件，本文仅对单卡部署 llama v2 7B 模型进行了测试。</p><p><strong>小结：</strong> TGI (0.9.3) 优于 vllm (v0.1.2)。最新版本的 TGI 在加入了 PagedAttention 之后，吞吐量和 vllm 差不多。</p><h2 id="vllm" tabindex="-1"><a class="header-anchor" href="#vllm" aria-hidden="true">#</a> <strong>vllm</strong></h2><p>github: https://github.com/vllm-project/vllm/tree/main</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> <strong>安装</strong></h3><p>根据官方指南安装，可能出现各种问题（网络、依赖问题等）。笔者最终采用了以下 dockerfile 进行构建：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">ARG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CUDA_VERSION=&quot;11.8.0&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">ARG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CUDNN_VERSION=&quot;8&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">ARG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UBUNTU_VERSION=&quot;22.04&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Base NVidia CUDA Ubuntu image</span></span>
<span class="line"><span style="color:#6F42C1;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nvidia/cuda:</span><span style="color:#24292E;">$CUDA_VERSION</span><span style="color:#032F62;">-cudnn</span><span style="color:#24292E;">$CUDNN_VERSION</span><span style="color:#032F62;">-devel-ubuntu</span><span style="color:#24292E;">$UBUNTU_VERSION </span><span style="color:#032F62;">AS</span><span style="color:#24292E;"> </span><span style="color:#032F62;">base</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">EXPOSE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#032F62;">/tcp</span></span>
<span class="line"><span style="color:#6F42C1;">EXPOSE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8000</span><span style="color:#032F62;">/tcp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">USER</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span></span>
<span class="line"><span style="color:#6A737D;"># Install Python plus openssh, which is our minimum set of required packages.</span></span>
<span class="line"><span style="color:#6A737D;"># Install useful command line utility software</span></span>
<span class="line"><span style="color:#6F42C1;">ARG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">APTPKGS=&quot;zsh sudo wget tmux nvtop vim neovim curl rsync less&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">RUN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python3-pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python3-venv</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--no-install-recommends</span><span style="color:#24292E;"> </span><span style="color:#032F62;">openssh-server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">openssh-client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git-lfs</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--upgrade</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--no-install-recommends</span><span style="color:#24292E;"> $APTPKGS &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clean</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/lib/apt/lists/</span><span style="color:#005CC5;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PATH=&quot;/usr/local/cuda/bin:\${</span><span style="color:#24292E;">PATH</span><span style="color:#032F62;">}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ARG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">USERNAME=vllm</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">USERNAME=</span><span style="color:#24292E;">$USERNAME</span></span>
<span class="line"><span style="color:#6F42C1;">ARG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">VOLUME=/workspace</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">VOLUME=</span><span style="color:#24292E;">$VOLUME</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Create user, change shell to ZSH, make a volume which they own</span></span>
<span class="line"><span style="color:#6F42C1;">RUN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">useradd</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> $USERNAME &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">chsh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/bin/zsh</span><span style="color:#24292E;"> $USERNAME &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$VOLUME</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">chown</span><span style="color:#24292E;"> $USERNAME</span><span style="color:#032F62;">:</span><span style="color:#24292E;">$USERNAME </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$VOLUME</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">usermod</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-aG</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> $USERNAME &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">$USERNAME</span><span style="color:#032F62;"> ALL=(ALL) NOPASSWD:ALL&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/sudoers.d/90-docker-users</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">USER</span><span style="color:#24292E;"> $USERNAME</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HOME=/home/</span><span style="color:#24292E;">$USERNAME</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PATH=</span><span style="color:#24292E;">$HOME</span><span style="color:#032F62;">/.local/bin:</span><span style="color:#24292E;">$PATH</span></span>
<span class="line"><span style="color:#6F42C1;">WORKDIR</span><span style="color:#24292E;"> $HOME</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TORCH_CUDA_ARCH_LIST=&quot;8.0;8.6+PTX;8.9;9.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 你可以考虑添加 pip 清华源或其他国内 pip 源</span></span>
<span class="line"><span style="color:#6F42C1;">RUN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/vllm-project/vllm.git</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vllm</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pip3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pip3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ray</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.5</span><span style="color:#032F62;">.1</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">\\</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pip3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git+https://github.com/huggingface/transformers</span><span style="color:#24292E;"> </span><span style="color:#032F62;">accelerate==</span><span style="color:#005CC5;">0.21</span><span style="color:#032F62;">.0</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pip3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">purge</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),d={href:"https://github.com/vllm-project/vllm/issues/537",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kevinng77/vllm</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> <strong>快速开始</strong></h3><ol><li>除了安装 vllm 外，我们需要 vllm 官方 github 上的一些测试代码：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/vllm-project/vllm.git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">--runtime=nvidia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--gpus=all</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--net=host</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name=vllm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./vllm:/workspace/vllm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kevinng77/vllm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>启动模型服务</li></ol><p>我们使用 LLaMa v2 进行测试部署：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># cd /workspace/vllm</span></span>
<span class="line"><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vllm.entrypoints.api_server</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--model</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/models/Llama-2-7b-chat-hf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--swap-space</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--disable-log-requests</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--host</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--max-num-seqs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多参数可以在 vllm/engine/arg_utils.py 找到，其中比较重要的有：</p><ul><li>max-num-seqs：默认 256，当 max-num-seqs 比较小时，较迟接收到的 request 会进入 waiting_list，直到前面有 request 结束后再被添加进生成队列。当 max-num-seqs 太大时，会出现一部分 request 在生成了 3-4 个 tokens 之后，被加入到 waiting_list（有些用户出现生成到一半卡住的情况）。过大或过小的 max-num-seqs 都会影响用户体验。</li><li>max-num-batched-tokens： <strong>很重要的配置</strong> ，比如你配置了 max-num-batched-tokens=1000 那么你大概能在一个 batch 里面处理 10 条平均长度约为 100 tokens 的 inputs。max-num-batched-tokens 应尽可能大，来充分发挥 continuous batching 的优势。不过似乎（对于 TGI 是这样，vllm 不太确定），在提供 HF 模型时，该 max-num-batched-tokens 能够被自动推导出来。</li></ul><p>部署后，发送 post 请求到 http://{host}:{port}/generate ，body 为 ：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;prompt&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Once a upon time,&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;max_tokens&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">output_len</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;stream&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;top_p&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1.0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其他参数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),u={href:"https://github.com/vllm-project/vllm/blob/main/vllm/entrypoints/openai/api_server.py#L33",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vllm.entrypoints.openai.api_server</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">--model</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/models/Llama-2-7b-chat-hf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">--disable-log-requests</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--host</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5001</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--max-num-seqs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--served-model-name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">llama-2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一些碎碎念" tabindex="-1"><a class="header-anchor" href="#一些碎碎念" aria-hidden="true">#</a> <strong>一些碎碎念</strong></h3><ul><li>采用 stream: true 进行 steaming 请求时，vllm 提供的默认 API 每次的回复并不是新预测的单词，而是目前所有已预测的全部文本内容（history_tokens + new_tokens），这导致回复的内容中包含很多冗余的信息。</li><li>当前 vllm 版本（v0.1.2）加载 *.safetensor 模型时存在问题，请尽量加载 *.bin 格式的模型。对于文件夹下同时存放 bin 和 safetensor 权重时，vllm 优先加载 .bin 权重。</li><li>vllm 的 OpenAI-compatible API server 依赖 fschat 提供 prompt template，由于 LLM 更新进度快，如果遇到模型 prompt template 在 fschat 中未找到的情况（通常报错为 keyError），可以重新安装下 fschat 和 transformers。</li></ul>`,3),v={href:"https://zhuanlan.zhihu.com/p/638468472",target:"_blank",rel:"noopener noreferrer"},h=e('<ol><li>vllm 接收到 request 之后，会发放 request_uuid，并将 request 分配到 running, swap, waiting 三个队列当中。（参考 vllm.core.scheduler.Scheduler._schedule ）</li><li>根据用户等待的时间进行 request 优先级排序。从 running 和 swap 队列中选择优先级高的 request 来生成对应的回复，由于 decoding 阶段，每次前项传播只预测一个 token，因此 vllm 在进行完一次前项传播（即 one decoding iteration）之后，会返回所有新生成的 tokens 保存在每个 request_uuid 下。（参考 vllm.engine.llm_engine.LLMEngine.step）</li><li>如果 request 完成了所有的 decoding 步骤，那么将其移除，并返回结果给用户。</li><li>更新 running, swap 和 waiting 的 request。</li><li>循环执行 2,3,4。</li></ol><h2 id="text-generation-inference" tabindex="-1"><a class="header-anchor" href="#text-generation-inference" aria-hidden="true">#</a> <strong>Text Generation Inference</strong></h2><p>TGI github: https://github.com/huggingface/text-generation-inference</p><p>TGI 支持了：</p>',4),C=n("li",null,"和 vllm 类似的 continuous batching",-1),E={href:"https://github.com/HazyResearch/flash-attention",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/vllm-project/vllm",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/huggingface/safetensors",target:"_blank",rel:"noopener noreferrer"},F=n("li",null,"TGI 支持部署 GPTQ 模型服务，这使得我们可以在单卡上部署拥有 continous batching 功能的，更大的模型。",-1),f=n("li",null,"支持采用 Tensor Parallelism 部署多 GPU 服务，模型水印等其他功能",-1),k=e(`<h3 id="安装-1" tabindex="-1"><a class="header-anchor" href="#安装-1" aria-hidden="true">#</a> <strong>安装</strong></h3><p>如果想直接部署模型的话，建议通过 docker 安装，省去不必要的环境问题。目前 TGI 只提供了 0.9.3 的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ghcr.io/huggingface/text-generation-inference:0.9.3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要进行本地测试，可以通过源码安装（以下在 ubuntu 上安装）：</p><ol><li>依赖安装</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 如果没有网络加速的话，建议添加 pip 清华源或其他国内 pip 源</span></span>
<span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--proto</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;=https&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--tlsv1.2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sSf</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://sh.rustup.rs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sh</span></span>
<span class="line"><span style="color:#6F42C1;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cargo</span><span style="color:#24292E;">  </span><span style="color:#032F62;">pkg-config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>下载 protoc</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">PROTOC_ZIP</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">protoc-21.12-linux-x86_64.zip</span></span>
<span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-OL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/protocolbuffers/protobuf/releases/download/v21.12/</span><span style="color:#24292E;">$PROTOC_ZIP</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unzip</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> $PROTOC_ZIP </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin/protoc</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unzip</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> $PROTOC_ZIP </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;include/*&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> $PROTOC_ZIP</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果没有网络加速的话，建议修改 cargo 源。有网络加速可略过。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># vim ~/.cargo/config</span></span>
<span class="line"><span style="color:#24292E;">[source.crates-io]</span></span>
<span class="line"><span style="color:#6F42C1;">registry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://github.com/rust-lang/crates.io-index&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">replace-with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;tuna&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[source.tuna]</span></span>
<span class="line"><span style="color:#6F42C1;">registry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[net]</span></span>
<span class="line"><span style="color:#24292E;">git-fetch-with-cli</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>TGI 根目录下执行安装：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">BUILD_EXTENSIONS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">True</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Install repository and HF/transformer fork with CUDA kernels</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><p>安装成功，添加环境变量到 .bashrc 中 export PATH=/root/.cargo/bin:$PATH</p></li><li><p>执行 text-generation-launcher --help ，有输出表示安装成功。</p></li></ol><h3 id="快速开始-1" tabindex="-1"><a class="header-anchor" href="#快速开始-1" aria-hidden="true">#</a> <strong>快速开始</strong></h3><p>将 Llama-2-7b-chat-hf 部署成服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 建议将模型下载到本地，而后挂载到 docker 中，避免在 docker 中重复下载。</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tgi</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--runtime=nvidia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--gpus</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5001</span><span style="color:#032F62;">:5001</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/kevin/models:/data</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">ghcr.io/huggingface/text-generation-inference:0.9.3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--model-id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data/Llama-2-7b-chat-hf</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--hostname</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5001</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--dtype</span><span style="color:#24292E;"> </span><span style="color:#032F62;">float16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--sharded</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">--max-batch-total-tokens</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 24GB 显卡加载 7B llama v2 可参考</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 text-generation-launcher --help 查看到可配置参数，相对 vllm 来说，TGI 在服务部署上的参数配置更丰富一些，其中比较重要的有：</p><ul><li>model-id：模型 path 或者 hf.co 的 model_id。</li><li>revision：模型版本，比如 hf.co 里仓库的 branch 名称。</li><li>quantize：TGI 支持使用 GPTQ 来部署模型。</li><li>max-concurrent-requests：当服务处于高峰期时，对于更多新的请求，系统会直接返回拒绝请求，（比如返回服务器正忙，请稍后重试），而不是将新请求加入到 waiting list 当中。改配置可以有效环节后台服务压力。默认为 128。</li><li>max-total-tokens：相当于模型的 max-tokens</li><li>max-batch-total-tokens： <strong>非常重要的参数，他极大影响了服务的吞吐量。</strong> 该参数与 vllm 中的 max-num-batched-tokens 类似。比如你配置了 max-num-batched-tokens=1000：那么你大概能在一个 batch 里面处理 10 条平均长度约为 100 tokens 的 inputs。 <strong>对于传入的 HF 模型，TGI 会自动推理该参数的最大上限</strong> ，如果你加载了一个 7B 的模型到 24GB 显存的显卡当中，你会看到你的显存占用基本上被用满了，而不是只占用了 13GB（7B 模型常见显存占用），那是因为 TGI 根据 max-batch-total-tokens 提前对显存进行规划和占用。 <strong>但对于量化模型，该参数需要自己设定，</strong> 设定时可以根据显存占用情况，推测改参数的上限。</li></ul><h2 id="serving-测试" tabindex="-1"><a class="header-anchor" href="#serving-测试" aria-hidden="true">#</a> <strong>Serving 测试</strong></h2><p>上文中分别采用 vllm 以及 TGI 部署了 Llama-2-7b-chat-hf 模型，以下对两者进行测试：</p><h3 id="vllm-benchmark-测试" tabindex="-1"><a class="header-anchor" href="#vllm-benchmark-测试" aria-hidden="true">#</a> <strong>vllm</strong> <strong>benchmark</strong> <strong>测试</strong></h3><p>部署后通过 benchmark/benchmark_serving.py 进行测试：</p><ul><li>测试数据集：ShareGPT_V3_unfiltered_cleaned_split.json</li><li>num prompt: 100 （随机从 ShareGPT 提供的用户和 GPT 对话数据当中，筛选 100 个问题进行测试）</li><li>设备：单卡 4090 + inter i9-13900K</li><li>request 间隔: 每个 request 发送的间隔。</li></ul><table><thead><tr><th></th><th>request 间隔（秒）</th><th>Throughput (request/s)</th><th>average speed tokens/s</th><th>lowest speed tokens/s</th></tr></thead><tbody><tr><td>vllm</td><td>1</td><td>0.95</td><td>51</td><td>39.4</td></tr><tr><td>vllm</td><td>0.5</td><td>1.66</td><td>44.96</td><td>29.41</td></tr><tr><td>vllm</td><td>0.25</td><td>2.48</td><td>37.6</td><td>24.05</td></tr><tr><td>vllm</td><td>0.05</td><td>3.24</td><td>26.31</td><td>4.13</td></tr><tr><td>TGI（HF）</td><td>1</td><td>0.96</td><td>70.67</td><td>37.15</td></tr><tr><td>TGI（HF）</td><td>0.5</td><td>1.68</td><td>62</td><td>31.97</td></tr><tr><td>TGI（HF）</td><td>0.25</td><td>2.71</td><td>56.47</td><td>25.59</td></tr><tr><td>TGI（HF）</td><td>0.05</td><td>3.66</td><td>37.39</td><td>4.71</td></tr></tbody></table><ol><li>通过以上数据，可以看出 TGI 更新后比 vllm 的吞吐量优秀一些。</li><li>由于 continuous batchinglowest speed。</li><li>测试时候 random seed 是一样的。因此输入样本是一样的。预测是，TGI 和 VLLM 的 tempareture 都设置为 0，均采用 sampling。</li></ol><p>通过 vllm 提供的 benchmark/benchmark_throughput ，在 4090 测试得到结果：平均输出速度 1973.84 tokens/s，Throughput 为 4.13 requests/s，相当于 240.7 seq/min。（benchmark_throughput 相当于以上测试中 request 间隔为 0）</p><h3 id="jmeter-模拟" tabindex="-1"><a class="header-anchor" href="#jmeter-模拟" aria-hidden="true">#</a> <strong>JMeter 模拟</strong></h3><p>采用 Apache JMeter 进行请求模拟测试。模拟 100 个用户分别在 10 秒钟内开始他们的聊天，持续 10 轮。结果如下：</p><figure><img src="https://pic1.zhimg.com/80/v2-da49d3cab8579431a4e0a3e28cfdc661_1440w.png?source=d16d100b" alt="View result in Table 结果截图（根据 Latency 排序）" tabindex="0" loading="lazy"><figcaption>View result in Table 结果截图（根据 Latency 排序）</figcaption></figure><figure><img src="https://pic1.zhimg.com/80/v2-5e67960f7accb27ae3725338798e79a1_1440w.png?source=d16d100b" alt="Aggregate Report 结果截图" tabindex="0" loading="lazy"><figcaption>Aggregate Report 结果截图</figcaption></figure><p>实验结果表示，每个用户发送消息后，接收到 LLM 回复的延迟在 152 ms 以下（接收到 第一个 token 的延迟）。平均每个对话的回复速度在 33-50 tokens/s。因此，使用 4090 单卡，可以部署一个供约 100 人正常使用的 7B LLM 模型。</p><p>JMeter 模拟配置如下：</p><p>Thread Group：添加 Number of Threads = 100 个用户，所有用户在 Ramp-up period=10 秒内完成请求发送。 我们假设每个用户进行了 Loop count=10 轮对话。</p><ul><li>HTTP Request（sampler）</li><li>constant timer = 2: 每个用户接受到 LLM 回复后，会在 2 秒后发送新的请求（模拟打字速度）。</li><li>HTTP Header Manager: 添加 content-type=application/json，post 的 body 统一设置为：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">    &quot;messages&quot;:[</span></span>
<span class="line"><span style="color:#24292e;">        {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Once a upon time,&quot;}</span></span>
<span class="line"><span style="color:#24292e;">    ],</span></span>
<span class="line"><span style="color:#24292e;">    &quot;model&quot;:&quot;llama-2&quot;,</span></span>
<span class="line"><span style="color:#24292e;">    &quot;temperature&quot;: 0.6,</span></span>
<span class="line"><span style="color:#24292e;">    &quot;stream&quot;: true,</span></span>
<span class="line"><span style="color:#24292e;">    &quot;max_tokens&quot;: 2000</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Listener 包括:</li><li>View results tree: 查看每个请求返回结果，确认 LLM 生成的回复是正确的。</li><li>View results in Table: 查看 request 延迟时间最大值等数据。</li><li>Aggregate Report: 查看平均请求时间等数据。</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>除了 vllm，TGI 外，仍有不少 llm 服务部署仓库，如 lmdeploy 等。限制于设备条件，本文仅对单卡部署 7B 模型进行了测试。</p><p>Kevin 吴嘉文：LLaMa 量化部署 20 赞同 · 5 评论文章</p><p>在上期 LLaMa 量化文章中，我们讨论了 LLaMa 使用 GPTQ 量化的情况下，进行推理（batch_size=1）的速度可提高近 3 倍。但由于当 batch size 大时， GPTQ 的 batch inference 效率没有 fp16 高，本地测试采用 batch inference 可以达到的推理速度：</p><table><thead><tr><th>type</th><th>batch size</th><th>tokens/s</th></tr></thead><tbody><tr><td>exllama</td><td>1</td><td>144.2</td></tr><tr><td>exllama</td><td>2</td><td>255.73</td></tr><tr><td>exllama</td><td>4</td><td>373.44</td></tr><tr><td>exllama</td><td>8</td><td>304</td></tr><tr><td>fp16</td><td>1</td><td>52</td></tr><tr><td>fp16</td><td>4</td><td>205</td></tr><tr><td>fp16</td><td>8</td><td>390</td></tr><tr><td>vllm</td><td>1</td><td>59</td></tr><tr><td>vllm</td><td>4</td><td>222</td></tr><tr><td>vllm</td><td>8</td><td>432</td></tr></tbody></table><p>因此采用 TGI + GPTQ 的吞吐量可能不会有很大提升。目前 TGI 对 exllama 的支持还不是很好，等过段时间再来测试 TGI + exllama 的吞吐量。</p><h3 id="运行-gptq-测试" tabindex="-1"><a class="header-anchor" href="#运行-gptq-测试" aria-hidden="true">#</a> 运行 gptq 测试</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tgi</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GPTQ_BITS=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GPTQ_GROUPSIZE=</span><span style="color:#005CC5;">128</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--runtime=nvidia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--gpus</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5001</span><span style="color:#032F62;">:5001</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/kevin/models:/data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kevinng77/tgi</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--model-id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/data/llama2-7b-chat-gptq-int4</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hostname</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5001</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--max-concurrent-requests</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">--quantize</span><span style="color:#24292E;"> </span><span style="color:#032F62;">gptq</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--trust-remote-code</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--max-batch-prefill-tokens</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2048</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--sharded</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--max-input-length</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--max-batch-total-tokens</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30000</span><span style="color:#24292E;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,44);function _(x,q){const a=o("ExternalLinkIcon");return t(),r("div",null,[i,n("p",null,[s("以上 dockerfile 参考了 Thebloke 的 vllm 安装推荐（"),n("a",d,[s("link"),l(a)]),s("）。如果构建 docker image 过程遇到了问题，也可以直接 pull 笔者构建好的 vllm (v0.1.2) 镜像：")]),y,n("p",null,[s("vllm 也提供了 OpenAI-compatible API server，vllm 调用了 fastchat 的 conversation template 来构建对话输入的 prompt，但 v0.1.2 的 vllm 与最新版的 fastchat 有冲突，为了保证使用 llama v2 时用上对应的 prompt template，可以手动修改以下 entrypoints.openai.api_server 中对 get_conversation_template 的引入方式（"),n("a",u,[s("link"),l(a)]),s("）。修改后执行以下代码启动：")]),m,n("p",null,[s("关于 vllm 的 paged attention 机制，网上已经有不少解析，比如可以参考 "),n("a",v,[s("NLP（十七）：从 FlashAttention 到 PagedAttention, 如何进一步优化 Attention 性能"),l(a)]),s("。除了 paged attention 之外，vllm 中的 Continuous batching 和 Scheduling 机制也挺有意思。从接收 request，到返回回复，大致的过程如下：")]),h,n("ul",null,[C,n("li",null,[s("支持了 "),n("a",E,[s("flash-attention"),l(a)]),s(" 和 "),n("a",b,[s("Paged Attention"),l(a)]),s("。")]),n("li",null,[s("支持了 "),n("a",g,[s("Safetensors"),l(a)]),s(" 权重加载。（目前版本的 vllm 在加载部分模型的 safetensors 有问题（比如 llama-2-7B-chat）。")]),F,f]),k])}const I=p(c,[["render",_],["__file","笔记vllm_tgi.html.vue"]]);export{I as default};
