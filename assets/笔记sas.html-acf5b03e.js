import{_ as e,E as t,S as p,W as c,$ as n,a3 as a,Z as i,aS as o}from"./framework-d5c0d2cb.js";const l="/assets/img/sas/image-20221210215045136.png",d={},r=n("h2",{id:"sas",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sas","aria-hidden":"true"},"#"),a(" SAS")],-1),u={href:"https://documentation.sas.com/doc/en/pgmsascdc/v_017/proc/n0asd2rsj9aedgn1828aptww56of.htm",target:"_blank",rel:"noopener noreferrer"},v=o(`<h3 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h3><p>变量数据类型：定义方式为：<code>var_name type;</code> 其中 <code>type</code> 包括：</p><ul><li><strong>数值型：</strong> 不分整数小数</li><li><strong>字符型：</strong> <code>$10</code>。10 表示最大字符数量。最多支持 32767 字符。</li><li><strong>时间型：</strong> <code>DATA11</code>等</li></ul><p><strong>DATA step</strong></p><ul><li><p>基础创建，读取，修改数据</p></li><li><p>处理方法是逐行处理，相当于定义一个函数，对数据集逐行进行处理。</p></li><li><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*从第三行开始读到 5 行*/</span>
DATA DB<span class="token punctuation">;</span>
	INFILE <span class="token string">&quot;PATH TO FILE&quot;</span> FIRSTOBS<span class="token operator">=</span><span class="token number">3</span> OBS<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
	INPUT <span class="token string">&quot;@1 COL1 $10. COL2 3.1 DATE MMDDYY10.&quot;</span> 
	<span class="token comment">/*如果是字符串类型，后面要加字符串, COL2 占用 3 个字符，包含小数点后 1 个数，但是如果出现一个没*/</span>
	<span class="token comment">/*@ 说明从第一个列开始都*/</span>
	LABEL ReceiveDate<span class="token operator">=</span><span class="token string">&quot;Date order was received&quot;</span>  <span class="token comment">/*给 col name 换标签*/</span>
	Zone <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> <span class="token comment">/*直接生成一个新的 COL*/</span>
	avg <span class="token operator">=</span> <span class="token function">MEAN</span><span class="token punctuation">(</span>COL1<span class="token punctuation">,</span> COL2<span class="token punctuation">)</span>
	INPUT X @<span class="token punctuation">;</span>  <span class="token comment">/*我们先读入 x 这个 col，*/</span>
	INPUT Y<span class="token punctuation">;</span> <span class="token comment">/*这时候我们就能读入 X Y 两列数据*/</span>
	INPUT Z @@<span class="token punctuation">;</span>  <span class="token comment">/*记录永久保留，知道被覆盖*/</span>
	RETAIN record_max<span class="token punctuation">;</span>  <span class="token comment">/**/</span>
	MAX_VAL <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>record_max<span class="token punctuation">,</span> COL2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>SAS 是每行读取的，因此使用 RETAIN 相当于创造了一个临时变量，而不适用 RETAIN 相当于直接创造了新的 col。</p><p>读取时候可以在 input 加入 <code>@sym</code> 来提取复杂语句，如下面提取的目标为 <code>123[2022-01-01 -000] GET /mnt/c/log.txt</code>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DATA DB<span class="token punctuation">;</span>
	INFILE <span class="token string">&quot;PATH TO FILE&quot;</span><span class="token punctuation">;</span>
	INPUT @<span class="token char">&#39;[&#39;</span> Lastdata DATE11<span class="token punctuation">.</span> @<span class="token char">&#39;GET&#39;</span> File <span class="token operator">:</span>$<span class="token number">20.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他输入方式请查看搜索引擎。</p><p><strong>PROC step</strong></p><ul><li>进行复杂操作 相当于函数</li></ul><h3 id="操作界面" tabindex="-1"><a class="header-anchor" href="#操作界面" aria-hidden="true">#</a> 操作界面</h3><p>SAS 带有自己的软件界面，在软件中点击 run submit 就可以提交了。左边是逻辑库（数据文件夹），右下角写代码，右上看日志。</p><h3 id="数据导入" tabindex="-1"><a class="header-anchor" href="#数据导入" aria-hidden="true">#</a> 数据导入</h3><p>一般如果前几行缺失的话，该列会默认识别成字符型。可以在前几行添加一些数字性数据，然后导入后删掉这些行。</p><h4 id="永久数据库链接" tabindex="-1"><a class="header-anchor" href="#永久数据库链接" aria-hidden="true">#</a> 永久数据库链接</h4><p>sas 逻辑库相当于文件夹，用于储存文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>libname sasdb <span class="token string">&quot;path/to/data_dir&quot;</span>
DATA sasdb<span class="token punctuation">.</span>db_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在逻辑库中的数据库名称叫做 sasdb</p><h4 id="import-导入" tabindex="-1"><a class="header-anchor" href="#import-导入" aria-hidden="true">#</a> <strong>import 导入</strong></h4><p>除了用 data 导入常用数据库，也可以用 import</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Proc import
DATAfile<span class="token operator">=</span><span class="token string">&quot;pathname&quot;</span>
GETNAMES<span class="token operator">=</span>NO  <span class="token comment">/*不讲第一行作为 col_name*/</span>
out<span class="token operator">=</span>sasdb
DELIMITER<span class="token operator">=</span><span class="token string">&quot;,&quot;</span>  <span class="token comment">/* 分割符 */</span>
dbms<span class="token operator">=</span>identifier replace<span class="token punctuation">;</span>
Run<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选取部分 col 读入，输出一个数据集时候，效率高：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DATA NEWDB<span class="token punctuation">;</span>
Set <span class="token function">rawdb</span><span class="token punctuation">(</span>keep<span class="token operator">/</span>drop<span class="token operator">=</span>col_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Run<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下能够输出到多个数据集中，但内存中操作的是整个 RAWDB 数据集。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DATA <span class="token function">NEWDB1</span><span class="token punctuation">(</span>keep<span class="token operator">/</span>drop<span class="token operator">=</span>col_name<span class="token punctuation">)</span>
<span class="token function">NEWDB2</span><span class="token punctuation">(</span>keep<span class="token operator">/</span>drop<span class="token operator">=</span>col_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Set rawdb<span class="token punctuation">;</span>
Run<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据选择" tabindex="-1"><a class="header-anchor" href="#数据选择" aria-hidden="true">#</a> 数据选择</h4><p>Data 语句指定了新数据集名，set 指定要读取的老数据集名。如果不想创建新的，则也可以在 data 中指定老数据集。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DATA NEWDB<span class="token punctuation">;</span>
SET OLD_DB<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="软件直接导入-view-table-窗口" tabindex="-1"><a class="header-anchor" href="#软件直接导入-view-table-窗口" aria-hidden="true">#</a> 软件直接导入 View table 窗口</h4><p>一般如果前几行缺失的话，该列会默认识别成字符型。可以在前几行添加一些数字性数据，然后导入后删掉这些行。</p><h3 id="数据操作" tabindex="-1"><a class="header-anchor" href="#数据操作" aria-hidden="true">#</a> 数据操作</h3><h5 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h5><p>如果我们执行这样的操作：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>data c<span class="token punctuation">;</span>
set b<span class="token punctuation">;</span>
	new_col<span class="token operator">+</span>col<span class="token punctuation">;</span>
	format new_col<span class="token punctuation">;</span>
run<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sas 相当与执行了以下 python 操作：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>c <span class="token operator">=</span> new_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> b<span class="token punctuation">:</span>
    col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3 <span class="token operator">=</span> b<span class="token punctuation">.</span>columns
    <span class="token keyword">if</span> new_col<span class="token punctuation">:</span>
        new_col <span class="token operator">+=</span> col1 
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        new_col<span class="token operator">=</span><span class="token number">0</span>
    c<span class="token punctuation">.</span>append<span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">(</span>new_col<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 这一布会添加所有中间出现过的变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对与 b 表格中的 cols 变量，他会覆盖之前定义过的所有同名变量。</p><p>对于中间我们自定义的其他变量，它会保持住上次更新的值。</p><p>所有中间变量都会被统一默认 output，当然我们可以自定义 output。</p><h5 id="运算符号" tabindex="-1"><a class="header-anchor" href="#运算符号" aria-hidden="true">#</a> 运算符号</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">*</span><span class="token operator">*</span>
<span class="token operator">*</span>
<span class="token operator">+</span>
<span class="token operator">-</span>
<span class="token operator">=</span> <span class="token comment">/*等于与复制语句有时候很相似*/</span>
<span class="token operator">^=</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token operator">=</span> 
<span class="token operator">&gt;=</span>
<span class="token operator">&amp;</span>  and
<span class="token operator">|</span><span class="token punctuation">,</span><span class="token operator">!</span>  OR
<span class="token operator">^</span> not
max
min
<span class="token operator">||</span> 字符链接操作
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="条件运算" tabindex="-1"><a class="header-anchor" href="#条件运算" aria-hidden="true">#</a> 条件运算</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>data a c<span class="token punctuation">;</span>
set b<span class="token punctuation">;</span>
<span class="token keyword">if</span> gender<span class="token operator">=</span><span class="token number">1</span> then <span class="token keyword">do</span><span class="token punctuation">;</span>
    output a<span class="token punctuation">;</span>
    end<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> gender<span class="token operator">=</span><span class="token punctuation">.</span> then <span class="token keyword">do</span><span class="token punctuation">;</span>
    tg<span class="token operator">=</span><span class="token char">&#39;gender_missing&#39;</span><span class="token punctuation">;</span>
    end<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">do</span><span class="token punctuation">;</span>
    output c<span class="token punctuation">;</span>
    end<span class="token punctuation">;</span>
Run<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>部分逻辑</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>COL <span class="token function">IN</span><span class="token punctuation">(</span><span class="token char">&#39;TARGET&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;TARGET&#39;</span><span class="token punctuation">)</span>
Year<span class="token operator">&lt;</span><span class="token number">1999</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DO I <span class="token operator">=</span> <span class="token number">1</span> TO <span class="token number">5</span><span class="token punctuation">;</span>
	CODE<span class="token punctuation">.</span>
END<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="日期操作" tabindex="-1"><a class="header-anchor" href="#日期操作" aria-hidden="true">#</a> 日期操作</h5><h5 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> ARRAY</h5><p>创建 <code>store</code> 数组，储存四个列的变量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ARRAY <span class="token function">store</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> Macys Penneys Sears Target<span class="token punctuation">;</span>
<span class="token comment">/*或用 -- 省略中间列*/</span>
ARRAY <span class="token function">store</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> Macys <span class="token operator">--</span> Target<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="筛选" tabindex="-1"><a class="header-anchor" href="#筛选" aria-hidden="true">#</a> 筛选</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROC PRINT DATA<span class="token operator">=</span><span class="token string">&quot;XXX&quot;</span>
	WHERE Genro<span class="token operator">=</span><span class="token string">&quot;target genro&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="打印" tabindex="-1"><a class="header-anchor" href="#打印" aria-hidden="true">#</a> 打印</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROC PRINT DATA<span class="token operator">=</span><span class="token string">&quot;XXX&quot;</span><span class="token punctuation">;</span>
	WHERE Genro<span class="token operator">=</span><span class="token string">&quot;target genro&quot;</span><span class="token punctuation">;</span>
	
	LABEL NEW_COLNAME<span class="token operator">=</span><span class="token string">&quot;A LONG COL NAME&quot;</span><span class="token punctuation">;</span>
	BY COL_LIST<span class="token punctuation">;</span> <span class="token comment">/*筛选 col*/</span>
	ID TARGET_ID_LIST<span class="token punctuation">;</span> <span class="token comment">/*筛选 row*/</span>
	FORMAT Last_Date DATE9<span class="token punctuation">.</span> <span class="token comment">/*格式化输出*/</span>
	FOOTNOTE <span class="token string">&quot;F = FRANCE&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>其中格式化输出支持自定义格式化。</strong></p><p>打印统计指标，包括 mean, std dev, min, max 等值：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>proc MEANS DATA<span class="token operator">=</span> SALES<span class="token punctuation">;</span>
	BY Month<span class="token punctuation">;</span>
	VAR TARGET_COLS<span class="token punctuation">;</span>
	TITLE <span class="token string">&quot;TITLE OF PRINT TABLE&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以使用自带功能打印简单报告</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>proc report data<span class="token operator">=</span>xxxx<span class="token punctuation">;</span>
	options<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="计数" tabindex="-1"><a class="header-anchor" href="#计数" aria-hidden="true">#</a> 计数</h5><p>对变量进行统计计数，支持单/双变量计数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROC FREQ DATA<span class="token operator">=</span>ORDERS<span class="token punctuation">;</span>
	TABLES WINDOW WINDOW <span class="token operator">*</span> COFFEE
	RUN<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码告诉 SAS 打印两个表，一个是 one-way 的频率表 WINDOW，一个是交叉表。交叉表的每个小方格内，SAS 打印了频数、百分比、行百分比和列百分比。左边和右边是累积百分比。注意计算频数时没有考虑缺失值</p><figure><img src="`+l+`" alt="相关图片" height="300" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>如果要打印三个变量的频率：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>proc tabulate data<span class="token operator">=</span>boats<span class="token punctuation">;</span>
	class col1 col2 col3<span class="token punctuation">;</span>
	table col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">;</span>
    RUN<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中根据 col1 值打印多个双变量频率表。</p><p><strong>除了打印计数之外，还可以打印其他计算结果。</strong> 美化输出结果等。</p><h5 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROC SORT DATA<span class="token operator">=</span>MESSY OUT<span class="token operator">=</span>NEAT dupout<span class="token operator">=</span>dupdata NODUPKEY<span class="token punctuation">;</span>
	BY State DESCENDING cITY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将 DESCENDING 加在要降序的变量前面。</p><p>缺失值比任何值都小。</p><p>重复的数据将会输出到 dupdata 中</p><p>排序后，默认可以使用 <code>FIRST.COL</code> 和 <code>LAST.COL</code> 提取最小和最大值。因为他们直接指向了第一 row 读取的数和最后一 row 读取的数。</p><h5 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><h5 id="拼接数据集" tabindex="-1"><a class="header-anchor" href="#拼接数据集" aria-hidden="true">#</a> 拼接数据集</h5><p>可以使用 set 实现拼接。SET 语句是一次一个变量地，将一个数据集放入数据步中予以分析。</p><p>根据 row 的方向拼接；</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DATA NEWDB<span class="token punctuation">;</span>
	SET OLD1 OLD2<span class="token punctuation">;</span>
PROC PRINT DATA<span class="token operator">=</span>NEWDB<span class="token punctuation">;</span>
RUN<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="合并数据集" tabindex="-1"><a class="header-anchor" href="#合并数据集" aria-hidden="true">#</a> 合并数据集</h5><p>合并前需要 sort 合并的 key</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROC SORT DATA<span class="token operator">=</span>DB1<span class="token punctuation">;</span>
	BY col1<span class="token punctuation">;</span>
PROC SORT DATA<span class="token operator">=</span>DB2<span class="token punctuation">;</span>
	BY col1<span class="token punctuation">;</span>
DATA newdb<span class="token punctuation">;</span>
	merge db1 db2<span class="token punctuation">;</span>
	by col1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，相当于 db2 向 db1 合并。（db1 为左表）</p><p>可以通过 <code>in=</code> 方法来调整合并时候，左右两个表不同的 row 如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DATA BOTH<span class="token punctuation">;</span>
	MERGE <span class="token function">STATE</span> <span class="token punctuation">(</span>IN<span class="token operator">=</span>INSTATE<span class="token punctuation">)</span> <span class="token function">COUNTEY</span> <span class="token punctuation">(</span>IN<span class="token operator">=</span>INCOUNTRY<span class="token punctuation">)</span><span class="token punctuation">;</span>
	BY COL1<span class="token punctuation">;</span>
	IF INSTATE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前 row 的 col1 在 STATE 数据集存在时，<code>INSTATE=1</code>； MERGE 会遍历所有出现过的 row；</p><h5 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据" aria-hidden="true">#</a> 更新数据</h5><p>根据 col1，将 db2 中非空数值更新到 db1 中</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>data db1<span class="token punctuation">;</span>
	update db1 db2<span class="token punctuation">;</span>
	by col1<span class="token punctuation">;</span>
run<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="位测试" tabindex="-1"><a class="header-anchor" href="#位测试" aria-hidden="true">#</a> 位测试：</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span> a<span class="token operator">=</span><span class="token char">&#39;..1.000&#39;</span>b than <span class="token keyword">do</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="操作语句" tabindex="-1"><a class="header-anchor" href="#操作语句" aria-hidden="true">#</a> 操作语句</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">MEAN</span><span class="token punctuation">(</span>OF COL1 <span class="token operator">-</span> COL9<span class="token punctuation">)</span>
<span class="token function">MEAN</span><span class="token punctuation">(</span>COL1<span class="token punctuation">,</span> COL2<span class="token punctuation">,</span> COL3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输出-ods" tabindex="-1"><a class="header-anchor" href="#输出-ods" aria-hidden="true">#</a> 输出 ODS</h3><p>ODS 是输出必须经过的一个环节。ODS 支持很多输出美化配置</p><h4 id="打印中间变量" tabindex="-1"><a class="header-anchor" href="#打印中间变量" aria-hidden="true">#</a> 打印中间变量</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ODS TRACE ON<span class="token punctuation">;</span>
	THE DATA YOU WANT TO PRINT
ODS TRACE OFF<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或输出单一变量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ODS SELECT MEANS<span class="token punctuation">.</span>byGroup1<span class="token punctuation">.</span>Summary
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="输出到-html" tabindex="-1"><a class="header-anchor" href="#输出到-html" aria-hidden="true">#</a> 输出到 HTML</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ODS HTML OPTIONS<span class="token punctuation">;</span>
	data <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	proc <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
ODS HTML CLOSE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>options 需要指定一个路径。HTML 支持很多输出美化。</p><h4 id="输出到多个表" tabindex="-1"><a class="header-anchor" href="#输出到多个表" aria-hidden="true">#</a> 输出到多个表</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>data db1 db2<span class="token punctuation">;</span>
 	set rawdb<span class="token punctuation">;</span>
 	<span class="token keyword">if</span> col1<span class="token operator">=</span><span class="token number">1</span> then output db1<span class="token punctuation">;</span>
 	<span class="token keyword">else</span> output db2<span class="token punctuation">;</span>
run<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>output 用于控制合适将观测值写入到 SAS 数据库中。如果数据集中没有 OUTPUT 语句，则暗含在结尾，放置了 output 之后，则结尾的就不再暗含存在。当 SAS 出现 OUTPUT 语句时，则写入一个观测值。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DATA DB1<span class="token punctuation">;</span>
	DO X <span class="token operator">=</span> <span class="token number">1</span> TO <span class="token number">6</span><span class="token punctuation">;</span>
		Y<span class="token operator">=</span>X<span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
		OUTPUT<span class="token punctuation">;</span>
	END<span class="token punctuation">;</span>
RUN<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一次 output 就时一行，output 时候将 output 所有记录的 cols；</p><h4 id="输出到文件" tabindex="-1"><a class="header-anchor" href="#输出到文件" aria-hidden="true">#</a> 输出到文件</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROC EXPORT DATA<span class="token operator">=</span>data<span class="token operator">-</span>set OUTFILE<span class="token operator">=</span><span class="token char">&#39;filename&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="宏" tabindex="-1"><a class="header-anchor" href="#宏" aria-hidden="true">#</a> 宏</h3><p>宏与 C 中宏变量相似，在编译时候被替换。</p><p>使用宏指令之前必须将宏系统选项打开，尽管有时默认是打开的。可以用下面代码查看是否打开： PROC OPTIONS OPTION=MACRO; RUN;查看日志，如果看到 MACRO，则打开了；如果看到 NOMACRO，则没有打开。</p><p>定义宏变量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span>LET iterations<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> 
<span class="token operator">%</span>LET country<span class="token operator">=</span>New Zealand<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当赋值字符串时，不需要加引号</strong> 。除非在开头和结尾有空格，否则从等号到分号的全部内容都是变量值。</p><p>引用时候使用 <code>&amp;</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">do</span> i <span class="token operator">=</span> <span class="token number">1</span> to <span class="token operator">&amp;</span>iterations
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以将一段代码定义成宏：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span>MACRO SAMPLECODE<span class="token punctuation">;</span>
PROC SORT DATA<span class="token operator">=</span>DB<span class="token punctuation">;</span>
	CODES<span class="token punctuation">;</span>
<span class="token operator">%</span>MEND SAMPLECODE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用时候直接 <code>%SAMPLECODE</code></p><p>可以添加参数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span>MARCRO <span class="token function">SELECT</span><span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token punctuation">,</span> Y<span class="token operator">=</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	PROC SORT DATA<span class="token operator">=</span> DB<span class="token punctuation">;</span>
		BY <span class="token operator">&amp;</span>X<span class="token punctuation">;</span>
		WHERE ID<span class="token operator">=</span><span class="token string">&quot;&amp;Y&quot;</span>
<span class="token operator">%</span>MEND SELECT<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span><span class="token function">SELECT</span><span class="token punctuation">(</span>X<span class="token operator">=</span> COL1<span class="token punctuation">,</span> Y<span class="token operator">=</span>TARGETID<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="宏中条件" tabindex="-1"><a class="header-anchor" href="#宏中条件" aria-hidden="true">#</a> 宏中条件</h5><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">%</span>IF condition <span class="token operator">%</span>THEN action<span class="token punctuation">;</span> 
<span class="token operator">%</span>ELSE <span class="token operator">%</span>IF condition <span class="token operator">%</span>THEN action<span class="token punctuation">;</span> 
<span class="token operator">%</span>ELSE action<span class="token punctuation">;</span> 
<span class="token operator">%</span>IF condition <span class="token operator">%</span>THEN <span class="token operator">%</span>DO<span class="token punctuation">;</span> 
SAS statements 
<span class="token operator">%</span>END<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>其他函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>REG <span class="token comment"># 支线回归</span>
PRINCOMP  <span class="token comment"># PCA</span>
GLM <span class="token comment"># 协方差分析</span>
ANOVA <span class="token comment"># 方差分析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如简单的回归</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>PROC REG DATA<span class="token operator">=</span>DB<span class="token punctuation">;</span>
	MODEL Y<span class="token operator">=</span>X<span class="token punctuation">;</span>
	PLOT Y<span class="token operator">*</span>X<span class="token punctuation">;</span>
RUN<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 X 预测 Y</p><p>能够添加缩写，自动指代到</p>`,136);function m(k,b){const s=t("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[n("a",u,[a("python 插件"),i(s)])]),v])}const g=e(d,[["render",m],["__file","笔记sas.html.vue"]]);export{g as default};
