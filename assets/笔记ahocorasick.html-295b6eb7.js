import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as t,e as r,a as s,b as n,d as l,f as p}from"./app-441d5a1b.js";const i="/assets/img/ahocorasick/image-20211220101906829.png",y={},d=s("blockquote",null,[s("p",null,"Aho-Corasick 多字符串匹配加速算法。文章包括 Tire, KMP, Aho-Corasick")],-1),m=s("p",null,"需要匹配的单词有 n 个，要在一篇具有 m 个单词的文章中找出他们的位置。",-1),E=s("p",null,"AC 自动机可以理解为 Tire 与 KMP 算法的结合。使用 fail 指针加速了字符串匹配的速度。",-1),v=s("h2",{id:"trie",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#trie","aria-hidden":"true"},"#"),n(" Trie")],-1),u=s("p",null,[n("前缀树/字典树 的插入、查询时间复杂度均为 为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"S"),s("mi",{mathvariant:"normal"},"∣"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(|S|)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord"},"∣"),s("span",{class:"mclose"},")")])])]),n("，其中 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"S"),s("mi",{mathvariant:"normal"},"∣")]),s("annotation",{encoding:"application/x-tex"},"|S|")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),s("span",{class:"mord"},"∣")])])]),n(" 是每次插入或查询的字符串的长度。空间复杂度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"T"),s("mi",{mathvariant:"normal"},"∣"),s("mo",{separator:"true"},"⋅"),s("mo",null,"∑"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(|T|·\\sum)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mord"},"∣"),s("span",{class:"mpunct"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"mclose"},")")])])]),n(" 其中 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",{mathvariant:"normal"},"∣"),s("mi",null,"T"),s("mi",{mathvariant:"normal"},"∣")]),s("annotation",{encoding:"application/x-tex"},"|T|")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"∣"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mord"},"∣")])])]),n(" 为插入字符串长度之和，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"∑")]),s("annotation",{encoding:"application/x-tex"},"\\sum")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑")])])]),n(" 为字符集大小。")],-1),h={href:"https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/shi-xian-trie-qian-zhui-shu-by-leetcode-ti500/",target:"_blank",rel:"noopener noreferrer"},b=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Trie</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Trie</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;"> children;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> isEnd;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Trie</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">searchPrefix</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">prefix</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Trie</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch : prefix) {</span></span>
<span class="line"><span style="color:#24292E;">            ch </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node-&gt;children[ch] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node-&gt;children[ch];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Trie</span><span style="color:#24292E;">() : </span><span style="color:#6F42C1;">children</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">26</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">isEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">word</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Trie</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch : word) {</span></span>
<span class="line"><span style="color:#24292E;">            ch </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (node-&gt;children[ch] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                node-&gt;children[ch] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Trie</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node-&gt;children[ch];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        node-&gt;isEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">word</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Trie</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;</span><span style="color:#6F42C1;">searchPrefix</span><span style="color:#24292E;">(word);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> node-&gt;isEnd;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">prefix</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;</span><span style="color:#6F42C1;">searchPrefix</span><span style="color:#24292E;">(prefix) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nullptr</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kmp" tabindex="-1"><a class="header-anchor" href="#kmp" aria-hidden="true">#</a> KMP</h2>`,2),A={href:"https://leetcode-cn.com/problems/implement-strstr/solution/shua-chuan-lc-shuang-bai-po-su-jie-fa-km-tb86/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://zhuanlan.zhihu.com/p/83334559",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.zhihu.com/question/21923021/answer/1032665486",target:"_blank",rel:"noopener noreferrer"},C=s("p",null,[n("从长度 m 的字符串中匹配出长度为 n 的字符串。时间复杂度 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mo",null,"+"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"O(m+n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])],-1),x={href:"https://www.zhihu.com/question/21923021/answer/1032665486",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"next=pmt>>1;",-1),_=s("code",null,"pmt[i]",-1),k=s("code",null,"A[0:pmt[i]] = A[pmt[i]:i]",-1),w=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNext</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">p</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">next</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	next[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(p))</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> p[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p[j])</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i;</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">j;</span></span>
<span class="line"><span style="color:#24292E;">			next[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j;</span></span>
<span class="line"><span style="color:#24292E;">		}	</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">			j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next[j];</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 next 数组，在匹配失败的时候只需要将指针 <code>j</code> 移动到 <code>next[j]</code> 的位置然后继续匹配，i 指针不需要回溯。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KMP</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">t</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">p</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(t) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(p))</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> t[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p[j]) </span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">           		j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	 	</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">           		j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next[j];</span></span>
<span class="line"><span style="color:#24292E;">    	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(p))</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> j;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ac-自动机" tabindex="-1"><a class="header-anchor" href="#ac-自动机" aria-hidden="true">#</a> AC 自动机</h2><figure><img src="`+i+'" alt="image-20211220101906829" tabindex="0" loading="lazy"><figcaption>image-20211220101906829</figcaption></figure>',5),F={href:"https://www.cnblogs.com/cmmdc/p/7337611.html",target:"_blank",rel:"noopener noreferrer"},L=p(`<p><strong>fail 指针的用途：</strong></p><p>参考上图例子，需要匹配的字符串有：<code>{&quot;str&quot;,&quot;she&quot;,&quot;say&quot;,&quot;her&quot;}</code> ，假设主字符串为：<code>&quot;should&quot;</code> 。首先匹配 <code>&quot;str&quot;</code>，在匹配第二个字符 <code>&#39;h&#39;</code> 时成功，接着匹配他的子节点，匹配到第 3 个字符（<code>&#39;r&#39;!=&#39;o&#39;</code>）时失败，而后匹配 <code>&#39;e&#39;!=&#39;o&#39;</code>也失败，此时跳转到 <code>h</code> fail 指针对应地址继续匹配，即匹配 <code>he</code> 与 <code>ho</code>。</p><p><strong>fail 指针的构建：</strong></p><p>Fail 指针用 BFS 来求得，对于直接与根节点相连的节点来说，如果这些节点失配，他们的 Fail 指针直接指向 root 即可，其他节点其 Fail 指针求法如下： 假设当前节点为 father，其孩子节点记为 child。求 child 的 Fail 指针时，首先我们要找到其 father 的 Fail 指针所指向的节点,假如是 t 的话，我们就要看 t 的孩子中有没有和 child 节点所表示的字母相同的节点，如果有的话，这个节点就是 child 的 fail 指针，如果发现没有，则需要找 father-&gt;fail-&gt;fail 这个节点，然后重复上面过程，如果一直找都找不到，则 child 的 Fail 指针就要指向 root。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><p>root 节点结构</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> kind </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    node </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">fail;</span><span style="color:#6A737D;">       //失败指针</span></span>
<span class="line"><span style="color:#24292E;">    node </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">next[kind];</span><span style="color:#6A737D;"> //Tire 每个节点的个子节点（最多个字母）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count;</span><span style="color:#6A737D;">        //是否为该单词的最后一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">            //构造函数初始化</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        fail</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(next,</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(next));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">q[</span><span style="color:#005CC5;">500001</span><span style="color:#24292E;">];</span><span style="color:#6A737D;">          //队列，方便用于 bfs 构造失败指针</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> keyword[</span><span style="color:#005CC5;">51</span><span style="color:#24292E;">];</span><span style="color:#6A737D;">     //输入的单词</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> str[</span><span style="color:#005CC5;">1000001</span><span style="color:#24292E;">];</span><span style="color:#6A737D;">    //模式串</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> head,tail;</span><span style="color:#6A737D;">        //队列的头尾指针</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>插入</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">str</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">root</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#24292E;">    node </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,index;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(str[i])</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        index</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">str[i]</span><span style="color:#D73A49;">-</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(p-&gt;next[index]</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) p-&gt;next[index]</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p-&gt;next[index];</span></span>
<span class="line"><span style="color:#24292E;">        i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    p-&gt;count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">     //在单词的最后一个节点 count+1，代表一个单词</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构建 fail 指针</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build_ac_automation</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">root</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">    root-&gt;fail</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    q[head</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(head</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">tail)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        node </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">temp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">q[tail</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        node </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">26</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(temp-&gt;next[i]</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(temp</span><span style="color:#D73A49;">==</span><span style="color:#24292E;">root) temp-&gt;next[i]-&gt;fail</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                {</span></span>
<span class="line"><span style="color:#24292E;">                    p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">temp-&gt;fail;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(p</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(p-&gt;next[i]</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                        {</span></span>
<span class="line"><span style="color:#24292E;">                            temp-&gt;next[i]-&gt;fail</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p-&gt;next[i];</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p-&gt;fail;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(p</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) temp-&gt;next[i]-&gt;fail</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                q[head</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">temp-&gt;next[i];</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串匹配</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">root</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,cnt</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,index,len</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">    node </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">root;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(str[i])</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        index</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">str[i]</span><span style="color:#D73A49;">-</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(p-&gt;next[index]</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> p</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">root) p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p-&gt;fail;</span></span>
<span class="line"><span style="color:#24292E;">        p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p-&gt;next[index];</span></span>
<span class="line"><span style="color:#24292E;">        p</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(p</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">root</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">p;</span></span>
<span class="line"><span style="color:#24292E;">        node </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">temp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(temp</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;">root </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> temp-&gt;count</span><span style="color:#D73A49;">!=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            cnt</span><span style="color:#D73A49;">+=</span><span style="color:#24292E;">temp-&gt;count;</span></span>
<span class="line"><span style="color:#24292E;">            temp-&gt;count</span><span style="color:#D73A49;">=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            temp</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">temp-&gt;fail;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cnt;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pyahocorasick" tabindex="-1"><a class="header-anchor" href="#pyahocorasick" aria-hidden="true">#</a> pyahocorasick</h3>`,14),M=s("code",null,"pip install pyahocorasick",-1),q={href:"https://pyahocorasick.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},T=p(`<p><strong>构建</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ahocorasick</span></span>
<span class="line"><span style="color:#24292E;">actree </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ahocorasick.Automaton()  </span><span style="color:#6A737D;"># use the Automaton class as a trie</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> index, word </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(wordlist):</span></span>
<span class="line"><span style="color:#24292E;">    actree.add_word(word, (index, word))</span></span>
<span class="line"><span style="color:#24292E;">actree.make_automaton()  </span><span style="color:#6A737D;"># convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># &#39;word&#39; in actree 检查字符是否在 trie 中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查询</strong> 使用 <code>actree.iter(string)</code> ，返回 结果为 <code>匹配到单词时结束的位置、构建时候插入的 index、匹配到的单词</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> end_index, (insert_order, original_value) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> A.iter(haystack):</span></span>
<span class="line"><span style="color:#005CC5;">...</span><span style="color:#24292E;">     start_index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> end_index </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(original_value) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">...</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">((start_index, end_index, (insert_order, original_value)))</span></span>
<span class="line"><span style="color:#005CC5;">...</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> haystack[start_index:start_index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(original_value)] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> original_value</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, (</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;he&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;her&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>保存与加载</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cPickle</span></span>
<span class="line"><span style="color:#24292E;">pickled </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cPickle.dumps(A)</span></span>
<span class="line"><span style="color:#24292E;">B </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cPickle.loads(pickled)</span></span>
<span class="line"><span style="color:#24292E;">B.get(</span><span style="color:#032F62;">&#39;he&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function j(N,P){const a=o("ExternalLinkIcon");return c(),t("div",null,[d,r("more"),m,E,v,u,s("p",null,[s("a",h,[n("来源：力扣（LeetCode）"),l(a)])]),b,s("p",null,[s("a",A,[n("力扣 实现 strstr()"),l(a)]),n(),s("a",D,[n("KMP 算法详解 （另类 KMP）"),l(a)]),n(),s("a",g,[n("如何更好地理解和掌握 KMP 算法?"),l(a)])]),C,s("p",null,[n("首先需要求 next 数组 "),s("a",x,[n("算法"),l(a)]),n("。字符串 A 对应的 next 数组为 pmt 数组右移一位得到，"),f,n(),_,n(" 表示 "),k]),w,s("p",null,[n("参考 KMP 的思想，我们将待匹配字符串储存为 Trie 树，而后添加 fail 指针来减少回溯匹配浪费的时间。（该部分参考自："),s("a",F,[n("AC 自动机算法详解"),l(a)]),n("）")]),L,s("p",null,[n("python 下的 AC 自动机库 "),M,n(),s("a",q,[n("官方文档"),l(a)])]),T])}const K=e(y,[["render",j],["__file","笔记ahocorasick.html.vue"]]);export{K as default};
