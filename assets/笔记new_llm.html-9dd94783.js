import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as o,a as t,b as e,d as n,f as a}from"./app-cce74234.js";const g="/assets/img/new_llm/image-20240804181902916.png",d="/assets/img/new_llm/image-20240804181521807.png",c="/assets/img/new_llm/image-20240804181557764.png",p="/assets/img/new_llm/image-20240804182451532.png",m="/assets/img/new_llm/image-20240804182813455.png",h="/assets/img/new_llm/image-20240804183128606.png",y="/assets/img/new_llm/image-20240804183656587.png",x="/assets/img/new_llm/image-20240804183850742.png",u="/assets/img/new_llm/image-20240805225831921.png",_="/assets/img/new_llm/image-20240805230010182.png",f="/assets/img/new_llm/image-20240805233915707.png",b={},w=t("h3",{id:"qwen-1-5-系列",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#qwen-1-5-系列","aria-hidden":"true"},"#"),e(" Qwen 1.5 系列")],-1),L={href:"https://huggingface.co/collections/Qwen/qwen15-65c0a2f577b1ecb76d786524",target:"_blank",rel:"noopener noreferrer"},B={href:"https://qwenlm.github.io/zh/blog/qwen1.5/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://qwenlm.github.io/zh/blog/qwen1.5-32b/",target:"_blank",rel:"noopener noreferrer"},k=a('<p>发布时间：24 年 2 月。</p><p>模型大小：包括 0.5B, 1.8B, 4B, 7B, 14B, 32B and 72B dense 模型，以及 MoE-A2.7B 模型。</p><p>架构：32B 以上的模型用了 GQA，其他架构大致相同。</p><p>训练：</p><ul><li>RLHF：直接策略优化（DPO）和近端策略优化（PPO）等技术。</li><li>长序列：全系列支持 32K+ tokens 的上下文</li></ul><p>数据：</p><ul><li>挑选了来自欧洲、东亚和东南亚的 12 种不同语言</li></ul><p>官方给出的评分：</p><table><thead><tr><th style="text-align:left;">Model</th><th style="text-align:center;">MMLU</th><th style="text-align:center;">C-Eval</th><th style="text-align:center;">GSM8K</th><th style="text-align:center;">MATH</th><th style="text-align:center;">HumanEval</th><th style="text-align:center;">MBPP</th><th style="text-align:center;">BBH</th><th style="text-align:center;">CMMLU</th></tr></thead><tbody><tr><td style="text-align:left;">GPT-4</td><td style="text-align:center;">86.4</td><td style="text-align:center;">69.9</td><td style="text-align:center;">92.0</td><td style="text-align:center;">45.8</td><td style="text-align:center;">67.0</td><td style="text-align:center;">61.8</td><td style="text-align:center;">86.7</td><td style="text-align:center;">71.0</td></tr><tr><td style="text-align:left;">Llama2-7B</td><td style="text-align:center;">46.8</td><td style="text-align:center;">32.5</td><td style="text-align:center;">16.7</td><td style="text-align:center;">3.3</td><td style="text-align:center;">12.8</td><td style="text-align:center;">20.8</td><td style="text-align:center;">38.2</td><td style="text-align:center;">31.8</td></tr><tr><td style="text-align:left;">Llama2-13B</td><td style="text-align:center;">55.0</td><td style="text-align:center;">41.4</td><td style="text-align:center;">29.6</td><td style="text-align:center;">5.0</td><td style="text-align:center;">18.9</td><td style="text-align:center;">30.3</td><td style="text-align:center;">45.6</td><td style="text-align:center;">38.4</td></tr><tr><td style="text-align:left;">Llama2-34B</td><td style="text-align:center;">62.6</td><td style="text-align:center;">-</td><td style="text-align:center;">42.2</td><td style="text-align:center;">6.2</td><td style="text-align:center;">22.6</td><td style="text-align:center;">33.0</td><td style="text-align:center;">44.1</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:left;">Llama2-70B</td><td style="text-align:center;">69.8</td><td style="text-align:center;">50.1</td><td style="text-align:center;">54.4</td><td style="text-align:center;">10.6</td><td style="text-align:center;">23.7</td><td style="text-align:center;">37.7</td><td style="text-align:center;">58.4</td><td style="text-align:center;">53.6</td></tr><tr><td style="text-align:left;">Mistral-7B</td><td style="text-align:center;">64.1</td><td style="text-align:center;">47.4</td><td style="text-align:center;">47.5</td><td style="text-align:center;">11.3</td><td style="text-align:center;">27.4</td><td style="text-align:center;">38.6</td><td style="text-align:center;">56.7</td><td style="text-align:center;">44.7</td></tr><tr><td style="text-align:left;">Mixtral-8x7B</td><td style="text-align:center;">70.6</td><td style="text-align:center;">-</td><td style="text-align:center;">74.4</td><td style="text-align:center;">28.4</td><td style="text-align:center;">40.2</td><td style="text-align:center;">60.7</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:left;">Qwen1.5-7B</td><td style="text-align:center;">61.0</td><td style="text-align:center;">74.1</td><td style="text-align:center;">62.5</td><td style="text-align:center;">20.3</td><td style="text-align:center;">36.0</td><td style="text-align:center;">37.4</td><td style="text-align:center;">40.2</td><td style="text-align:center;">73.1</td></tr><tr><td style="text-align:left;">Qwen1.5-14B</td><td style="text-align:center;">67.6</td><td style="text-align:center;">78.7</td><td style="text-align:center;">70.1</td><td style="text-align:center;">29.2</td><td style="text-align:center;">37.8</td><td style="text-align:center;">44.0</td><td style="text-align:center;">53.7</td><td style="text-align:center;">77.6</td></tr><tr><td style="text-align:left;">Qwen1.5-32B</td><td style="text-align:center;">73.4</td><td style="text-align:center;">83.5</td><td style="text-align:center;">77.4</td><td style="text-align:center;">36.1</td><td style="text-align:center;">37.2</td><td style="text-align:center;">49.4</td><td style="text-align:center;">66.8</td><td style="text-align:center;">82.3</td></tr><tr><td style="text-align:left;">Qwen1.5-72B</td><td style="text-align:center;">77.5</td><td style="text-align:center;">84.1</td><td style="text-align:center;">79.5</td><td style="text-align:center;">34.1</td><td style="text-align:center;">41.5</td><td style="text-align:center;">53.4</td><td style="text-align:center;">65.5</td><td style="text-align:center;">83.5</td></tr></tbody></table>',9),M={href:"https://qwenlm.github.io/zh/blog/qwen-moe/",target:"_blank",rel:"noopener noreferrer"},E=t("p",null,"Qwen 1.5 MOE 对 Mixtral MOE 的架构进行了优化，包括 Finegrained experts，初始化，新的 routing 机制等。更多欢迎参考 https://qwenlm.github.io/zh/blog/qwen-moe/",-1),A=t("h3",{id:"qwen-2-系列",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#qwen-2-系列","aria-hidden":"true"},"#"),e(" Qwen 2 系列")],-1),P={href:"https://arxiv.org/abs/2407.10671",target:"_blank",rel:"noopener noreferrer"},z=a('<p><strong>架构：</strong> Dense 模型及 MOE 模型与 Qwen 1.5 对应版本的架构一样。</p><p><strong>模型大小：</strong> 有 0.5B，1.5B，7B 和 72B 四种 dense 模型；同时还有一个 57B-A14B 的 MOE。</p><p><strong>预训练：</strong> 训练数据 一共有 7T，包含了 30 种语言，数据中收集了更多高质量的代码、数学和多语种数据。</p><p><strong>超长上下文：</strong> 先用 4096 的长度训练，而后再训练结束前，换成 32K。采用了 YARN 和 Dual Chunk Attention。以下为大海捞针评测：</p><figure><img src="'+g+'" alt="image-20240804181902916" tabindex="0" loading="lazy"><figcaption>image-20240804181902916</figcaption></figure><p><strong>SFT：</strong> 用了超过 500K 的实例进行训练，数据集中包含指令遵循，代码，数学，逻辑推理，角色扮演，安全等数据。finetune 了 2 个 epoch，训练文本长度限制再了 32K。</p><p><strong>RLHF：</strong></p><ul><li><strong>离线训练：</strong> 用 DPO 再标注好的偏好数据集上训练。</li><li><strong>在线训练：</strong> 同样采用 DPO，同时采用 Online Merging Optimizer 来缓解对齐税。</li></ul><p><strong>模型效果：</strong></p><p>Qwen2 72B 效果：</p><figure><img src="'+d+'" alt="image-20240804181521807" tabindex="0" loading="lazy"><figcaption>image-20240804181521807</figcaption></figure><p>Qwen2 7B 效果：</p><figure><img src="'+c+'" alt="image-20240804181557764" tabindex="0" loading="lazy"><figcaption>image-20240804181557764</figcaption></figure>',13),Q={href:"https://qwenlm.github.io/zh/blog/qwen2/",target:"_blank",rel:"noopener noreferrer"},q=a('<p><strong>Agent 框架：</strong></p><ul><li><p>github：https://github.com/QwenLM/Qwen-Agent</p></li><li><p>参考博客：https://qwenlm.github.io/zh/blog/qwen-agent-2405/</p></li></ul><p>Qwen Agent 的主要思想是：利用 agent 架构来弥补大模型上下文窗口的不足，使得 8k 上下文的模型也能够处理 1M 的上下文。</p><p>Agent 分为 3 个 Level。</p><p>Level 1 操作为：</p><figure><img src="'+p+'" alt="image-20240804182451532" tabindex="0" loading="lazy"><figcaption>image-20240804182451532</figcaption></figure><ol><li>使用 LLM 解析用户问题，区分用户问题中的信息元素和指令；根据信息元素整合成几个关键词。</li><li>用 BM25 过滤出有关 chunk，而后放到 8k 的 LLM 中进行回答。</li></ol><p>Level 2 操作为：</p><figure><img src="'+m+'" alt="image-20240804182813455" tabindex="0" loading="lazy"><figcaption>image-20240804182813455</figcaption></figure><ol><li>使用 LLM，判断用户的问题与每一个 chunk 是否相关（要进行很多次 LLM 推理）。而后保留下相关的 chunk。</li><li>通过 BM25，从剩下的 chunk 中进一步筛选。最后将结果放到 LLM 做进行回答。</li></ol><p>Level 3 操作为：</p><figure><img src="'+h+`" alt="image-20240804183128606" tabindex="0" loading="lazy"><figcaption>image-20240804183128606</figcaption></figure><p>将 Level 2 智能体封装成一个工具，由 Level 3 智能体调用。</p><p>Level 3 智能体进行多跳推理的流程如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">向 Lv3</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体提出一个问题。</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (Lv3</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体无法根据其记忆回答问题) {</span></span>
<span class="line"><span style="color:#24292E;">    Lv3</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体提出一个新的子问题待解答。</span></span>
<span class="line"><span style="color:#24292E;">    Lv3</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体向 Lv2</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体提问这个子问题。</span></span>
<span class="line"><span style="color:#24292E;">    将 Lv2</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体的回应添加到 Lv3</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体的记忆中。</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Lv3</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">智能体提供原始问题的最终答案。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>agent 效果：</p><ul><li>32k Model: 不采用策略，直接基于 RoPE 外推（无额外训练）。</li><li>4k RAG 采用 Level 1 策略</li><li>4k Agent 采用 Level 3 策略</li></ul><figure><img src="`+y+'" alt="image-20240804183656587" tabindex="0" loading="lazy"><figcaption>image-20240804183656587</figcaption></figure><p>使用 Qwen2-7B-Instruct 进行 1M 的上下文大海捞针测试：</p><figure><img src="'+x+'" alt="image-20240804183850742" tabindex="0" loading="lazy"><figcaption>image-20240804183850742</figcaption></figure><h3 id="llama3-系列" tabindex="-1"><a class="header-anchor" href="#llama3-系列" aria-hidden="true">#</a> llama3 系列</h3>',21),D={href:"https://ai.meta.com/blog/meta-llama-3/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/meta-llama/llama3/tree/main",target:"_blank",rel:"noopener noreferrer"},T={href:"https://zhuanlan.zhihu.com/p/653303123",target:"_blank",rel:"noopener noreferrer"},G={href:"https://huggingface.co/collections/meta-llama/meta-llama-3-66214712577ca38149ebb2b6",target:"_blank",rel:"noopener noreferrer"},F=t("li",null,[t("p",null,"模型大小：有 8B 和 70B 2 个大小。")],-1),H=t("p",null,"预训练：在 15T+ 预料上，用 8k context window 训练。预料中包含了 30 个不同语言的高质量数据，并对 NSFW 数据进行了筛选。同时 Llama 也对各类训练数据的占比进行了研究。",-1),K={href:"https://ai.meta.com/blog/meta-llama-3/",target:"_blank",rel:"noopener noreferrer"},N=t("p",null,[e("在开发 Llama 3 期间，我们对缩放行为进行了几项新的观察。例如，虽然 Chinchilla 最优的 8B 参数模型训练计算量对应约 200B tokens，但我们发现，即使模型在两个数量级更多的数据上训练，模型性能仍然在继续提高。 "),t("strong",null,"我们的 8B 和 70B 参数模型在训练到 15T tokens 时仍然呈现对数线性提升。更大的模型可以用更少的训练计算量达到这些较小模型的性能，但较小的模型通常更受欢迎，因为它们在推理过程中更高效。")],-1),R=t("p",null,[e("为了训练我们最大的 Llama 3 模型，我们结合了三种类型的并行化：数据并行化、模型并行化和流水线并行化。我们最有效的实现方案在同时使用 "),t("strong",null,"16K GPUs 训练时"),e(" ， "),t("strong",null,"每个 GPU 的计算利用率超过 400 TFLOPS。我们在两个定制的 24K GPU 集群上进行了训练。"),e(" 为了最大化 GPU 的正常运行时间，我们开发了一个先进的新训练堆栈，自动化错误检测、处理和维护。我们还大大提高了硬件可靠性和无声数据损坏的检测机制，并开发了新的可扩展存储系统，减少了检查点和回滚的开销。这些改进使整体有效训练时间超过 95%。综合来看，这些改进使 Llama 3 的训练效率相比 Llama 2 提高了约三倍。")],-1),S={href:"https://engineering.fb.com/2024/03/12/data-center-engineering/building-metas-genai-infrastructure/",target:"_blank",rel:"noopener noreferrer"},C=t("li",null,[t("p",null,"post training:"),t("ul",null,[t("li",null,"Llama 3 同时用了 SFT, rejection sampling, PPO 和 DPO。并且他们发现，PPO 和 DPO 对逻辑推理以及代码的任务效果提升很大。"),t("li",null,"Llama 3 在模型质量方面的一些最大改进来自于精心策划这些数据，并对人类标注员提供的注释进行了多轮质量保证。")])],-1),U={href:"https://modelscope.cn/models/LLM-Research/Meta-Llama-3-8B/file/view/master?fileName=config.json&status=1",target:"_blank",rel:"noopener noreferrer"},I=t("li",null,[t("p",null,"模型效果：Llama 3 7B 比 7B 热门模型 Mistral 要好上不少。")],-1),V=t("figure",null,[t("img",{src:u,alt:"image-20240805225831921",tabindex:"0",loading:"lazy"}),t("figcaption",null,"image-20240805225831921")],-1),j=t("p",null,"预训练版本的 Llama 3 70B 比 Mixtral 8*22B 好：",-1),W=t("figure",null,[t("img",{src:_,alt:"image-20240805230010182",tabindex:"0",loading:"lazy"}),t("figcaption",null,"image-20240805230010182")],-1),Y=t("h3",{id:"llama-3-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#llama-3-1","aria-hidden":"true"},"#"),e(" Llama 3.1")],-1),J={href:"https://ai.meta.com/blog/meta-llama-3-1/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://arxiv.org/abs/2407.21783",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://huggingface.co/collections/meta-llama/llama-31-669fc079a0c406a149a5738f",target:"_blank",rel:"noopener noreferrer"},$=a('<ul><li><p>模型大小：8B，70B，405B</p></li><li><p>模型架构：与 llama3 相似，上下文窗口 128k，部分参数不同。</p></li><li><p>预训练：</p><ul><li><p>用 8K 上下文，在 15.6T 上数据。</p></li><li><p>用了多种方法，来对大量的数据进行高质量的筛选。用了自定义的解析器来解析 HTML ，从而更好的处理代码，数学等。论文中提到 markdown 对模型的表现有害，因此他们移除了所有的 markdown marker。</p></li><li><p><strong>数据去重方法：</strong> Heuristic filtering.</p></li><li><p>Model-based quality filtering.</p></li><li><p>Code and reasoning data.</p></li><li><p>Multilingual data.</p></li><li><p>数据混合：50%通用知识，25% 数学和推理，17% 代码，8% 多语言模型。</p></li><li><p>将小部分得质量很好的数据拿出来，在 annealing 阶段单独训练的话，可以提升模型在对应领域的能力。</p></li><li></li></ul></li><li><p>Post Training：用了 SFT + rejection sampling 和 DPO。</p></li></ul><p>模型效果：</p><p>可以重点查看模型 scale up 后的分数提升程度。</p><figure><img src="'+f+'" alt="image-20240805233915707" tabindex="0" loading="lazy"><figcaption>image-20240805233915707</figcaption></figure>',4);function tt(et,lt){const l=s("ExternalLinkIcon");return r(),o("div",null,[w,t("p",null,[t("a",L,[e("开源模型"),n(l)]),e("，"),t("a",B,[e("官方博客 1"),n(l)]),e("，"),t("a",v,[e("官方博客 2"),n(l)])]),k,t("p",null,[t("a",M,[e("Qwen1.5 MOE"),n(l)]),e("，模型总共有 14.3 的参数，实际推理过程中，只是用到了 2.7B。")]),E,A,t("p",null,[t("a",P,[e("Qwen2 Technical Report"),n(l)])]),z,t("p",null,[e("更多模型效果可以查看："),t("a",Q,[e("Qwen2 官网"),n(l)])]),q,t("p",null,[t("a",D,[e("官方 llama 3 博客"),n(l)]),e("，"),t("a",O,[e("github"),n(l)]),e("，"),t("a",T,[e("llama 2 系列回顾"),n(l)]),e("，"),t("a",G,[e("huggingface llama 3 模型权重"),n(l)])]),t("ul",null,[F,t("li",null,[H,t("ul",null,[t("li",null,[t("p",null,[e("以下部分为 GPT 参考翻译"),t("a",K,[e("官方 llama 3 博客"),n(l)]),e("：为了有效利用我们在 Llama 3 模型中的预训练数据，我们投入了大量精力来扩大预训练规模。具体来说，我们开发了一系列详细的缩放法则用于下游基准评估。这些缩放法则使我们能够选择最佳的数据组合，并做出明智的决策，以便最佳利用我们的训练计算资源。重要的是，缩放法则使我们能够在实际训练模型之前预测我们最大模型在关键任务（例如，在 HumanEval 基准上评估的代码生成）上的表现。这有助于确保我们最终模型在各种用例和功能上的出色表现。")]),N,R]),t("li",null,[t("p",null,[t("a",S,[e("Building Meta’s GenAI Infrastructure"),n(l)])])])])]),C,t("li",null,[t("p",null,[e("模型架构：与 llama2 相似，8B 模型也用上了 GQA，但上下文长度等架构参数不太一样，可以参考这个 "),t("a",U,[e("config"),n(l)]),e("。")])]),I]),V,j,W,Y,t("p",null,[t("a",J,[e("官方博客"),n(l)]),e("，"),t("a",X,[e("相关论文"),n(l)]),e("，"),t("a",Z,[e("huggingface 模型仓库"),n(l)]),e("。推荐可以看李沐的论文精读。")]),$])}const it=i(b,[["render",tt],["__file","笔记new_llm.html.vue"]]);export{it as default};
