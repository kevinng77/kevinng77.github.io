import{_ as p,Q as o,V as i,Z as n,a2 as a,Y as e,a1 as l,aQ as t,H as c}from"./framework-8ecb9d65.js";const r="/assets/img/iot_pre/c05740d9d7f86a18b706357469e9cef.png",u="/assets/img/iot_pre/image-20210419224627230.png",d="/assets/img/iot_pre/image-20210423125225426.png",m="/assets/img/iot_pre/image-20210424181229871.png",k="/assets/img/iot_pre/a076f85fd0c7dfcf28250040a995b8d.jpg",v="/assets/img/iot_pre/image-20210414170432612.png",b={},h=n("p",null,"一个很马虎的基于 Arduino MKR 1010 WIFI 的项目，主要用户为忙碌的上班组，或者需要定时了解患者用药情况的监护人。药盒可以在他们忘记吃药的时候发送消息提示（邮件或者 whatsapp），同时他们的用药情况也将会被告知他们的家人/监护人。",-1),g=n("p",null,"文章为产品功能介绍，技术实现与环境搭载经验分享。服务器搭建的步骤建议在 虚拟机上尝试。本项目服务器采用 ubuntu20.04 server，web 服务器使用 BOA。设备端，药盒是基于 arduino 开发的，通过 MQTT 协议与服务器通信。",-1),f={href:"https://github.com/kevinng77/iot_pill_box",target:"_blank",rel:"noopener noreferrer"},_=t('<h2 id="产品使用与功能" tabindex="-1"><a class="header-anchor" href="#产品使用与功能" aria-hidden="true">#</a> 产品使用与功能</h2><h3 id="药盒初始化" tabindex="-1"><a class="header-anchor" href="#药盒初始化" aria-hidden="true">#</a> 药盒初始化</h3><p>初次使用药盒时候需要进行初始化配置：1.设置药盒 WIFI 密钥; 2.设置提醒用药时间。</p><h4 id="将药盒连接至-wifi" tabindex="-1"><a class="header-anchor" href="#将药盒连接至-wifi" aria-hidden="true">#</a> 将药盒连接至 WIFI</h4><ul><li>用户链接药盒的 WIFI pill_box_setting，通过浏览器登录 IP 地址： 192.168.4.1 进行配置。</li></ul><figure><img src="'+r+'" alt="相关图片" height="300" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><ul><li>用户设置 username，家庭网络的 WIFI SSID 和 KEY 并提交。药盒实现联网。</li></ul><h4 id="用户设置提醒用药时间" tabindex="-1"><a class="header-anchor" href="#用户设置提醒用药时间" aria-hidden="true">#</a> 用户设置提醒用药时间</h4><ul><li>第一次使用产品时，用户需要登陆官网 http://ngkaman.nat300.top/ 进行注册，填写药盒的 username，密码，监护人邮箱，个人邮箱，三次用药的提示时间，以及晚上填充药时间。</li></ul><figure><img src="'+u+'" alt="image-20210419224627230" tabindex="0" loading="lazy"><figcaption>image-20210419224627230</figcaption></figure><p><em>（图：产品官网截图）</em></p><ul><li>系统自动初始化用药时间为 8 点，12 点，18 点，用户可以在产品官网登陆账号进行用药时间的重置。</li><li>用可以通过官网修改邮箱的联系方式</li></ul><h3 id="用户使用产品期间" tabindex="-1"><a class="header-anchor" href="#用户使用产品期间" aria-hidden="true">#</a> 用户使用产品期间：</h3><ul><li><p>药盒发出三次用药提醒：</p><ul><li><p>用药时间点，药盒进行第一次判断，若对应的药槽还有残留药物，则药盒判定为用户没有用药，用户将会接收到用药提醒邮件。</p><figure><img src="'+d+'" alt="相关图片" height="300" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p><em>（图：未吃药邮件通知）</em></p></li><li><p>若第一次判断用户没有吃药，药盒会再 10 分钟后进行第二次判断，若对应的药槽还有残留药物，则该用药用户将会接收到用药第二次提醒邮件。</p></li><li><p>若第二次判断用户没有吃药，药盒会再 10 分钟后进行第三次判断，若对应的药槽还有残留药物，则 <strong>患者监护人</strong> 将会接收到用药提醒邮件。后续药盒将不再通知患者进行用药。</p></li></ul></li><li><p>每晚填药提醒：夜晚填药时间，若存在药槽未填充药物，用户联系人将会收到填药提醒。</p></li><li><p>每月用户会收到文字版月度用药记录</p></li></ul><h2 id="信息传输细节" tabindex="-1"><a class="header-anchor" href="#信息传输细节" aria-hidden="true">#</a> 信息传输细节</h2><p>所有的消息都是通过 MQTT 协议进行发布与订阅，本项目中对传输的消息并没有加密，容易造成他人的恶意数据改造。</p><figure><img src="'+m+'" alt="image-20210424181229871" tabindex="0" loading="lazy"><figcaption>image-20210424181229871</figcaption></figure><h2 id="设计与考虑" tabindex="-1"><a class="header-anchor" href="#设计与考虑" aria-hidden="true">#</a> 设计与考虑</h2><p>监护人/亲属必须使用网络获取用药者用药记录，因此 IoT 是产品实现的必须选择。</p><p><strong>为什么不用手机 APP？</strong></p><p>通过 Androd APP 编写 MQTT 实现消息的接收同样可以实现绝大部分的产品功能，而且相对的通过手机 APP 可以更好的控制各种消息的接法，无需考虑由于使用邮件传输或者 Whatsapp 等其他主流通讯传输手段的成本，设计开发起来也更加容易，然而 Androd APP 存在部分考虑：</p><ol><li>后台运行或消息发送被屏蔽。相对于通过专属 APP 进行消息推送，用户更经常检查 whatsapp 推送的消息，因此避免了因手机系统屏蔽问题而产生的消息遗漏。</li><li>安装软件会是用户考虑使用该产品的因素，用户需要时间去熟悉 app 界面与操作，接受 APP 的隐私协议，这些都是用户流失的潜在隐患，对于本产品而言，并没有太多使用 app 的必要。</li><li>项目开始使用的是 Whatsapp 通知，Whatsapp 的成本会比 Androd App 高，起初的尝试是使用 Selenium 控制 google drive 进行消息推送。如果需要使用稳定的 whatsapp 推送，需要申请使用 Whatsapp Business，申请的成本或许会比写一个 APP 要高很多。但是由于网页的源代码的变化 Selenium 控制的 Whatsapp 并不稳定，所以最后使用 SMTP 邮箱通知代替。如果可以使用 Whatsapp Business API，那么效果肯定是最好的。</li></ol><p><strong>Arduino MRK 1010 的替代品</strong> ：</p><p>理论上 ESP8266 或者 ESP32 实现的 WIFI 设备都可以实现这些功能。</p><p><strong>为什么使用 IR sensor（红外避障传感器）对药物进行检测？</strong></p><p>不同于大多数的智能药盒，通过药盒槽门的开关来判断用户是否吃药，使用 IR 传感器对药物直接进行判断可以避免了用户开了盒子却又忘了吃药的情况。IR 传感器的成本相对较低，对近距离的物体检测较为准确。为了避免误报，部分药盒面也被设计处理成反射红外量少的黑色。</p><p><img src="'+k+'" alt="相关图片" loading="lazy"><em>（药盒半成品，为了演示并没有放上盖子）</em></p><p>传感器部分使用了 IR sensor（红外避障传感器）对药物进行简单的检测。然而传感器的准确度也影响了药盒的准确度。为了减小因为传感器的失误而发送的 fakenews，程序只有再进入了用户设定的用药时间段才会进行药物检测。</p><h1 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h1><p>服务器系统为 Ubuntu 20.04</p><h3 id="配置-mqtt" tabindex="-1"><a class="header-anchor" href="#配置-mqtt" aria-hidden="true">#</a> 配置 MQTT</h3><p>MQTT 由 IBM 公司开发的，90 年代的产物，IBM 为了解决是由公司管道检测问题，当时卫星数量不够，卫星通信比基站通信费用更高，管道几百公里，每隔几百米就会安插采集点。</p><p>解决问题： 1、服务器必须要实现成千上万客户端的接入 2、单次数据数据量小，但不能出错 3、必须能够适应高延迟、偶尔断网等通信不可靠的风险 4、根据数据的重要程度和特性，设置不同等级的服务质量(session)</p><p>以下使用 mosquitto，用其他的也行。</p><h3 id="mosquitto-在-ubuntu20-04-环境安装" tabindex="-1"><a class="header-anchor" href="#mosquitto-在-ubuntu20-04-环境安装" aria-hidden="true">#</a> mosquitto 在 ubuntu20.04 环境安装：</h3>',35),w={href:"https://mosquitto.org/",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>先尝试是否可以直接动过 <code>apt-get install</code>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mosquitto <span class="token parameter variable">-y</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mosquitto-clients
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若遇到<code>apt-add command not found</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-software-properties
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> software-properties-common 
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>开放防火墙 1883/tcp</strong></p><p>检查防火墙情况 <code>sudo ufw status</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span>
<span class="token function">sudo</span> ufw allow <span class="token number">80</span>
<span class="token function">sudo</span> ufw allow <span class="token number">1883</span>
<span class="token comment"># 或使用 sudo ufw allow 1883/tcp</span>
ufw reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">1883</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token function">sudo</span> iptables-save
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iptables-persistent
<span class="token function">sudo</span> netfilter-persistent save
<span class="token function">sudo</span> netfilter-persistent reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后把<code>/etc/mosquitto/mosquitto.conf</code>中注释掉下面这两行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># persistence_location /var/lib/mosquitto/</span>
<span class="token comment"># log_dest file /var/log/mosquitto/mosquitto.log</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="相关图片" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>配置工作到这里就完成了</p><h3 id="mosquitto-基本操作" tabindex="-1"><a class="header-anchor" href="#mosquitto-基本操作" aria-hidden="true">#</a> mosquitto 基本操作：</h3><p><strong>启动服务器， 指定配置文件位置</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mosquitto <span class="token parameter variable">-c</span> /etc/mosquitto/mosquitto.conf <span class="token parameter variable">-p</span> <span class="token number">1883</span> <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在本机中测试更多参数选择操作:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mosquitto_sub <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-t</span> temp <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.235.130 <span class="token parameter variable">-p</span> <span class="token number">1883</span> <span class="token parameter variable">-q</span> <span class="token number">2</span> //-h 指定主机 <span class="token parameter variable">-p</span> 指定端口 <span class="token parameter variable">-q</span> 指定通讯质量
mosquitto_pub <span class="token parameter variable">-d</span> <span class="token parameter variable">-t</span> temp <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.235.130 <span class="token parameter variable">-p</span> <span class="token number">1883</span> <span class="token parameter variable">-m</span> hello <span class="token parameter variable">-q</span> <span class="token number">2</span> //对于 public 也一样可以指定主机和端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>完成本机测试后，在一个终端下订阅是可以接收到另一个终端发布的内容的，要实现不同 ip 间的通讯，需要设置非匿名登录。Mosquitto 最新版本默认不允许匿名外网访问。</p><h3 id="mosquitto-非匿名登录配置" tabindex="-1"><a class="header-anchor" href="#mosquitto-非匿名登录配置" aria-hidden="true">#</a> mosquitto 非匿名登录配置：</h3><p>修改配置 <code>/etc/mosquitto/mosquitto.conf</code></p><p>添加：</p><p><code>allow_anonymous false</code></p><p><code>password_file /etc/mosquitto/passwd.conf</code></p><p><code>listener 1883</code></p><p><strong>服务端创建用户</strong></p><ul><li>隐藏密码创建</li></ul><p><code>sudo mosquitto_passwd -c /etc/mosquitto/passwd.conf username</code></p><ul><li>明文创建</li></ul><p><code>sudo mosquitto_passwd -b /etc/mosquitto/passwd.conf username pwd</code></p><p><strong>配置好后测试一下，先启动服务器</strong></p><p><code>mosquitto -c /etc/mosquitto/mosquitto.conf</code></p><p>在计算机 A 上订阅：<code>mosquitto_sub -t &quot;temp&quot; -u username -P 111111</code></p><p>在计算机 B 上发布：<code>mosquitto_pub -t &quot;temp&quot; -m &quot;hello&quot; -u username -P 111111</code></p><p>A 收到消息表示成功</p><p>以上的方式中，传输的信息是明文，并不安全，真实使用中应该在进行 TLS 加密，具体请查看[我的博客], 若无法通过 apt-get 安装，那么就需要手动移植。</p><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3>`,36),q={href:"https://mosquitto.org/api/files/mosquitto-h.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>注意编译时使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc mosquito.c <span class="token parameter variable">-o</span> mosquito <span class="token parameter variable">-lmosquitto</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Python API</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> full-upgrade <span class="token parameter variable">-y</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3.9 python3.9-venv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用搭建安全的虚拟环境:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> ~/apps
<span class="token builtin class-name">cd</span> ~/apps
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/apps/env

python3.9 <span class="token parameter variable">-m</span> venv ~/apps/env
<span class="token builtin class-name">.</span> ~/apps/env/bin/activate
pip3.9 <span class="token function">install</span> wheel
pip3.9 <span class="token function">install</span> pyserial paho-mqtt requests dweepy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),I={href:"https://github.com/kevinng77/iot_pill_box/tree/main/mqtt_py",target:"_blank",rel:"noopener noreferrer"},P=n("h2",{id:"配置-natapp-内网穿透",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#配置-natapp-内网穿透","aria-hidden":"true"},"#"),a(" 配置 natapp 内网穿透")],-1),A={href:"https://natapp.cn/tunnel/buy/free",target:"_blank",rel:"noopener noreferrer"},E={href:"https://blog.csdn.net/hyh17808770899/article/details/108936090",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>实现后台运行可以运行命令<code>nohup ./natapp -authtoken=xxxx -log=stdout &amp;</code>实现，但是这样的话我们就无法看到运行后随机域名是多少，所以需要进行如下配置：</p><p>编写脚本 natapp.sh</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vi</span> natapp.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加下面的语句，然后保存退出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function">rm</span> /home/kevin/Desktop/iot/natapp/nohup.out
<span class="token function">touch</span> nohup.out
<span class="token function">service</span> mosquitto stop
mosquitto <span class="token parameter variable">-c</span> /etc/mosquitto/mosquitto.conf <span class="token parameter variable">-d</span>
/home/kevin/share/myboa/boa/boa
<span class="token builtin class-name">cd</span> /home/kevin/Desktop/iot/natapp
<span class="token function">nohup</span> /usr/local/natapp/natapp <span class="token operator">&amp;</span>
<span class="token function">nohup</span> /usr/local/natappweb/natapp <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对该脚本进行授权</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>chmod <span class="token number">777</span> natapp<span class="token punctuation">.</span>sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>/usr/local/natapp/natapp</code> 和 <code>/usr/local/natappweb/natapp</code>目录下添加 config.ini 文件，当然你也可以使用 <code>natapp -authtoken=xxx</code>来执行 natapp，在运行时传入配置参数，那么就不需要配置这边的文件。</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code><span class="token comment">#将本文件放置于 natapp 同级目录 程序将读取 [default] 段</span>
<span class="token comment">#在命令行参数模式如 natapp -authtoken=xxx 等相同参数将会覆盖掉此配置</span>
<span class="token comment">#命令行参数 -config= 可以指定任意 config.ini 文件</span>
<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">default</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">authtoken</span><span class="token punctuation">=</span><span class="token value attr-value">77fa4653298558f9                      #对应一条隧道的 authtoken</span>
<span class="token key attr-name">clienttoken</span><span class="token punctuation">=</span>         <span class="token value attr-value">#对应客户端的 clienttoken,将会忽略 authtoken,若无</span>
请留空,
<span class="token key attr-name">log</span><span class="token punctuation">=</span><span class="token value attr-value">stdout             #log 日志文件,可指定本地文件, none=不做记录,stdout=直接屏幕输出 ,默认为 none</span>
<span class="token key attr-name">loglevel</span><span class="token punctuation">=</span><span class="token value attr-value">INFO                  #日志等级 DEBUG, INFO, WARNING, ERROR 默认为 DEBUG</span>
<span class="token key attr-name">http_proxy</span><span class="token punctuation">=</span>                     <span class="token value attr-value">#代理设置 如 http://10.123.10.10:3128 非代理上&gt;网用户请务必留空</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果多次执行 natapp.sh 文件的话，请关掉多余的进程</strong> <code>ps -ef|grep natapp</code> <code>kill -9 2777</code></p><p>配置完成 antapp 后，我们可以通过 mosquitto 订阅，其中 ip 地址设置如下：</p><p><code>mosquitto_sub -t record -h server.natappfree.cc -u user22 -P 111111 -p 35444</code></p><p>端口也需要指定到 natapp 的端口</p><p>为免费的内网穿透服务搞个 ip 与 web 名称抓取，抓取后就可以自动开启 mqtt 服务了。如果是付费用户就不用了：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">run_main</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">:</span>
    client <span class="token operator">=</span> mqtt<span class="token punctuation">.</span>Client<span class="token punctuation">(</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span>reinitialise<span class="token punctuation">(</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span>on_connect <span class="token operator">=</span> on_connect
    client<span class="token punctuation">.</span>on_message <span class="token operator">=</span> on_message
    client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span>loop_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_server_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;../natapp/nohup.out&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        a <span class="token operator">=</span> fp<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
        ip <span class="token operator">=</span> <span class="token string">&quot;192.168.235.131&quot;</span> 
        port <span class="token operator">=</span> <span class="token string">&quot;1883&quot;</span>
        web_add <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
            web <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;http://.+\\.natappfree\\.cc&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            <span class="token keyword">if</span> web<span class="token punctuation">:</span>
                web_add <span class="token operator">=</span> web<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            ip_port <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&#39;tcp://.+\\.natappfree\\.cc:[\\d]+&#39;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            <span class="token keyword">if</span> ip_port<span class="token punctuation">:</span>
                ip <span class="token operator">=</span> ip_port<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span>
                port <span class="token operator">=</span> ip_port<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> ip<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> web_add

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    ip<span class="token punctuation">,</span>port<span class="token punctuation">,</span>web_add <span class="token operator">=</span> get_server_ip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;ip:</span><span class="token interpolation"><span class="token punctuation">{</span>ip<span class="token punctuation">}</span></span><span class="token string">,port:</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">,web:</span><span class="token interpolation"><span class="token punctuation">{</span>web_add<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    run_main<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="whatsapp-控制" tabindex="-1"><a class="header-anchor" href="#whatsapp-控制" aria-hidden="true">#</a> Whatsapp 控制</h2><p>在许久的查阅后，通过服务器实现发送 whatsapp 通知的方法有两种，一是通过 whatsapp Business API，使用需要有公司进行注册，好吧那只好为了我的小 project 去注册一个公司了 doge.jpg。</p>`,17),W={href:"https://pypi.org/project/whatsapp-web/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://long97.blog.csdn.net/article/details/103619926?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>安装后在 python 中导入</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">import</span> time
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建立链接</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">&#39;/usr/local/share/chromedriver&#39;</span><span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;https://web.whatsapp.com/&quot;</span><span class="token punctuation">)</span>
wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送消息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>whatsapp_account <span class="token operator">=</span> <span class="token string">&quot;+65 1234 1234&quot;</span>
message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;nihao 666&quot;</span></span>
user_xpath <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;//span[@title=&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>whatsapp_account<span class="token punctuation">}</span></span><span class="token string">&quot;]&#39;</span></span>
group_title <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span>user_xpath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
group_title<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
inp_xpath <span class="token operator">=</span> <span class="token string">&#39;//div[@class=&quot;_2A8P4&quot;]&#39;</span>
input_box <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> inp_xpath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
input_box<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>message <span class="token operator">+</span> Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>user_xpath</code> 与 <code>inp_xpath</code> 分别为用户名称和输入框的 Xpath 地址，建议使用 Chrome Xpath helper 拓展插件查看。</p><h2 id="web-服务器搭建" tabindex="-1"><a class="header-anchor" href="#web-服务器搭建" aria-hidden="true">#</a> Web 服务器搭建</h2><p>本项目使用的是 BOA 服务器，具体的搭建教程网上很丰富，这边不展开讨论。</p><p>下载源码 http://www.boa.org/</p><p>创建相关文件路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /home/kevin/share/myboa
<span class="token builtin class-name">cd</span> myboa
<span class="token function">mkdir</span> boa
<span class="token function">mkdir</span> log
<span class="token function">mkdir</span> www
<span class="token function">mkdir</span> www/cgi-bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 <code>sudo apt-get install bison sudo apt-get install flex</code></p><p>解压 <code>tar -xzf boa-0.94.13.tar.gz</code></p><p>进入 <code>cd src ./configure</code> 配置文件</p><p>修改 defines.h 30 行左右的 服务器根路径为<code>boa.conf</code>存放的路径</p><p><code>#define SERVER_ROOT &quot;/home/linux/share/myboa/boa&quot;</code></p><p>注释掉 boa.c 226 行左右的</p><p><code>if (setuid(0) != -1) {DIE(&quot;icky Linux kernel bug!&quot;);}</code></p><p>修改 compat.h 120 行左右的 <code>#define TIMEZONE_OFFSET(foo) foo##-&gt;tm_gmtoff</code> 为：</p><p><code>#define TIMEZONE_OFFSET(foo) (foo)-&gt;tm_gmtoff</code></p><p>编译 make</p><p>将 boa-0.94.13/src 目录下生成的两个二进制文件复制到指定的 boa 目录下 <code>cp boa /home/kevin/share/myboa/boa</code><code>cp boa_indexer/home/kevin/share/myboa/boa</code> (2)将 boa-0.94.13 目录下的 boa.conf 复制到指定的 boa 目录下 <code>cp boa.conf /home/kevin/share/myboa/boa</code></p><p>创建 log 文件</p><p><code>touch /home/kevin/share/myboa/log/error_log</code><code>touch /home/kevin/share/myboa/log/access_log</code></p><p>配置 boa.conf 里面的内容 <code>cd /home/kevin/share/myboa/boa vi boa.conf</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>User <span class="token number">0</span> Group <span class="token number">0</span>
ErrorLog <span class="token operator">/</span>home<span class="token operator">/</span>kevin<span class="token operator">/</span>share<span class="token operator">/</span>myboa<span class="token operator">/</span>log<span class="token operator">/</span>error_log
AccessLog <span class="token operator">/</span>home<span class="token operator">/</span>kevin<span class="token operator">/</span>share<span class="token operator">/</span>myboa<span class="token operator">/</span>log<span class="token operator">/</span>access_log
DocumentRoot <span class="token operator">/</span>home<span class="token operator">/</span>kevin<span class="token operator">/</span>share<span class="token operator">/</span>myboa<span class="token operator">/</span>www
DirectoryMaker <span class="token operator">/</span>home<span class="token operator">/</span>kevin<span class="token operator">/</span>share<span class="token operator">/</span>myboa<span class="token operator">/</span>boa<span class="token operator">/</span>boa_indexer
ScriptAlias <span class="token operator">/</span>cgi<span class="token operator">-</span>bin<span class="token operator">/</span> <span class="token operator">/</span>home<span class="token operator">/</span>kevin<span class="token operator">/</span>share<span class="token operator">/</span>myboa<span class="token operator">/</span>www<span class="token operator">/</span>cgi<span class="token operator">-</span>bin<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="web-设计" tabindex="-1"><a class="header-anchor" href="#web-设计" aria-hidden="true">#</a> web 设计</h3>`,28),M={href:"https://codepen.io/khadkamhn/pen/ZGvPLo",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/kevinng77/iot_pill_box/tree/main/www",target:"_blank",rel:"noopener noreferrer"},F=n("h3",{id:"实现原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现原理","aria-hidden":"true"},"#"),a(" 实现原理：")],-1),S=n("p",null,[a("配置 "),n("code",null,"update.js"),a("文件，通过 CGI 运行 C 程序。从表单中提取对应的信息，通过 sqlite3 API 与 mosquitto API，将用户修改的时间发送到 主题 setting/+ 下。设备端订阅该主题，接收到后充值时间变量，从而实现通过网页端改变设备上的时间。")],-1);function N(D,O){const s=c("ExternalLinkIcon");return o(),i("div",null,[n("blockquote",null,[h,g,n("p",null,[a("本文中代码均为截取，具体源码请移步 "),n("a",f,[a("我的 github"),e(s)])])]),l("more"),_,n("p",null,[n("a",w,[a("mosquitto 官网"),e(s)])]),y,n("p",null,[n("a",q,[a("MQTT C API"),e(s)])]),x,n("p",null,[a("安装好之后就可以用了，本次项目的主要 mqtt 通信也是通过 python API 完成 "),n("a",I,[a("案例链接"),e(s)]),a("，使用 python 主要因为本人对于 python 更了解，C 与 python 的孰优孰劣并不晓得。python API 还是很方便的查看 paho-mqtt 的 documentation 了解到更多的操作。")]),P,n("p",null,[n("a",A,[a("natapp 网站"),e(s)])]),n("p",null,[a("具体的配置过程"),n("a",E,[a("这篇博客"),e(s)]),a("有了详细的介绍，因为免费的 natapp 只提供一个端口的内网穿透，因此本项目中申请了两个隧道，分别对应 1883/tcp 与 80，获得两个 authtoken 后配置 sh 文件分别执行两次 natapp 就行了")]),T,n("p",null,[a("另一种方式也是本项目中采用的，使用 selenium 来控制浏览器实现消息发送。网上有人发布了一个 python whatsapp-web 的库，但是并不实用，也是通过 selenium 来实现，然鹅 whatsapp 的 xpath 随着时间和地区改变，那个包自然也会出现很多 bug。读者可以尝试一下，不行的话不必太执着，自己写效率也很高。"),n("a",W,[a("whatsapp-web 链接"),e(s)])]),n("p",null,[a("本项目的 Selenium driver 使用了 Chrome，首先需要安装 Chrome，网上经验丰富这边不在阐述，可以参考这篇"),n("a",B,[a("Ubuntu16.04 安装 chromedriver、chrome 及 运行 selenium"),e(s)])]),C,n("p",null,[a("web 主要为用户提供 注册账户，修改 whatsapp，修改药盒提示时间功能。本次项目的 HTML 设计主要改动与 "),n("a",M,[a("Day 001 login form"),e(s)]),a(" 仅学习，非商用。源码也放在了 "),n("a",R,[a("我的 github"),e(s)]),a(" 上。")]),F,S])}const j=p(b,[["render",N],["__file","iot_pre操作汇总.html.vue"]]);export{j as default};
