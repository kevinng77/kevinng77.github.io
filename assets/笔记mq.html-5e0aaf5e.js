import{_ as p,E as o,S as c,W as i,$ as n,a3 as s,Z as e,aS as t}from"./framework-d5c0d2cb.js";const l={},u=t('<h1 id="message-queue" tabindex="-1"><a class="header-anchor" href="#message-queue" aria-hidden="true">#</a> Message Queue</h1><p>MQ 选型</p><p>当消息量不大时 RabbitMQ 效果挺不错。但 RabbitMQ 的 erlang 导致他 debug 成本高。相对的 Kafka，rocketMQ 的分布式+支持堆积消息优势性大。但似乎 rabbitMQ 更容易部署。</p><h1 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h1><h2 id="rabbitmq-安装" tabindex="-1"><a class="header-anchor" href="#rabbitmq-安装" aria-hidden="true">#</a> RabbitMQ 安装</h2>',5),r={href:"https://www.rabbitmq.com/getstarted.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--name</span> rabbitmq <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>kevin <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token number">777777</span> <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 rabbitmq:3-management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问 UI 管理界面：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://192.168.1.104:15672/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>python 客户端安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> pika <span class="token parameter variable">--upgrade</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h3><p>最基础的消息队列架构为：</p><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-one-overall.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中由生产者、队列、消费者组成。</p><p>基础生产者需要：</p><ol><li>建立链接</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pika<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> os

<span class="token comment"># 建立链接</span>
    credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;kevin&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;777777&#39;</span><span class="token punctuation">)</span>
    connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>
    channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),k={start:"2"},v={href:"https://www.rabbitmq.com/queues.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
                        durable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># 队列里面的消息是否化磁盘) 默认况消息存储在内存中</span>
                        exclusive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># 该队列是否只供一个消费者进行消费 是否进行消息共享，true 可以多个消费者消费 false:只能一个消费者消费</span>
                        auto_delete<span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment"># 是否自动删除 最后一个消费者端开连接以后 该队一句是否自动删除 true 自动删除 false 不自动删除</span>
                        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>发送消息：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 通过 exchange 将消息发送到 queue</span>
<span class="token comment"># 因为是 hello world 教程，我们在这里直接将消息发送到队列中。</span>
<span class="token comment"># If we send a message to non-existing location, RabbitMQ will just drop the message.</span>
channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                      routing_key<span class="token operator">=</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># The queue name needs to be specified here</span>
                      body<span class="token operator">=</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>接收端</li></ol><details class="hint-container details"><summary>基础消费者</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token keyword">import</span> pika<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> os

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token comment"># 建立链接等操作与 sender 相同</span>

    <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot; [x] Received </span><span class="token interpolation"><span class="token punctuation">{</span>body<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        
        
    channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
                        auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                        on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39; [*] Waiting for messages. To exit press CTRL+C&#39;</span><span class="token punctuation">)</span>
    channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="work-queue" tabindex="-1"><a class="header-anchor" href="#work-queue" aria-hidden="true">#</a> work queue</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-two.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>多个工作者轮询接收并处理消息，每个消息准确地被处理一次。</p><h4 id="消息丢失处理" tabindex="-1"><a class="header-anchor" href="#消息丢失处理" aria-hidden="true">#</a> 消息丢失处理</h4>`,9),m={href:"https://www.rabbitmq.com/confirms.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>在使用 RabbitMQ 时，如果工作进程在任务完成前终止，可能会导致消息丢失。为防止这种情况，RabbitMQ 提供了消息确认机制。消费者处理完消息后，需要向 RabbitMQ 发送确认（ack）。如果消费者在未发送确认的情况下死亡，RabbitMQ 会重新排队这些消息，并可能分配给其他在线消费者。</p><p>默认情况下，消息确认是手动的。在之前的示例中，我们通过设置 <code>auto_ack=True</code> 来关闭此功能，但现在应该移除此标志，并在任务完成后发送确认。以下是一个示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot; [x] Received </span><span class="token interpolation"><span class="token punctuation">{</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>body<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">b&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot; [x] Done&quot;</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag <span class="token operator">=</span> method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>

channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样即使在处理消息时强行终止工作进程，也不会丢失消息。确认必须通过接收消息的同一通道发送，否则会导致协议异常。</p><ol start="2"><li><strong>消息持久化</strong></li></ol><p>为防止 RabbitMQ 服务器停止时任务丢失，需将队列和消息标记为持久化。首先，声明队列为持久化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果已有同名非 <strong>持久化队列</strong> ，需使用不同名称，例如 <code>task_queue</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;task_queue&#39;</span><span class="token punctuation">,</span> durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此更改需同时应用于生产者和消费者代码。接下来，将 <strong>消息标记为持久化</strong> ，设置 <code>delivery_mode</code> 为 <code>pika.spec.PERSISTENT_DELIVERY_MODE</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                      routing_key<span class="token operator">=</span><span class="token string">&quot;task_queue&quot;</span><span class="token punctuation">,</span>
                      body<span class="token operator">=</span>message<span class="token punctuation">,</span>
                      properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>
                         delivery_mode <span class="token operator">=</span> pika<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>PERSISTENT_DELIVERY_MODE
                      <span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，即使消息标记为持久化，也无法完全保证不丢失，因为 RabbitMQ 可能未立即将消息保存到磁盘。如需更强保证，可使用发布者确认机制。</p><ol start="3"><li><strong>轮询策略</strong></li></ol><p>换句话说，直到工作者处理并确认了前一个消息之前，不要向其分发新消息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># worker 中定义</span>
channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="交换机-exchange" tabindex="-1"><a class="header-anchor" href="#交换机-exchange" aria-hidden="true">#</a> 交换机 Exchange</h2><h3 id="发布订阅模式-fanout-交换机" tabindex="-1"><a class="header-anchor" href="#发布订阅模式-fanout-交换机" aria-hidden="true">#</a> 发布订阅模式（fanout 交换机）</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/exchanges.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>RabbitMQ 的核心：生产者不直接向队列发送消息，而是只能发送到交换机。</p><p>交换机类型包括 <code>direct</code>, <code>topic</code>, <code>headers</code> and <code>fanout</code>。我们关注 <code>fanout</code> 类型（用于广播），创建一个名为 <code>logs</code> 的交换机：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;logs&#39;</span><span class="token punctuation">,</span> exchange_type<span class="token operator">=</span><span class="token string">&#39;fanout&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发送端" tabindex="-1"><a class="header-anchor" href="#发送端" aria-hidden="true">#</a> 发送端</h4><p>扇出交换机将消息广播到所有队列。</p><p>我们之前使用的是默认交换机（用空字符串 &quot;&quot; 表示），它将消息路由到指定名称的队列。现在，我们改为使用命名的交换机 <code>logs</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;logs&#39;</span><span class="token punctuation">,</span> routing_key<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> body<span class="token operator">=</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用发送确认：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Turn on delivery confirmations</span>
channel<span class="token punctuation">.</span>confirm_delivery<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
                          routing_key<span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
                          body<span class="token operator">=</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">,</span>
                          properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>content_type<span class="token operator">=</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">,</span>
                                                          delivery_mode<span class="token operator">=</span>pika<span class="token punctuation">.</span>DeliveryMode<span class="token punctuation">.</span>Transient<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Message publish was confirmed&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> pika<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>UnroutableError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Message could not be confirmed&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接收端" tabindex="-1"><a class="header-anchor" href="#接收端" aria-hidden="true">#</a> 接收端</h4><p>在接收端，需要定义一个 queue 来绑定到对应的 exchange 上。</p><ol><li>定义一个临时队列</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>result <span class="token operator">=</span> channel.queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;&#39;</span>, <span class="token assign-left variable">exclusive</span><span class="token operator">=</span>True<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>绑定 queue 和 exchange</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;logs&#39;</span><span class="token punctuation">,</span>
                   queue<span class="token operator">=</span>result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="routing-路由-direct-交换机" tabindex="-1"><a class="header-anchor" href="#routing-路由-direct-交换机" aria-hidden="true">#</a> Routing 路由（direct 交换机）</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-four.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>使用 direct 模式时，队列可以和交换机绑定。该模式下，可以自由指定哪些消息要去到哪个队列。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以想象交换机为一个 mapping，其中储存了 <code>routing_key:queue</code> 的键值对。</p></div><h4 id="通道配置" tabindex="-1"><a class="header-anchor" href="#通道配置" aria-hidden="true">#</a> 通道配置</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;direct_logs&#39;</span><span class="token punctuation">,</span> exchange_type<span class="token operator">=</span><span class="token string">&#39;direct&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发送端-1" tabindex="-1"><a class="header-anchor" href="#发送端-1" aria-hidden="true">#</a> 发送端</h4><p>比如往 <code>direct_logs</code> 交换机发送 <code>info</code> 类型的信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>
    exchange<span class="token operator">=</span><span class="token string">&#39;direct_logs&#39;</span><span class="token punctuation">,</span> routing_key<span class="token operator">=</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">,</span> body<span class="token operator">=</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接收端-1" tabindex="-1"><a class="header-anchor" href="#接收端-1" aria-hidden="true">#</a> 接收端</h4><p>首先定义 exchange 和 queue：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;direct_logs&#39;</span><span class="token punctuation">,</span> exchange_type<span class="token operator">=</span><span class="token string">&#39;direct&#39;</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定 exchange 和 queue，让这个 queue 接受 <code>info</code> 类型的信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>
        exchange<span class="token operator">=</span><span class="token string">&#39;direct_logs&#39;</span><span class="token punctuation">,</span> queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span> routing_key<span class="token operator">=</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个队列可以和交换机绑定多个 <code>routing_key</code>。绑定多个 <code>routing_key</code> 需要多次调用 <code>channel.queue_bind</code>。</p><h3 id="主题模式-topic-交换机" tabindex="-1"><a class="header-anchor" href="#主题模式-topic-交换机" aria-hidden="true">#</a> 主题模式（topic 交换机）</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-five.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>相对于 direct 交换机模式，一个 queue 可以用不同的 tag 来命名，比如一个 queue 可以命名为 <code>&lt;celerity&gt;.&lt;color&gt;.&lt;species&gt;</code>，其中包含三种 tag。topic 模式让我们能够使用 <code>*</code>（匹配任意 1 个 tag）, <code>#</code>（匹配 0+ 个任意的 tag） 对 tag 进行匹配。</p><p>比如发布到 <code>lazy.orange.rabbit</code> 的消息会被主题 <code>*.orange.*</code> 接收到。</p><h4 id="通道配置-1" tabindex="-1"><a class="header-anchor" href="#通道配置-1" aria-hidden="true">#</a> 通道配置</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;topic_logs&#39;</span><span class="token punctuation">,</span> exchange_type<span class="token operator">=</span><span class="token string">&#39;topic&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发送方" tabindex="-1"><a class="header-anchor" href="#发送方" aria-hidden="true">#</a> 发送方</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>routing_key <span class="token operator">=</span> <span class="token string">&quot;lazy.orange.rabbit&quot;</span>
channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>
    exchange<span class="token operator">=</span><span class="token string">&#39;topic_logs&#39;</span><span class="token punctuation">,</span> routing_key<span class="token operator">=</span>routing_key<span class="token punctuation">,</span> body<span class="token operator">=</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接收端-2" tabindex="-1"><a class="header-anchor" href="#接收端-2" aria-hidden="true">#</a> 接收端</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 声明任意的队列</span>
result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue

<span class="token comment"># 绑定队列到对应的 binding_key</span>
binding_key <span class="token operator">=</span> <span class="token string">&quot;*.orange.*&quot;</span>
channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>
        exchange<span class="token operator">=</span><span class="token string">&#39;topic_logs&#39;</span><span class="token punctuation">,</span> queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span> routing_key<span class="token operator">=</span>binding_key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc" aria-hidden="true">#</a> RPC</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-six.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当接收方的 worker 需要执行 remote server 的代码，并等待执行结果时，我们需要用到 RPC。</p><p>进行远程处理时，需要明确的指出：</p><ul><li>对 remote 消息进行 error handle 处理（比如长时间未回复）</li><li>明确区分 worker 当中的本地执行任务和远程执行任务。</li><li>请做好详细的文档注释</li></ul><h4 id="通道构建" tabindex="-1"><a class="header-anchor" href="#通道构建" aria-hidden="true">#</a> 通道构建</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 服务端定义主通道</span>
channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;rpc_queue&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><p>在这个机器上，我们可能需要运行一些耗时的任务。当接收到 client 发出的消息后，开始任务的工作，而后将工作结果 <code>publish</code> 到回复队列中去。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">on_request</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> props<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
    response <span class="token operator">=</span> fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment"># run your slow tasks here</span>
    <span class="token keyword">import</span> time 
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
                     routing_key<span class="token operator">=</span>props<span class="token punctuation">.</span>reply_to<span class="token punctuation">,</span>  <span class="token comment"># 特定回复通道</span>
                     properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>correlation_id <span class="token operator">=</span> \\
                                                         props<span class="token punctuation">.</span>correlation_id<span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token comment"># 这个执行结果对应的 UUID</span>
                     body<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    ch<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>



channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;rpc_queue&#39;</span><span class="token punctuation">,</span> on_message_callback<span class="token operator">=</span>on_request<span class="token punctuation">)</span>

channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 客户端定义回复消息通道</span>
result <span class="token operator">=</span> self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>callback_queue <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue

<span class="token comment"># 回复通道也需要定义好 on_response 函数，用来接受回复答案。</span>
self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>
    queue<span class="token operator">=</span>self<span class="token punctuation">.</span>callback_queue<span class="token punctuation">,</span>
    on_message_callback<span class="token operator">=</span>self<span class="token punctuation">.</span>on_response<span class="token punctuation">,</span>
    auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

self<span class="token punctuation">.</span>response <span class="token operator">=</span> <span class="token boolean">None</span>
self<span class="token punctuation">.</span>corr_id <span class="token operator">=</span> <span class="token boolean">None</span>

<span class="token keyword">def</span> <span class="token function">on_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> props<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>corr_id <span class="token operator">==</span> props<span class="token punctuation">.</span>correlation_id<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>response <span class="token operator">=</span> body

<span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>response <span class="token operator">=</span> <span class="token boolean">None</span>
    
    <span class="token comment"># 对于每一次 call，都需要一个单独的 UUID 来确保回复答案的准确性</span>
    self<span class="token punctuation">.</span>corr_id <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>
        exchange<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
        routing_key<span class="token operator">=</span><span class="token string">&#39;rpc_queue&#39;</span><span class="token punctuation">,</span>
        properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>
            reply_to<span class="token operator">=</span>self<span class="token punctuation">.</span>callback_queue<span class="token punctuation">,</span>
            correlation_id<span class="token operator">=</span>self<span class="token punctuation">.</span>corr_id<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        body<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;wait for response?&quot;</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>process_data_events<span class="token punctuation">(</span>time_limit<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;wait for response?&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>response<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="落地推荐" tabindex="-1"><a class="header-anchor" href="#落地推荐" aria-hidden="true">#</a> 落地推荐</h2><h3 id="dlq-死信队列" tabindex="-1"><a class="header-anchor" href="#dlq-死信队列" aria-hidden="true">#</a> DLQ 死信队列</h3>`,72),g={href:"https://www.rabbitmq.com/dlx.html",target:"_blank",rel:"noopener noreferrer"},_=n("ol",null,[n("li",null,"消息 TTL 过期"),n("li",null,"队列达到最大长度"),n("li",null,"消息被拒绝（basic.reject 或 basic.nack） 并且 requeue=false")],-1),y=n("p",null,"pub-sub 模式在实际落地中，建议的操作：",-1),f={href:"https://www.rabbitmq.com/confirms.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.rabbitmq.com/production-checklist.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.rabbitmq.com/monitoring.html",target:"_blank",rel:"noopener noreferrer"};function w(M,R){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("参考"),n("a",r,[s("官网"),e(a)])]),d,n("ol",k,[n("li",null,[s("声明使用的 queue，"),n("a",v,[s("更详细的 queue 指南参考官网"),e(a)])])]),b,n("ol",null,[n("li",null,[n("a",m,[s("message acknowledgement"),e(a)])])]),h,n("p",null,[n("a",g,[s("rabbitMQ 官方"),e(a)])]),_,y,n("ol",null,[n("li",null,[n("a",f,[s("数据安全相关 - Publisher Confirms and Consumer Acknowledgements"),e(a)])]),n("li",null,[n("a",q,[s("Production Checklist"),e(a)])]),n("li",null,[n("a",x,[s("Monitoring"),e(a)]),s(".")])])])}const Q=p(l,[["render",w],["__file","笔记mq.html.vue"]]);export{Q as default};
