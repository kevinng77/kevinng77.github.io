import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as t,a as n,b as s,d as a,e as c,f as l}from"./app-ab9a0e9f.js";const r={},d=l('<h1 id="poetry" tabindex="-1"><a class="header-anchor" href="#poetry" aria-hidden="true">#</a> Poetry</h1><p>Poetry replaces <code>setup.py</code>, <code>requirements.txt</code>, <code>setup.cfg</code>, <code>MANIFEST.in</code> and <code>Pipfile</code> with a simple <code>pyproject.toml</code> based project format.</p>',2),y={href:"https://github.com/python-poetry/poetry",target:"_blank",rel:"noopener noreferrer"},u={href:"https://python-poetry.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/448879082",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"快速上手",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#快速上手","aria-hidden":"true"},"#"),s(" 快速上手")],-1),m=n("h3",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),s(" 安装")],-1),b={href:"https://python-poetry.org/docs/#installing-with-the-official-installer",target:"_blank",rel:"noopener noreferrer"},g=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-sSL</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://install.python-poetry.org</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">python3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清理缓存：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clear</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pypi</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--all</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p>初始化项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>poetry 基本项目架构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">poetry-demo</span></span>
<span class="line"><span style="color:#24292e;">├── pyproject.toml</span></span>
<span class="line"><span style="color:#24292e;">├── README.md</span></span>
<span class="line"><span style="color:#24292e;">├── poetry_demo</span></span>
<span class="line"><span style="color:#24292e;">│   └── __init__.py</span></span>
<span class="line"><span style="color:#24292e;">└── tests</span></span>
<span class="line"><span style="color:#24292e;">    └── __init__.py</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>pyproject.toml</code> 在 <code>poetry init</code> 是会被创建，用于记录项目的依赖，如。</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;myproject&quot;</span></span>
<span class="line"><span style="color:#24292E;">version = </span><span style="color:#032F62;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">description = </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">authors = [</span><span style="color:#032F62;">&quot;kevinng77 &lt;417333277@qq.com&gt;&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">readme = </span><span style="color:#032F62;">&quot;README.md&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">python = </span><span style="color:#032F62;">&quot;^3.8&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">build-system</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">requires = [</span><span style="color:#032F62;">&quot;poetry-core&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">build-backend = </span><span style="color:#032F62;">&quot;poetry.core.masonry.api&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;tsinghua-pypi&quot;</span></span>
<span class="line"><span style="color:#24292E;">url = </span><span style="color:#032F62;">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span>
<span class="line"><span style="color:#24292E;">default = </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>为了方便包下载，我们需要修改下 pip 源。</strong></p></div><p>可以类似 <code>pip install -r requirments.txt</code> 批量安装依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">poetry install</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;"> poetry add pendulum</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行后会生成 <code>poetry.lock</code> ， 他同样可以用来进行环境版本控制，但通常在开发时，我们会更倾向于使用 <code>pyproject.toml</code> 。</p><p>同步依赖（把当前的 python 包环境与 <code>poetry.lock</code> 中的同步）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--sync</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当你安装了新的 python 包时，可以手动更新 <code>poetry.lock</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除不想要的依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remove</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pendulum</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把所有的 python 包锁定版本，By default, this will lock all dependencies to the latest available compatible versions.：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lock</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),E={href:"https://python-poetry.org/docs/pre-commit-hooks/#poetry-lock",target:"_blank",rel:"noopener noreferrer"},f=l(`<p>最后环境可以导出成 <code>requirements.txt</code> :</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">export</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requirements.txt</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--output</span><span style="color:#24292E;"> </span><span style="color:#032F62;">requirements.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="依赖控制" tabindex="-1"><a class="header-anchor" href="#依赖控制" aria-hidden="true">#</a> 依赖控制</h3><p>可以在 <code>[tool.poetry.dependencies]</code> 中和 <code>requirments.txt</code> 一样指定包版本：<code>numpy = &quot;^1.19.2&quot;</code></p><p>或针对不同的 python 版本，指定不同的包版本：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">[[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">numpy</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;">version = </span><span style="color:#032F62;">&quot;&gt;=1.19.2,&lt;1.22.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">python = </span><span style="color:#032F62;">&quot;~=3.7.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">numpy</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;">version = </span><span style="color:#032F62;">&quot;&gt;=1.19.2,&lt;1.24.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">python = </span><span style="color:#032F62;">&quot;&gt;=3.8,&lt;3.11&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="虚拟环境" tabindex="-1"><a class="header-anchor" href="#虚拟环境" aria-hidden="true">#</a> 虚拟环境</h3><p>默认情况下，poetry 会在 <code>{cache-dir}/virtualenvs</code> 下面创建虚拟环境。激活虚拟环境可以直接对 <code>{cache-dir}/virtualenvs</code> 下面的 <code>your_env/bin/activate</code> 进行执行。</p><p>推荐在拥有 <code>pyproject.toml</code> 文件的目录下使用 <code>poetry shell</code> 自动激活对应 python 环境。</p><p>运行 python 文件是，官方提到了使用 <code>poetry run python xxx.py</code> 执行。不确定这样做与在虚拟环境中直接执行脚本有啥区别。</p><h3 id="构建包" tabindex="-1"><a class="header-anchor" href="#构建包" aria-hidden="true">#</a> 构建包</h3><p>在构建之前需要满足以下项目架构：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README.md</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kk</span><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 改文件夹名称</span></span>
<span class="line"><span style="color:#6F42C1;">│  </span><span style="color:#24292E;"> </span><span style="color:#032F62;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__init__.py</span></span>
<span class="line"><span style="color:#6F42C1;">│  </span><span style="color:#24292E;"> </span><span style="color:#032F62;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__main__.py</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 可选</span></span>
<span class="line"><span style="color:#6F42C1;">├──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">poetry.lock</span></span>
<span class="line"><span style="color:#6F42C1;">└──</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pyproject.toml</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时你的 <code>toml</code> 文件要定义一个可运行脚本：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">name = </span><span style="color:#032F62;">&quot;kk&quot;</span></span>
<span class="line"><span style="color:#24292E;">version = </span><span style="color:#032F62;">&quot;0.1.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">description = </span><span style="color:#032F62;">&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">authors = [</span><span style="color:#032F62;">&quot;kevinng77 &lt;417333277@qq.com&gt;&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">readme = </span><span style="color:#032F62;">&quot;README.md&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">scripts</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">mk = </span><span style="color:#032F62;">&quot;kk:kevin&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 scripts 的格式为 <code>cli_script = &quot;{package_name}:{function_name}&quot;</code>。比如以上写的 <code>mk = &quot;kk:kevin&quot;</code>。在 <code>build</code> 好之后，终端运行 <code>mk</code> 相当于直接运行了 <code>kk</code> 模块下面的 <code>kevin()</code> 函数。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此处的 package_name 最好和 <code>[tool.poetry]</code> 中的 <code>name</code> 相同。同时，在 kk 文件夹下面所有的 python import 导入都已跟目录作为路径。如你想要导入 kk 文件夹下 main.py 中的 <code>kevin()</code> 函数，就使用 <code>from kk.main import kevin</code></p></div><p>准备好之后进行构建：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构建好之后 install：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">poetry install</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后在终端运行 <code>mk</code> 就能看到 <code>kevin()</code> 函数的运行结果了。</p><p>构建好了之后可以用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">poetry</span><span style="color:#24292E;"> </span><span style="color:#032F62;">publish</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来推送到 pypi</p>`,25);function k(F,x){const e=p("ExternalLinkIcon");return i(),t("div",null,[d,n("p",null,[s("官方链接 "),n("a",y,[s("github"),a(e)]),s(),n("a",u,[s("官网"),a(e)])]),c("more"),n("p",null,[s("其他参考： "),n("a",v,[s("知乎笔记"),a(e)])]),h,m,n("p",null,[s("根据 "),n("a",b,[s("官方提示"),a(e)]),s(" 进行安装")]),g,n("p",null,[s("这个功能可以在 "),n("a",E,[s("pre-commit hooks"),a(e)]),s(" 当中使用。")]),f])}const C=o(r,[["render",k],["__file","笔记poetry.html.vue"]]);export{C as default};
