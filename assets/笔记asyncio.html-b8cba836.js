import{_ as a,P as t,U as e,Y as n,X as p,aQ as o,E as c}from"./framework-6cee4965.js";const i={},l={href:"https://docs.python.org/zh-cn/3/library/asyncio.html",target:"_blank",rel:"noopener noreferrer"},u=o(`<h3 id="eventloop" tabindex="-1"><a class="header-anchor" href="#eventloop" aria-hidden="true">#</a> eventloop</h3><p>Eventloop 是 Asyncio 的核心功能之一。他能够用于储存多个 task，并指定 task 进行运行。同时，在某个 task A 进行等待时，eventloop 可以将执行权分发给下一个等候的 task。</p><h3 id="corroutine" tabindex="-1"><a class="header-anchor" href="#corroutine" aria-hidden="true">#</a> corroutine</h3><p>在执行 corroutine 过程中，可以将执行权交给其他协程。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># corroutine function</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    
coro <span class="token operator">=</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># # corroutine object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 corroutine function， 返回的结果是 corrouting object。corrouting funciton 内的内容不会被执行。</p><p>执行 corroutine function 内容，需要使用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>coro<span class="token punctuation">)</span>  <span class="token comment"># 传入 corroutine object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用 eventloop :</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="future" tabindex="-1"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h3><p>Future 是协程的封装，提供了对协程任务的管理，回调，查看结果等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__await_</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_asyncio_future_blocking <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">yield</span> self
    <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">&quot;await wasn&#39;t used with future&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-和-await" tabindex="-1"><a class="header-anchor" href="#task-和-await" aria-hidden="true">#</a> task 和 await</h3><p>task 是 future 的子类，实际开发中使用 task 更多。当 await 一个 task 时候，await 能够同时执行所有 <code>await task</code>。如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    task1 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>
         say_after<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    task2 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>
         say_after<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;started at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span> <span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    result1 <span class="token operator">=</span> <span class="token keyword">await</span> task1
    <span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>
    result2 <span class="token operator">=</span> <span class="token keyword">await</span> task2

    <span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;finished at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span> <span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;输出
started at 20:01:45
world
hello
hello-2
world-1
finished at 20:01:47
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码的执行顺序较难分辨，建议使用 <code>.gather()</code> 等其他操作来处理：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>results <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>
        say_after<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> say_after<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token comment"># 输出结果保持顺序。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不要直接 <code>await</code> 一个协程，否则他执行的结果会和同步执行的结果一样。</p><p>也不要 <code>await asyncio.create_task(...) </code></p></div><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h3><p><code>asyncio.wait()</code></p><p>在 asyncio 中，wait() 方法是一个非常重要的方法，它允许我们等待多个协程完成执行。wait() 方法将一组协程对象作为参数传递，并等待它们全部完成。一旦所有协程完成，wait() 方法将返回一个由 <code>(done, pending)</code> 两个集合组成的元组，其中 <code>done</code> 包含已完成的协程，而 <code>pending</code> 包含仍在等待执行的协程。</p><p>下面是一个简单的示例，说明如何使用 wait() 方法等待多个协程的完成：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>done<span class="token punctuation">,</span> pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>
        <span class="token punctuation">[</span>say_after<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> say_after<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span>
<span class="token keyword">for</span> result <span class="token keyword">in</span> done<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>wait()</code> 方法将一直等待，直到所有协程完成。如果您需要在一定时间内等待协程完成，可以使用 <code>asyncio.wait_for()</code> 方法。这个方法与 <code>wait()</code> 方法类似，但它会等待一段特定的时间，如果在这段时间内某些协程没有完成，它将引发一个 <code>asyncio.TimeoutError</code> 异常。</p><h3 id="异步资源管理-async-with" tabindex="-1"><a class="header-anchor" href="#异步资源管理-async-with" aria-hidden="true">#</a> 异步资源管理 async with</h3><p>当我们在 Python 的异步编程中使用 <code>async with</code> 语句时，我们可以使用异步上下文管理器来设置和撤销上下文，这与普通的 <code>with</code> 语句类似。异步上下文管理器是一种对象，它定义了 <code>__aenter__()</code> 和 <code>__aexit__()</code> 方法，而不是 <code>__enter__()</code> 和 <code>__exit__()</code> 方法。</p><p>异步上下文管理器可以被用于异步的 <code>with</code> 语句中，以设置和撤销异步上下文。异步上下文管理器的作用是在异步代码块中为执行环境提供必要的支持，以确保上下文的正确性和完整性。</p><p>让我们来看一个例子来理解 <code>async with</code> 语句的用法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">class</span> <span class="token class-name">MyAsyncContextManager</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aenter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Entering asynchronous context&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self
    
    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aexit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc<span class="token punctuation">,</span> tb<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Exiting asynchronous context&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">my_coroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> MyAsyncContextManager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> context<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Inside the asynchronous context&quot;</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>my_coroutine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如您所看到的，<code>async with</code> 语句可以方便、安全地进入和离开异步上下文。<code>async with</code> 语句保证异步上下文管理器的 <code>__aexit__()</code> 方法始终会被调用，即使在 <code>async with</code> 代码块中出现异常。</p>`,31);function d(r,k){const s=c("ExternalLinkIcon");return t(),e("div",null,[n("p",null,[n("a",l,[p(s)])]),u])}const m=a(i,[["render",d],["__file","笔记asyncio.html.vue"]]);export{m as default};
