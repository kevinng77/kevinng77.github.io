import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c,a as s,b as n,d as l,f as e}from"./app-bbaf15d7.js";const i="/assets/img/celery/image-20231126135511326.png",t={},d=e(`<h1 id="celery" tabindex="-1"><a class="header-anchor" href="#celery" aria-hidden="true">#</a> Celery</h1><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>celery 官方推荐使用 RabbitMQ 作为消息中间件。因此我们需要先安装对应的 broker，比如 rabbitmq：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">docker run -d -p 5672:5672 rabbitmq</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于小规模业务，可以考虑使用 backend redis + broker rabbitMQ 的组合。 可以考虑可视化界面安装（redis 后端 + rabbitmq + flower）：</p><details class="hint-container details"><summary>docker-compose 代码</summary><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">version: </span><span style="color:#032F62;">&#39;3.8&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">services:</span></span>
<span class="line"><span style="color:#24292E;">  rabbitmq:</span></span>
<span class="line"><span style="color:#24292E;">    image: rabbitmq:3-management</span></span>
<span class="line"><span style="color:#24292E;">    environment:</span></span>
<span class="line"><span style="color:#24292E;">      - RABBITMQ_DEFAULT_USER=user</span></span>
<span class="line"><span style="color:#24292E;">      - RABBITMQ_DEFAULT_PASS=password</span></span>
<span class="line"><span style="color:#24292E;">    ports:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;5672:5672&quot;</span><span style="color:#24292E;">    # RabbitMQ server</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;15672:15672&quot;</span><span style="color:#24292E;">  # RabbitMQ management console</span></span>
<span class="line"><span style="color:#24292E;">  redis:</span></span>
<span class="line"><span style="color:#24292E;">      image: </span><span style="color:#032F62;">&quot;bitnami/redis:latest&quot;</span></span>
<span class="line"><span style="color:#24292E;">      environment:</span></span>
<span class="line"><span style="color:#24292E;">          - REDIS_PASSWORD=password123</span></span>
<span class="line"><span style="color:#24292E;">      ports:</span></span>
<span class="line"><span style="color:#24292E;">          - </span><span style="color:#032F62;">&quot;6379:6379&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># volumes:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">#     # - &quot;redis_data:/bitnami/redis/data&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">#     - /bitnami/redis/data</span></span>
<span class="line"><span style="color:#24292E;">  flower:</span></span>
<span class="line"><span style="color:#24292E;">    image: mher/flower:2.0.1</span></span>
<span class="line"><span style="color:#24292E;">    command: celery flower</span></span>
<span class="line"><span style="color:#24292E;">    environment:</span></span>
<span class="line"><span style="color:#24292E;">      - FLOWER_PORT=5555</span></span>
<span class="line"><span style="color:#24292E;">      - CELERY_BROKER=amqp://user:password@rabbitmq:5672//</span></span>
<span class="line"><span style="color:#24292E;">      - FLOWER_BROKER_API=http://user:password@rabbitmq:15672/api/</span></span>
<span class="line"><span style="color:#24292E;">    ports:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;5555:5555&quot;</span></span>
<span class="line"><span style="color:#24292E;">    depends_on:</span></span>
<span class="line"><span style="color:#24292E;">      - rabbitmq</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>安装后，登录 <code>http://localhost:5555/</code> 查看 celery 任务管理界面。</p><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><p>创建一个 <code>task.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Celery</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 链接 rabbitMQ</span></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Celery(</span><span style="color:#032F62;">&#39;tasks&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">backend</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;rpc://&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">broker</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;amqp://kevin:777777@localhost:5672&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.task</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x, y):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而后运行 celery worker 服务器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">celery</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tasks</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--loglevel=INFO</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行服务器后，开始监听我们定义的两个任务。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>查看 flower 界面中，可以看到 workers 下有我们启动的监听服务。</p></div><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><p>创建文件 <code>producer.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 假设我们的 add 任务写在了 tasks.py 文件中</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> tasks </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> add</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> add.delay(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),y=s("code",null,"result = add.delay(4, 4)",-1),u={href:"https://docs.celeryq.dev/en/stable/reference/celery.result.html#celery.result.AsyncResult",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"AsyncResult",-1),b=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery.result </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> AsyncResult</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery_task </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cel</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsyncResult(</span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;result_id&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">app</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">cel)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来构建。获取结果的话可以：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># redis 中用该 id 取结果。</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.id)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.ready())  </span><span style="color:#6A737D;"># False</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.successful())  </span><span style="color:#6A737D;"># False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># result.get 会阻塞，直到 task 完成，并返回结果</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.get(</span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(result.successful())  </span><span style="color:#6A737D;"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于所有的 CeleryResult，我们都需要执行 <code>get()</code> 或 <code>forget()</code> 来释放资源。</p><p>当我们运行了一个 <code>add.delay(4, 4)</code> 之后，可以在 flower 的 broker 下面查看到：有一条 Message 被添加到了 <code>celery</code> 队列当中，然后对应的 consumers 消费了这个消息。</p></div><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>在启动 celery worker 之后，我们可以看到对应的 concurrency 数量：</p><figure><img src="`+i+`" alt="image-20231126135511326" tabindex="0" loading="lazy"><figcaption>image-20231126135511326</figcaption></figure><p>以及 rabbitmq 的 queues 相关信息。我们尝试在客户端同时运行 21 次 <code>add.delay(4,4)</code>。在 flower 中可以看到，运行后，broker 中显示 <code>Message = 5</code>，表示有 5 条消息在等待执行。而后 worker 下显示 <code>Active=16</code>, 后变成 <code>Active=5</code>。</p><p><strong>因此，celery 的 <code>.delay</code> 方法实际是向队列当中添加了对应函数的任务。我们的 celery worker 会从 queue 当中提取任务执行。</strong></p><h2 id="项目架构" tabindex="-1"><a class="header-anchor" href="#项目架构" aria-hidden="true">#</a> 项目架构</h2><p>官方示例项目架构</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">src</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">    proj</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">celery.py</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">tasks.py</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>proj/celery.py</code> 用于配置 celery app：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Celery</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Celery(</span><span style="color:#032F62;">&#39;proj&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#E36209;">broker</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">os.environ.get(</span><span style="color:#032F62;">&#39;CELERY_BROKER_URL&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;amqp://user:password@localhost:5672//&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#E36209;">backend</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">os.environ.get(</span><span style="color:#032F62;">&#39;CELERY_RESULT_BACKEND&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;redis://:password123@localhost:6379/1&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#E36209;">include</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;proj.tasks&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Optional configuration, see the application user guide.</span></span>
<span class="line"><span style="color:#24292E;">app.conf.update(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">result_expires</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3600</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    app.start()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>proj/tasks.py</code> 用于编辑任务：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> .celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.task</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x, y):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.task</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mul</span><span style="color:#24292E;">(x, y):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 worker 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">celery</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proj</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;"> </span><span style="color:#032F62;">INFO</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者在后台启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">celery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">multi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">w1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proj</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;"> </span><span style="color:#032F62;">INFO</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="celery-进阶" tabindex="-1"><a class="header-anchor" href="#celery-进阶" aria-hidden="true">#</a> Celery 进阶</h2><h3 id="task-配置" tabindex="-1"><a class="header-anchor" href="#task-配置" aria-hidden="true">#</a> task 配置</h3>`,22),m={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#list-of-options",target:"_blank",rel:"noopener noreferrer"},E={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#logging",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>所有 task 都可以通过自定义 class 来批量配置参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> celery</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyTask</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">celery</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">	autoretry_for </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">TypeError</span><span style="color:#24292E;">,)</span></span>
<span class="line"><span style="color:#24292E;">    max_retries </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">    retry_backoff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    retry_backoff_max </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">700</span></span>
<span class="line"><span style="color:#24292E;">    retry_jitter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_failure</span><span style="color:#24292E;">(self, exc, task_id, args, kwargs, einfo):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{0</span><span style="color:#D73A49;">!r</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> failed: </span><span style="color:#005CC5;">{1</span><span style="color:#D73A49;">!r</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(task_id, exc))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.task</span><span style="color:#24292E;">(</span><span style="color:#E36209;">base</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">MyTask)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x, y):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">KeyError</span><span style="color:#24292E;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>task 添加 bind 参数后，可以调用 <code>self</code> 中的方法，比如 <code>retry()</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@app.task</span><span style="color:#24292E;">(</span><span style="color:#E36209;">bind</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_twitter_status</span><span style="color:#24292E;">(self, oauth, tweet):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        twitter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Twitter(oauth)</span></span>
<span class="line"><span style="color:#24292E;">        twitter.update_status(tweet)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> (Twitter.FailWhaleError, Twitter.LoginError) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> exc:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># overrides the default delay to retry after 1 minute</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.retry(</span><span style="color:#E36209;">exc</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">exc, </span><span style="color:#E36209;">countdown</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, </span><span style="color:#E36209;">max_retries</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g=s("code",null,"retry_backoff=True",-1),f={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#automatic-retry-for-known-exceptions",target:"_blank",rel:"noopener noreferrer"},C=e(`<h4 id="任务状态控制" tabindex="-1"><a class="header-anchor" href="#任务状态控制" aria-hidden="true">#</a> 任务状态控制</h4><p>task 可以使用 broker 中的 basic_reject 方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery.exceptions </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Reject</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.task</span><span style="color:#24292E;">(</span><span style="color:#E36209;">bind</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">acks_late</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requeues</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.request.delivery_info[</span><span style="color:#032F62;">&#39;redelivered&#39;</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> Reject(</span><span style="color:#032F62;">&#39;no reason&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">requeue</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;received two times&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用 <code>from celery.exceptions import Ignore</code> 的 <code>raise Ignore()</code> 来丢弃任务。</p>`,4),k={class:"hint-container tip"},_=e(`<p class="hint-container-title">提示</p><p>每一个 task 的 <code>__init__</code> 方法只会被调用 1 次。 <strong>因此可以用来缓存一些资源，比如数据库链接状态等</strong> ：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatabaseTask</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    _db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@</span><span style="color:#005CC5;">property</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._db </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Database.connect()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._db</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用时候用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery.app </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.task</span><span style="color:#24292E;">(</span><span style="color:#E36209;">base</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DatabaseTask, </span><span style="color:#E36209;">bind</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">process_rows</span><span style="color:#24292E;">(self: task):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.db.table.all():</span></span>
<span class="line"><span style="color:#24292E;">        process_row(row)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),A={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#instantiation",target:"_blank",rel:"noopener noreferrer"},D=s("h4",{id:"任务钩子",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#任务钩子","aria-hidden":"true"},"#"),n(" 任务钩子")],-1),x={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#handlers",target:"_blank",rel:"noopener noreferrer"},F=s("h4",{id:"执行任务",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#执行任务","aria-hidden":"true"},"#"),n(" 执行任务")],-1),w={href:"https://docs.celeryq.dev/en/stable/userguide/calling.html",target:"_blank",rel:"noopener noreferrer"},q=e(`<ol><li>调度时建议设置好时间预期：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> datetime </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> datetime, timedelta, timezone</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">tomorrow </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datetime.now(timezone.utc) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> timedelta(</span><span style="color:#E36209;">days</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">add.apply_async((</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), </span><span style="color:#E36209;">eta</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">tomorrow)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>可以使用 <code>on_message</code> 来监听对应任务的进度：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 服务器</span></span>
<span class="line"><span style="color:#6F42C1;">@app.task</span><span style="color:#24292E;">(</span><span style="color:#E36209;">bind</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(self, a, b):</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 用 self.update_state 会触发 on_message 对应函数</span></span>
<span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.update_state(</span><span style="color:#E36209;">state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;PROGRESS&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">meta</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;progress&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.update_state(</span><span style="color:#E36209;">state</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;PROGRESS&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">meta</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;progress&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">90</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello world: </span><span style="color:#005CC5;">%i</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> (a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端调用时：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_raw_message</span><span style="color:#24292E;">(body):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(body)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">a, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hello.apply_async(</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">(a, b))</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(r.get(</span><span style="color:#E36209;">on_message</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">on_raw_message, </span><span style="color:#E36209;">propagate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>添加 <code>ignore_result=True</code> 来节省时间：<code>result = add.apply_async((1, 2), ignore_result=True)</code></li></ol><h4 id="提示" tabindex="-1"><a class="header-anchor" href="#提示" aria-hidden="true">#</a> 提示</h4><ol><li>不要在一个 task 中调用另一个 task。如果要那么做的话，请使用 signature。</li><li>celery 是一个分布式系统，我们不能知道哪个进程或者哪台机器将会执行这个任务。</li></ol><h3 id="task-flows" tabindex="-1"><a class="header-anchor" href="#task-flows" aria-hidden="true">#</a> Task-flows</h3>`,10),R={href:"https://docs.celeryq.dev/en/stable/userguide/canvas.html#guide-canvas",target:"_blank",rel:"noopener noreferrer"},T=e(`<ol><li><strong>Groups</strong></li></ol><p>一个 group 并行调用任务列表，返回的结果是有序的。执行下列 groups 任务，broker 当中会添加 10 个 message。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> group</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> proj.tasks </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> add</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">group(add.s(i, i) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))().get()</span></span>
<span class="line"><span style="color:#6A737D;"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Chains</strong></li></ol><p>接受多个 signature 的结果，而后传送给一个 message 执行任务。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> chain</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> proj.tasks </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> add, mul</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># (4 + 4) * 8</span></span>
<span class="line"><span style="color:#24292E;">chain(add.s(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> mul.s(</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">))().get()</span></span>
<span class="line"><span style="color:#6A737D;"># 64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Chords</strong></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> chord</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> proj.tasks </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> add, xsum</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">chord((add.s(i, i) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)), xsum.s())().get()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-routing" tabindex="-1"><a class="header-anchor" href="#task-routing" aria-hidden="true">#</a> Task Routing</h3><p>不同的任务，可以安排在不同的队列上。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">app.conf.update(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_routes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;proj.tasks.objectCheck&#39;</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&#39;queue&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;objectCheck&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;proj.tasks.caption&#39;</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&#39;queue&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;caption&#39;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;proj.tasks.training&#39;</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&#39;queue&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;training&#39;</span><span style="color:#24292E;">}  </span><span style="color:#6A737D;"># 声明每个 task 对应的 queue</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_queues</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        Queue(</span><span style="color:#032F62;">&#39;default&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        Queue(</span><span style="color:#032F62;">&#39;objectCheck&#39;</span><span style="color:#24292E;">),   </span><span style="color:#6A737D;"># 声明有这个 queue</span></span>
<span class="line"><span style="color:#24292E;">        Queue(</span><span style="color:#032F62;">&#39;caption&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        Queue(</span><span style="color:#032F62;">&#39;training&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># rabbitmq 支持特殊 routing 设计</span></span>
<span class="line"><span style="color:#24292E;">        Queue(</span><span style="color:#032F62;">&#39;tasks&#39;</span><span style="color:#24292E;">, Exchange(</span><span style="color:#032F62;">&#39;tasks&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;direct&#39;</span><span style="color:#24292E;">), 	</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;tasks&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#E36209;">queue_arguments</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;x-max-priority&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，使用 <code>celery -A proj worker</code> 会监听所有的 queue。可以使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">celery</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proj</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">objectCheck</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hostname=object@%h</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),j=s("code",null,"exchange",-1),O=s("code",null,"routing_key",-1),Q={href:"https://docs.celeryq.dev/en/stable/userguide/routing.html#special-routing-options",target:"_blank",rel:"noopener noreferrer"},I=s("p",null,"关于 queue 与 routing_key 请查看 rabbitmq",-1),S=s("h3",{id:"worker-启动",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#worker-启动","aria-hidden":"true"},"#"),n(" Worker 启动")],-1),L=s("p",null,[n("对于同一份 celery 项目代码，可以通过在终端传入不同的 "),s("code",null,"-Q"),n(" 参数来指定每个 worker 需要监听的队列。")],-1),B={href:"https://docs.celeryq.dev/en/stable/userguide/workers.html#queues-adding-consumers",target:"_blank",rel:"noopener noreferrer"},M=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">app.control.add_consumer(</span></span>
<span class="line"><span style="color:#24292e;">    queue=&#39;baz&#39;,</span></span>
<span class="line"><span style="color:#24292e;">    exchange=&#39;ex&#39;,</span></span>
<span class="line"><span style="color:#24292e;">    exchange_type=&#39;topic&#39;,</span></span>
<span class="line"><span style="color:#24292e;">    routing_key=&#39;media.*&#39;,</span></span>
<span class="line"><span style="color:#24292e;">    options={</span></span>
<span class="line"><span style="color:#24292e;">        &#39;queue_durable&#39;: False,</span></span>
<span class="line"><span style="color:#24292e;">        &#39;exchange_durable&#39;: False,</span></span>
<span class="line"><span style="color:#24292e;">    },</span></span>
<span class="line"><span style="color:#24292e;">    reply=True,</span></span>
<span class="line"><span style="color:#24292e;">    destination=[&#39;w1@example.com&#39;, &#39;w2@example.com&#39;])</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>worker 启动部分参数：</p><ul><li><p><code>--logfile=%p.log</code></p></li><li><p><code>--loglevel=INFO</code></p></li><li><p><code>--concurrency=10</code></p></li><li><p><code>-n worker1@%h</code></p></li><li><p><code>--autoscale=10,3</code> (always keep 3 processes, but grow to 10 if necessary)</p></li><li><p><code>-Q foo,bar,baz</code></p></li></ul><p>强制关闭所有 worker：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">ps</span><span style="color:#24292E;"> </span><span style="color:#032F62;">auxww</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">awk</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/celery worker/ {print $2}&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xargs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kill</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="落地代办" tabindex="-1"><a class="header-anchor" href="#落地代办" aria-hidden="true">#</a> 落地代办</h3>`,6),N={href:"https://docs.celeryq.dev/en/stable/userguide/index.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.celeryq.dev/en/stable/userguide/security.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.celeryq.dev/en/stable/userguide/optimizing.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://docs.celeryq.dev/en/stable/userguide/configuration.html",target:"_blank",rel:"noopener noreferrer"},U=s("ul",null,[s("li",null,"[ ] flower 集成其他可视化平台"),s("li",null,"[ ] 如何设置失败重试")],-1);function W(V,G){const a=o("ExternalLinkIcon");return r(),c("div",null,[d,s("p",null,[y,n(" 返回的是一个 "),s("a",u,[v,l(a)]),n(" 实例，该示例可以用")]),b,s("p",null,[n("task 可选参数："),s("a",m,[n("文档"),l(a)]),n("。")]),s("p",null,[n("logging 可以直接用 print。或者参考"),s("a",E,[n("文档"),l(a)]),n("。")]),h,s("p",null,[n("当任务中涉及到调用其他 API 任务时，可以考虑添加 "),g,n(" 选项（参考"),s("a",f,[n("文档"),l(a)]),n("）。")]),C,s("div",k,[_,s("p",null,[s("a",A,[n("参考文档"),l(a)])])]),D,s("p",null,[n("任务可以添加一些钩子，参考"),s("a",x,[n("文档"),l(a)]),n("。")]),F,s("p",null,[s("a",w,[n("官方文档"),l(a)])]),q,s("p",null,[n("详细的 workflow 可以在 "),s("a",R,[n("celery 官网"),l(a)]),n("查询")]),T,s("p",null,[n("来监听不同的任务。也可以设置不同的 "),j,n("，"),O,n(" 等。具体查看"),s("a",Q,[n("官方文档"),l(a)]),n("。")]),I,S,L,s("p",null,[n("可以通过 "),s("a",B,[n("add_consumers"),l(a)]),n(" 来添加不同消息队列的 consumer：")]),M,s("p",null,[n("请查看官网的其他 "),s("a",N,[n("how-to-guide"),l(a)]),n(", 如 "),s("a",z,[n("Security"),l(a)]),n("， "),s("a",P,[n("Optimizing"),l(a)]),n("， "),s("a",K,[n("Configuration and defaults"),l(a)]),n(" 等。")]),U])}const H=p(t,[["render",W],["__file","笔记celery.html.vue"]]);export{H as default};
