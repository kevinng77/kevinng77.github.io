const n=JSON.parse('{"key":"v-08df5e0d","path":"/posts/notes/articles/%E7%AC%94%E8%AE%B0Dijaska.html","title":"最短路径算法（一）|Dijkstra","lang":"zh-CN","frontmatter":{"title":"最短路径算法（一）|Dijkstra","date":"2020-11-14T00:00:00.000Z","author":"Kevin 吴嘉文","subtitle":"建立在贪婪算法上的一种最短路径算法原理分析，算法优化","description":"Dijkstra image-20201114225526432 (图片来源 : CLRS p659 24.3) 原版算法 先来看看代码 import math, heapq for u in vertex: # 这边对所有点都进行了一次 Dijkstra heap = [] for v in vertex: if v != u: heapq.heappush(heap, [adj[u][v] if v in adj[u] else math.inf, v]) #提取到达距离最小的节点 dist = {u: 0} while len(heap) &gt; 0: mindist, v = heapq.heappop(heap) dist[v] = mindist for i in range(len(heap)): if heap[i][1] in adj[v]: heap[i][0] = min(heap[i][0], mindist + adj[v][heap[i][1]]) heapq.heapify(heap)","keywords":null,"language":"cn","timezone":"","category":["知识笔记"],"tag":["algorithm|算法"],"mathjax":true,"toc":true,"comments":"建立在贪婪算法上的一种最短路径算法原理分析，算法优化，偏向理论","head":[["meta",{"property":"og:url","content":"http://wujiawen.xyz/posts/notes/articles/%E7%AC%94%E8%AE%B0Dijaska.html"}],["meta",{"property":"og:site_name","content":"记忆笔书"}],["meta",{"property":"og:title","content":"最短路径算法（一）|Dijkstra"}],["meta",{"property":"og:description","content":"Dijkstra image-20201114225526432 (图片来源 : CLRS p659 24.3) 原版算法 先来看看代码 import math, heapq for u in vertex: # 这边对所有点都进行了一次 Dijkstra heap = [] for v in vertex: if v != u: heapq.heappush(heap, [adj[u][v] if v in adj[u] else math.inf, v]) #提取到达距离最小的节点 dist = {u: 0} while len(heap) &gt; 0: mindist, v = heapq.heappop(heap) dist[v] = mindist for i in range(len(heap)): if heap[i][1] in adj[v]: heap[i][0] = min(heap[i][0], mindist + adj[v][heap[i][1]]) heapq.heapify(heap)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-22T13:54:51.000Z"}],["meta",{"property":"article:author","content":"Kevin 吴嘉文"}],["meta",{"property":"article:tag","content":"algorithm|算法"}],["meta",{"property":"article:published_time","content":"2020-11-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-22T13:54:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"最短路径算法（一）|Dijkstra\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-22T13:54:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kevin 吴嘉文\\"}]}"]]},"headers":[{"level":2,"title":"原版算法","slug":"原版算法","link":"#原版算法","children":[]},{"level":2,"title":"正确性分析","slug":"正确性分析","link":"#正确性分析","children":[]},{"level":2,"title":"时间复杂度","slug":"时间复杂度","link":"#时间复杂度","children":[]},{"level":2,"title":"特殊想法","slug":"特殊想法","link":"#特殊想法","children":[]}],"git":{"createdTime":1676542179000,"updatedTime":1677074091000,"contributors":[{"name":"kevinng77","email":"417333277@qq.com","commits":2}]},"readingTime":{"minutes":6.33,"words":1899},"filePathRelative":"posts/notes/articles/笔记Dijaska.md","localizedDate":"2020年11月14日","excerpt":"<h1> Dijkstra</h1>\\n<figure><img src=\\"/assets/img/Dijaska/image-20201114225526432.png\\" alt=\\"image-20201114225526432\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20201114225526432</figcaption></figure>\\n<p><em>(图片来源 : CLRS p659 24.3)</em></p>\\n<!--more-->\\n<h2> 原版算法</h2>\\n<p>先来看看代码</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> math<span class=\\"token punctuation\\">,</span> heapq\\n\\n<span class=\\"token keyword\\">for</span> u <span class=\\"token keyword\\">in</span> vertex<span class=\\"token punctuation\\">:</span>  <span class=\\"token comment\\"># 这边对所有点都进行了一次 Dijkstra</span>\\n    heap <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">for</span> v <span class=\\"token keyword\\">in</span> vertex<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> v <span class=\\"token operator\\">!=</span> u<span class=\\"token punctuation\\">:</span>\\n            heapq<span class=\\"token punctuation\\">.</span>heappush<span class=\\"token punctuation\\">(</span>heap<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>adj<span class=\\"token punctuation\\">[</span>u<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>v<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">if</span> v <span class=\\"token keyword\\">in</span> adj<span class=\\"token punctuation\\">[</span>u<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">else</span> math<span class=\\"token punctuation\\">.</span>inf<span class=\\"token punctuation\\">,</span> v<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\">#提取到达距离最小的节点</span>\\n    dist <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>u<span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>heap<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n        mindist<span class=\\"token punctuation\\">,</span> v <span class=\\"token operator\\">=</span> heapq<span class=\\"token punctuation\\">.</span>heappop<span class=\\"token punctuation\\">(</span>heap<span class=\\"token punctuation\\">)</span>\\n        dist<span class=\\"token punctuation\\">[</span>v<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> mindist\\n        <span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>heap<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">if</span> heap<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">in</span> adj<span class=\\"token punctuation\\">[</span>v<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>\\n                heap<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">min</span><span class=\\"token punctuation\\">(</span>heap<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> mindist <span class=\\"token operator\\">+</span> adj<span class=\\"token punctuation\\">[</span>v<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span>heap<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n        heapq<span class=\\"token punctuation\\">.</span>heapify<span class=\\"token punctuation\\">(</span>heap<span class=\\"token punctuation\\">)</span>\\n        \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
