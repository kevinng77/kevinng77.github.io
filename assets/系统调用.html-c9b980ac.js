import{_ as t,Q as e,V as p,Z as n,ag as s,Y as c,af as o,aQ as i,H as l}from"./framework-bcd5cf65.js";const u="/assets/img/系统调用/image-20210224144726745.png",r="/assets/img/系统调用/image-20210225130245871.png",d="/assets/img/系统调用/image-20210225130540877.png",k={},v=n("h1",{id:"系统调用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#系统调用","aria-hidden":"true"},"#"),s(" 系统调用")],-1),m=n("p",null,"嵌入式自学开始几个月啦~ 为了自己的贾维斯 ？？？？！！！！！",-1),b=n("p",null,"真想快点了解到计算机和这个世界是怎么运转的，可能只有真的理解了物理原理，才能没有拘束的创造",-1),h={href:"https://www.bilibili.com/video/BV1FA411v7YW?p=530&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},g=i('<h2 id="系统调用-1" tabindex="-1"><a class="header-anchor" href="#系统调用-1" aria-hidden="true">#</a> 系统调用</h2><p>linux 中，通过操作 shell，applications 或 library routines 来操作 system calls，进而调用 kernel 来操作硬件</p><figure><img src="'+u+`" alt="image-20210224144726745" tabindex="0" loading="lazy"><figcaption>image-20210224144726745</figcaption></figure><ul><li>系统调用的返回值 <ul><li>通常，用一个负的返回值来表明错误，返回一个 0 值表明成功。 错误信息存放在全局变量 errno 中，用户可用 perror 函数打印出错信</li></ul></li><li>Linuxzhong ,API 遵循 POSIX 标准</li></ul><h2 id="系统调用-i-o-函数" tabindex="-1"><a class="header-anchor" href="#系统调用-i-o-函数" aria-hidden="true">#</a> 系统调用 I/O 函数</h2><h3 id="文件描述符" tabindex="-1"><a class="header-anchor" href="#文件描述符" aria-hidden="true">#</a> 文件描述符</h3><p>文件描述符是非负整数。打开现存文件或新建文件时，系统（内核）会返回一个文件描述符。文件描述符用来指定已打开的文件。 在系统调用（文件 IO）中，文件描述符对文件起到标识作用，如果要操作文件，就是对文件描述符的操作 当一个程序运行或者一个进程开启时，系统会自动创建三个文件描述符 0 标准输入 1 标准输出 2 标准输出出错</p><p>文件 IO 的文件描述符和标准 IO 的文件指针的对应关系 文件 IO 标准 IO 0 stdin 1 stdout 2 stderr</p><p>如果自己打开文件，会返回文件描述符，而文件描述符一般按照从小到大依次创建的顺序</p><h3 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> Open</h3><p>标准 IO 文件 IO 权限含义</p><table><thead><tr><th>标准 IO</th><th>文件 IO (flags)</th><th>权限含义</th></tr></thead><tbody><tr><td>r</td><td>O_RDONLY</td><td>以只读的方式打开文件，如果文件不存在则报错</td></tr><tr><td>r+</td><td>O_RDWR</td><td>以读写的方式打开文件，如果文件不存在则报错</td></tr><tr><td>w</td><td>O_WRONLY , O_CREAT , O_TRUNC，0664</td><td>以只写的方式打开文件，如果文件不存在则创建，如果文件存在则清空</td></tr><tr><td>w+</td><td>O_RDWR , O_CREAT , O_TRUNC，0664</td><td>以读写的方式打开文件，如果文件不存在则创建，如果文件存在则清空</td></tr><tr><td>a</td><td>O_WRONLY , O_CREAT ,O_APPEND， 0664</td><td>以只写的方式打开文件，如果文件不存在则创建，如果文件存在则追加</td></tr><tr><td>a+</td><td>O_RDWR , O_CREAT , O_APPEND，0664</td><td>以读写的方式打开文件，如果文件不存在则创建，如果文件存在则追加</td></tr></tbody></table><p>使用 C 文件进行操作</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
\\\\<span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
\\\\<span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数调用出错后输出错误信息" tabindex="-1"><a class="header-anchor" href="#函数调用出错后输出错误信息" aria-hidden="true">#</a> 函数调用出错后输出错误信息</h4><ul><li>错误码信息可以通过<code>cat /usr/include/asm-generic/errno-base.h</code>查询</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>通过全局变量 errno
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>
errno 是一个全局变量，当函数调用失败后，可以通过 errno 获取错误码

通常我们会更多的通过一个函数 perror
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：输出函数调用失败的错误信息
参数：
s：打印错误信息的提示消息 c
返回值：无
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//使用 open 函数打开或者创建一个文件</span>
<span class="token keyword">int</span> fd<span class="token punctuation">;</span>
fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//通过全局变量 errno 打印错误码</span>
<span class="token comment">//注意需要添加头文件 errno.h</span>
<span class="token comment">//printf(&quot;errno = %d\\n&quot;, errno);</span>

<span class="token comment">//通过 perror 函数输出函数调用失败的错误信息</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fd = %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="close-函数" tabindex="-1"><a class="header-anchor" href="#close-函数" aria-hidden="true">#</a> Close 函数</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">int</span> fd<span class="token punctuation">;</span>
fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;fd = %d\\n&quot;</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//当不对文件进行任何操作时，就会关闭文件描述符</span>
<span class="token comment">//使用 close 函数关闭文件描述符</span>
<span class="token comment">//一旦关闭了文件描述符，就不能再通过原有的文件描述符对文件进行操作</span>
<span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个进程最多可以创建 1024 个描述符，0-1023</li><li>一但文件被关闭了，最后创建地文件会优先考虑补齐之前被关闭地文件地文件描述符。最后地文件并不一定是最大地。</li></ul><h4 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//向终端写入数据</span>
 <span class="token comment">//对 1 这个文件描述符进行操作</span>
 <span class="token comment">//调用函数要考虑函数调用错误</span>
 <span class="token comment">//内核地调用没有缓冲区，他会直接对磁盘进行操作</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//向文件中写入数据</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="向文件写入数据" tabindex="-1"><a class="header-anchor" href="#向文件写入数据" aria-hidden="true">#</a> 向文件写入数据</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//向文件写入数据</span>
<span class="token comment">//以只写的方式打开文件，如果文件不存在则创建，如果文件存在则清空</span>
fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT <span class="token operator">|</span> O_TRUNC<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token comment">//使用 write 函数向文件写入数据</span>
<span class="token comment">//两个等号的优先级大于一个</span>
<span class="token class-name">ssize_t</span> bytes<span class="token punctuation">;</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bytes <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
 <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bytes = %ld\\n&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot;nihao beijing&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//关闭文件描述符</span>
 <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read</h4><p>3 功能：从文件中读取数据 4 参数： 5 fd：指定的文件描述符 6 buf：保存读取到的数据 7 count：最大一次读取多少个字节 8 返回值： 9 成功：实际读取的字节数 10 失败：‐1</p><ul><li>读取终端数据</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
<span class="token comment">//使用 read 函数从终端读取数据</span>
 <span class="token comment">//使用 0 文件描述符从终端读取数据</span>

 <span class="token comment">//如果终端输入的字节数大于第三个参数</span>
 <span class="token comment">//则只会读取第三个参数对应的字节数，返回值也是与第三个参数一致</span>

<span class="token comment">//如果终端输入的字节数小于第三个参数‘</span>
<span class="token comment">//则只会读取输入的数据加上换行符，返回值就是实际输入的数据+1</span>

 <span class="token class-name">ssize_t</span> bytes<span class="token punctuation">;</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
 <span class="token punctuation">{</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str = [%s]\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bytes = %ld\\n&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token comment">//注意：如果读取到文件末尾，返回 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从文件读取数据</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token number">2</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>stat<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> #include <span class="token operator">&lt;</span>fcntl<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span>
<span class="token number">7</span> #define N <span class="token number">64</span>
<span class="token number">8</span>
<span class="token number">9</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">10</span> <span class="token punctuation">{</span>
<span class="token number">11</span> <span class="token comment">//使用 read 从文件中读取数据</span>
<span class="token number">12</span> <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
<span class="token number">13</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> O_RDONLY <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">14</span> <span class="token punctuation">{</span>
<span class="token number">15</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span> <span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">17</span> <span class="token punctuation">}</span>
<span class="token number">18</span>
<span class="token number">19</span> <span class="token comment">//读取文件内容</span>
<span class="token number">20</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token number">21</span> <span class="token class-name">ssize_t</span> bytes<span class="token punctuation">;</span>
<span class="token number">22</span> #<span class="token keyword">if</span> <span class="token number">1</span>
<span class="token number">23</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">24</span> <span class="token punctuation">{</span>
<span class="token number">25</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to read&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span> <span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token number">27</span> <span class="token punctuation">}</span>
<span class="token number">28</span>
<span class="token number">29</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf = [%s]\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">30</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bytes = %ld\\n&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">31</span>
<span class="token number">32</span> <span class="token keyword">char</span> buf1<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token number">33</span> bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf1<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">34</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf1 = [%s]\\n&quot;</span><span class="token punctuation">,</span> buf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">35</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bytes = %ld\\n&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span> <span class="token comment">//如果文件中的数据都读取完毕，则 read 会返回 0</span>
<span class="token number">38</span> <span class="token keyword">char</span> buf2<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token number">39</span> bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf2<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf2 = [%s]\\n&quot;</span><span class="token punctuation">,</span> buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">41</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bytes = %ld\\n&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span> #endif
<span class="token number">43</span>
<span class="token number">44</span> #<span class="token keyword">if</span> <span class="token number">0</span>
<span class="token number">45</span> <span class="token comment">//读取文件中的所有内容</span>
<span class="token number">46</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">47</span> <span class="token punctuation">{</span>
<span class="token number">48</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;buf = [%s]\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;bytes = %ld\\n&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span> <span class="token punctuation">}</span>
<span class="token number">51</span> #endif
<span class="token number">52</span> <span class="token comment">//关闭文件描述符</span>
<span class="token number">53</span> <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span>
<span class="token number">55</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">56</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="remove-函数" tabindex="-1"><a class="header-anchor" href="#remove-函数" aria-hidden="true">#</a> Remove 函数</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//使用 remove 函数删除文件</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;./file.txt&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to remove&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> ‐<span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;delete done\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统调用和库函数" tabindex="-1"><a class="header-anchor" href="#系统调用和库函数" aria-hidden="true">#</a> 系统调用和库函数</h3><p><strong>库函数由两类函数组成</strong> （1）不需要调用系统调用 不需要切换到内核空间即可完成函数全部功能，并且将结果反馈给应用程序，如 strcpy、bzero 等字符串操作函数。 （2）需要调用系统调用 需要切换到内核空间，这类函数通过封装系统调用去实现相应功能，如 printf、fread 等 <strong>库函数与系统调用的关系</strong> 系统提供的很多功能都必须通过系统调用才能实现</p><figure><img src="`+r+'" alt="image-20210225130245871" tabindex="0" loading="lazy"><figcaption>image-20210225130245871</figcaption></figure><p>库函数通过缓冲区提高了系统调用的效率</p><figure><img src="'+d+'" alt="image-20210225130540877" tabindex="0" loading="lazy"><figcaption>image-20210225130540877</figcaption></figure><p>系统调用是需要时间的，程序中频繁的使用系统调用会降低程序的运行效率 当运行内核代码时，CPU 工作在内核态，在系统调用发生前需要保存用户态的栈和内存环境，然后转入内核态工作。 系统调用结束后，又要切换回用户态。这种环境的切换会消耗掉许多时间库函数访问文件的时候根据需要，设置不同类型的缓冲区，从而减少了直接调用 IO 系统调用 的次数，提高了访问效率。 <strong>总结：大多数库函数的本质也是系统调用，只不过库函数有了缓冲区，用于减少系统调用的次数</strong></p>',39);function y(f,w){const a=l("ExternalLinkIcon");return e(),p("div",null,[v,n("blockquote",null,[m,b,n("p",null,[s("笔记总结 课程链接："),n("a",h,[s("千峰嵌入式教程"),c(a)])])]),o(" more"),g])}const _=t(k,[["render",y],["__file","系统调用.html.vue"]]);export{_ as default};
