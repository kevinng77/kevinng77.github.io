import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as r,a as n,b as s,d as a,f as o}from"./app-86c9497f.js";const c={},i=o('<p>由于 Linux 桌面系统下有太多的不方便，如会议 app 功能不全、部分软件不支持（特别是 word、PPT 一系列的）。因此对于需要兼顾开发和办公的人员来说，使用 WSL2 或者虚拟机可能是一个比较权衡的选择。</p><p>目前 WSL2 可以和 VM 虚拟机共存了，个人推荐使用 WSL2，其支持 docker，个人在 Ubuntu 系统的 docker 与 WSL2 docker 中进行深度学习训练，WSL2 的性能丢失仅为 8%。此外他支持 U 盘接口等，文件储存方便，并且可以通过 WSL2 内的 Linux 子系统直接调用 windows 下的 <code>.exe</code> 文件。缺点就是 WSL2 默认是服务器终端，要设置桌面版教麻烦。</p><p>这边建议统一用 <strong>Windows Terminal</strong> 进行终端管理，进入微软商店直接搜索下载即可。</p><h2 id="wsl-下安装-ubuntu" tabindex="-1"><a class="header-anchor" href="#wsl-下安装-ubuntu" aria-hidden="true">#</a> WSL 下安装 ubuntu</h2><h3 id="wsl" tabindex="-1"><a class="header-anchor" href="#wsl" aria-hidden="true">#</a> WSL</h3>',5),d={href:"https://docs.microsoft.com/zh-cn/windows/wsl/install",target:"_blank",rel:"noopener noreferrer"},h=o(`<p><strong>可以通过微软商店安装，方便快捷</strong></p><p>也可以通过终端安装指定 WSL 版本，powershell 下执行 <code>wsl --install</code> 安装，之后可以安装对应的 Linux 版本：通过 <code>wsl --install -d &lt;Distribution Name&gt;</code> 安装。<code>wsl --list --online</code> 查看发行版本。</p><p>部分命令：</p><p>切换到子 Linux 系统中：<code>wsl -d Ubuntu-20.04 -u root</code> 查看全部安装的子系统：<code>wsl -l -v</code> 设置默认使用的系统：<code>wsl --setdefault &lt;DistributionName&gt;</code> 设置使用 WSL2：<code>wsl --set-version &lt;distro name&gt; 2</code></p><h3 id="更换-wsl-储存地址" tabindex="-1"><a class="header-anchor" href="#更换-wsl-储存地址" aria-hidden="true">#</a> 更换 WSL 储存地址</h3><p>子系统的备份与恢复：</p><p>WSL2 默认存放路径可以通过下面的，备份+恢复方式来修改。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">wsl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--shutdown</span></span>
<span class="line"><span style="color:#6F42C1;">wsl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--export</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Ubuntu-20.04</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:</span><span style="color:#005CC5;">\\U</span><span style="color:#032F62;">buntu-20.04.tar</span></span>
<span class="line"><span style="color:#6A737D;"># 卸载前必须备份，否则数据会全部丢失</span></span>
<span class="line"><span style="color:#6F42C1;">wsl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--unregister</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Ubuntu-20.04</span></span>
<span class="line"><span style="color:#6A737D;"># 下面导入 WSL 系统， D:\\new_path\\就是储存文件的地方。</span></span>
<span class="line"><span style="color:#6F42C1;">wsl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Ubuntu-20.04</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">ew_path</span><span style="color:#005CC5;">\\ </span><span style="color:#032F62;">D:</span><span style="color:#005CC5;">\\U</span><span style="color:#032F62;">buntu-20.04.tar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外 WSL 还支持预览功能（Linux GUI），但是需要加入 Windows 预览体验计划。</p><h3 id="其他-wsl-下的-ubuntu" tabindex="-1"><a class="header-anchor" href="#其他-wsl-下的-ubuntu" aria-hidden="true">#</a> 其他 WSL 下的 ubuntu</h3>`,10),u={href:"http://wujiawen.xyz/archives/linuxubuntu%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90",target:"_blank",rel:"noopener noreferrer"},y=n("h4",{id:"docker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker","aria-hidden":"true"},"#"),s(" docker")],-1),w=n("li",null,[n("strong",null,"WSL2 下默认是不支持 systemctl 的"),s(" ，但可以手动使用 service 启动 docker 服务。")],-1),b={href:"https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"你可能要重新配置以下 docker 以及 WSL2 的储存路径，否则 C 盘爆炸是一段时间内的事。",-1),v=o(`<h4 id="zsh" tabindex="-1"><a class="header-anchor" href="#zsh" aria-hidden="true">#</a> zsh</h4><ul><li>个人很喜欢使用 oh-my-zsh，包括其中的 autojump, autosuggestion 等插件等，能够极大的提高生产效率。 <strong>WSL2 设置 ZSH 为默认终端后，Windows Terminal 下的默认 Ubuntu 子系统快捷方式会消失，因此最保险的方式是安装非默认的 ubuntu 子系统，如 <code>Ubuntu-20.04</code> 等。</strong></li></ul><h3 id="wsl-下使用-windows-软件" tabindex="-1"><a class="header-anchor" href="#wsl-下使用-windows-软件" aria-hidden="true">#</a> WSL 下使用 windows 软件</h3><p>wsl 中可以使用 windows 上的软件，如 vscode, pycharm， typora 等。windows 下安装 vscode 后，在 wsl2 中可以使用 <code>code .</code> 自动打开工作目录，无需配置。</p><p>首先需要在 windows 中配置系统环境变量。而后在 wsl 的终端中设置环境变量，指向 windows 下软件的位置即可，如采用 zsh，则在 <code>.zshcr</code> 中配置:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">alias ty=&quot;/home/D/apps/Typora/Typora.exe&quot;  # 用 windows 上的 typora 打开 wsl2 中的文件。</span></span>
<span class="line"><span style="color:#24292e;">alias nhere=&quot;explorer.exe&quot;                 # 在 windows 上打开 wsl 目录文件夹</span></span>
<span class="line"><span style="color:#24292e;">alias pycharm=&quot;pycharm64.exe&quot;              # 用 windows 上的 pycharm 打开 wsl2 中的工作目录。</span></span>
<span class="line"><span style="color:#24292e;">alias git=&quot;git.exe&quot;                        # 用 windows 上的 git，这是比较不推荐的。</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),g={href:"https://www.jetbrains.com/help/pycharm/using-wsl-as-a-remote-interpreter-1.html",target:"_blank",rel:"noopener noreferrer"},C=o(`<h3 id="修改-wsl-的默认用户" tabindex="-1"><a class="header-anchor" href="#修改-wsl-的默认用户" aria-hidden="true">#</a> 修改 wsl 的默认用户</h3><p>通过 <code>wsl -l -v</code> 查看系统名称，如 <code>Ubuntu-18.04</code> 的话，命令行则使用 <code>ubuntu1804</code>。修改默认用户为 <code>kevin</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">ubuntu2004 config --default-user kevin</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改后，通过 vscode, pycharm, 文件管理器等 windows 应用访问时，默认采用 <code>kevin</code> 进行操作。若非必须的话，建议不用 <code>root</code> 作为默认用户，避免 linux 和 windows 系统文件权限不匹配的问题。</p><h4 id="目前发现问题" tabindex="-1"><a class="header-anchor" href="#目前发现问题" aria-hidden="true">#</a> 目前发现问题</h4><ul><li>由于 wsl 和 windows 共享磁盘，如 D，C 盘采用的磁盘格式特殊，因此无法修改共享磁盘下的文件权限。</li><li>如果使用 <code>apt-get install git</code> 再 linux 系统中安装 git 的话，默认情况下是不能够在挂载路径进行 git 操作的，如 <code>/mnt/d/xxx</code>。可以使用 <code>windows</code>下安装的 <code>git.exe</code>，设置 <code>alias git=git.exe</code>；但更推荐的是在非共享磁盘下进行进行 git 操作，然后采用上节介绍的方法来修改代码和文件，这样能省去很多 windows git 的麻烦。</li><li><code>No route to host</code> 错误：wlan 网络下应该禁用 internet 共享。确保 <code>控制面板\\网络和 Internet\\网络连接</code> 下的 WLAN-属性-共享下的与其他人共享 internet 功能没有开启</li></ul><h2 id="powershell" tabindex="-1"><a class="header-anchor" href="#powershell" aria-hidden="true">#</a> powershell</h2><p>推荐使用最新版的 powershell，从微软商店下载安装即可，这样可以省去很多 oh-my-posh 安装时候的坑。</p><h3 id="oh-my-posh" tabindex="-1"><a class="header-anchor" href="#oh-my-posh" aria-hidden="true">#</a> oh-my-posh</h3>`,9),f={href:"https://ohmyposh.dev/docs/installation/windows",target:"_blank",rel:"noopener noreferrer"},E={href:"https://sspai.com/post/69911",target:"_blank",rel:"noopener noreferrer"},_=n("h4",{id:"字体设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#字体设计","aria-hidden":"true"},"#"),s(" 字体设计")],-1),x={href:"https://www.nerdfonts.com/font-downloads",target:"_blank",rel:"noopener noreferrer"},F={href:"https://ohmyposh.dev/docs/configuration/fonts",target:"_blank",rel:"noopener noreferrer"},k=o(`<p>若使用 windows Terminal，则直接在设置里面配置使用字体即可。（windows terminal 》设置》配置文件》Powershell》外观》字体）个人采用了 <code>JetBrainsMono NF</code></p><h4 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装" aria-hidden="true">#</a> 下载安装</h4><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">winget install oh</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">posh  </span></span>
<span class="line"><span style="color:#6A737D;"># 很慢的话尝试下科学上网</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后进行初始化，首先创建配置文件，<code>code $PROFILE</code>。往里面添加：<code>oh-my-posh init pwsh | Invoke-Expression</code>后保存。最后应用生效 <code>. $PROFILE</code></p><h4 id="主题设置" tabindex="-1"><a class="header-anchor" href="#主题设置" aria-hidden="true">#</a> 主题设置</h4><p>皮肤个人推荐 wopian，简约好看！</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># code $PROFILE 而后在其中修改</span></span>
<span class="line"><span style="color:#24292E;">oh</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">posh init pwsh </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">config ~\\AppData\\Local\\Programs\\oh</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">my</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">posh\\themes\\wopian.omp.json </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Invoke-Expression</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，使用不同安装方式得到的主题路径不同，如下：</p><table><thead><tr><th><strong>安装方式</strong></th><th><strong>主题路径</strong></th></tr></thead><tbody><tr><td>Windows Scoop</td><td><code>~\\scoop\\apps\\oh-my-posh\\current\\themes\\wopian.omp.json</code></td></tr><tr><td>Windows Choco/Winget</td><td><code>~\\AppData\\Local\\Programs\\oh-my-posh\\themes\\wopian.omp.json</code></td></tr><tr><td>macOS Brew</td><td><code>~/.poshthemes/wopian.omp.json</code></td></tr><tr><td>GNU/Linux 命令行</td><td><code>~/.poshthemes/wopian.omp.json</code></td></tr><tr><td>自行下载</td><td>Oh my Posh 和 Themes 需要填完整的自定义路径</td></tr></tbody></table><h4 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> alias</h4><p><code>$PROFILE</code> 文件中添加：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">Set-Alias</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ty</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Value</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">pps</span><span style="color:#005CC5;">\\T</span><span style="color:#032F62;">ypora</span><span style="color:#005CC5;">\\T</span><span style="color:#032F62;">ypora.exe</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于有变量的命令，可以用函数进行间接设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">todo_func</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">D:\\apps\\Typora\\Typora.exe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:</span><span style="color:#005CC5;">\\我</span><span style="color:#032F62;">的坚果云</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">odo</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">odo.md}</span></span>
<span class="line"><span style="color:#6F42C1;">Set-Alias</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">todo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Value</span><span style="color:#24292E;"> </span><span style="color:#032F62;">todo_func</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动跳转" tabindex="-1"><a class="header-anchor" href="#自动跳转" aria-hidden="true">#</a> 自动跳转</h4>`,15),L={href:"https://www.runoob.com/lua/lua-environment.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/skywind3000/z.lua.git",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"git clone https://github.com/skywind3000/z.lua.git",-1),W=o(`<p>最后在 powershell 的配置文件 <code>$PROFILE</code> 中引入插件即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">Invoke-Expression</span><span style="color:#24292E;"> (&amp; { (</span><span style="color:#6F42C1;">lua</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">pps</span><span style="color:#005CC5;">\\z</span><span style="color:#032F62;">.lua</span><span style="color:#005CC5;">\\z</span><span style="color:#032F62;">.lua</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">powershell</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">-join</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\`</span><span style="color:#6F42C1;">n&quot; })</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可能需要重启终端才能生效。另外 z.lua 采用了 <strong>子串匹配</strong> 的规则，而非最小编辑距离。因此如果要跳转到 <code>post</code> 文件夹的话，使用 <code>z pst</code> 是不行的。</p><h4 id="自动填充" tabindex="-1"><a class="header-anchor" href="#自动填充" aria-hidden="true">#</a> 自动填充</h4><p><code>https://github.com/PowerShell/PSReadLine</code> 中安装该插件</p><p>同样在 powershell 的 <code>$PROFILE</code> 中配置以下插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">Set-PSReadLineKeyHandler</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Ctrl+z&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Undo</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 设置 Ctrl+z 为撤销</span></span>
<span class="line"><span style="color:#6F42C1;">Set-PSReadLineKeyHandler</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UpArrow</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HistorySearchBackward</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 设置向上键为后向搜索历史记录</span></span>
<span class="line"><span style="color:#6F42C1;">Set-PSReadLineKeyHandler</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DownArrow</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HistorySearchForward</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 设置向下键为前向搜索历史纪录</span></span>
<span class="line"><span style="color:#6F42C1;">Set-PSReadLineOption</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-PredictionSource</span><span style="color:#24292E;"> </span><span style="color:#032F62;">History</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 设置预测文本来源为历史记录</span></span>
<span class="line"><span style="color:#6F42C1;">Set-PSReadlineKeyHandler</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Tab</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Complete</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 设置 Tab 键补全</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd" aria-hidden="true">#</a> CMD</h2><p>CMD 个人使用的不多，放点链接直接跳过吧！</p>`,9),A={href:"https://chrisant996.github.io/clink/",target:"_blank",rel:"noopener noreferrer"};function P(z,U){const e=t("ExternalLinkIcon");return p(),r("div",null,[i,n("p",null,[s("安装 WSL 参考 "),n("a",d,[s("官方文档"),a(e)]),s("。必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11。")]),h,n("p",null,[s("关于终端的配置可以参考我的另一篇博客 "),n("a",u,[s("Ubuntu 配置与软件推荐"),a(e)]),s("，此处列几个要点。")]),y,n("ul",null,[w,n("li",null,[s("对于深度学习 GPU 加速，可以参考"),n("a",b,[s("官方配置文档"),a(e)]),s(" ，个人推荐使用 nvidia-docker2。WSL2 中使用 CUDA 启动较慢，但是经过个人测试，深度学习训练效率相对于标准的 Ubuntu 下 nvidia-docker，仅降低了 7%左右。")]),m]),v,n("p",null,[s("此外 pycharm 等也可以配置 wsl 中的 python 解释器，参考："),n("a",g,[s("官方"),a(e)]),s(" 在添加解析器时候选择 wsl 就行。")]),C,n("p",null,[s("安装参考 "),n("a",f,[s("oh-my-posh 官网"),a(e)]),s("，网上也有很多博客如 "),n("a",E,[s("Oh My Posh：全平台终端提示符个性化工具"),a(e)])]),_,n("p",null,[s("从 "),n("a",x,[s("Nerd Font"),a(e)]),s(" 下载字体并安装（解压到 C:\\WINDOWS\\FONTS)，而后进行配置"),n("a",F,[s("参考官方"),a(e)]),s("。")]),k,n("p",null,[s("linux 下的 autojump 是真的好用，powershell 中的替代品为 z.lua。首先在 windows 中安装 "),n("a",L,[s("lua"),a(e)]),s(" 环境，安装后检查环境变量等是否正常。之后下载 "),n("a",S,[s("z.lua"),a(e)]),s(),D]),W,n("p",null,[s("插件："),n("a",A,[s("CLINK"),a(e)])])])}const T=l(c,[["render",P],["__file","笔记wsl2.html.vue"]]);export{T as default};
