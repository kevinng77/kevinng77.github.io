import{_ as o,E as c,S as i,W as p,$ as n,a3 as e,Z as s,a2 as d,aS as t}from"./framework-d5c0d2cb.js";const l={},r={href:"https://neo4j.com/",target:"_blank",rel:"noopener noreferrer"},u=n("p",null,"Neo4j 采用属性图模型（每个节点都有唯一标识符，节点与关系下储存有对应的属性与属性值键值对。节点之间使用关系链接，类似于 ER 图。）",-1),v=n("h2",{id:"安装搭建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装搭建","aria-hidden":"true"},"#"),e(" 安装搭建")],-1),m={href:"https://neo4j.com/download-center/#community",target:"_blank",rel:"noopener noreferrer"},k=t('<p>解压后安装服务 <code>&lt;NEO4J_HOME&gt;/bin/neo4j install-service</code>，在后台启动服务：</p><p><code>&lt;NEO4J_HOME&gt;/bin/neo4j start</code></p><p>浏览器访问 <code>localhost:7474</code>，首次访问会弹出登录界面，默认用户名与密码为 <code>neo4j</code>。</p><p>网页由多个命令框组成，顶部命令框中 <code>neo4j$</code> 表示目前正在使用 <code>neo4j</code> 数据库，命令都以 <code>:</code> 开头，一些常用与命令框的快捷键有： <code>ctrl+ Enter</code> 执行代码行，<code>ctrl + up-arrow/down-arrow</code> 查看上/下一条执行的代码。<code>F1</code> 查看更多快捷键。</p><p>可以点击命令框最右侧的星来收藏框中的命令。</p><p>可以将查询结果与代码等保存成 Cypher 文件，并储存与项目对应的仓库中，其他项目成员也可以访问到他们。</p><h2 id="cypher" tabindex="-1"><a class="header-anchor" href="#cypher" aria-hidden="true">#</a> Cypher</h2>',7),h=n("code",null,"CREATE",-1),b=n("code",null,"MATCH",-1),g=n("code",null,"RETURN",-1),_=n("code",null,"WHERE",-1),x=n("code",null,"DELETE",-1),E=n("code",null,"REMOVE",-1),y=n("code",null,"ORDER BY",-1),f=n("code",null,"SET",-1),j={href:"https://neo4j.com/docs/cypher-manual/current/clauses/",target:"_blank",rel:"noopener noreferrer"},q=t(`<h4 id="create-与-match" tabindex="-1"><a class="header-anchor" href="#create-与-match" aria-hidden="true">#</a> CREATE 与 MATCH</h4><p>通常使用 <code>()</code> 表示节点，<code>[]</code> 表示关系。</p><p>创建一个节点 <code>ee</code>，节点 <code>name</code> 为 &quot;张三&quot; ，标签为 <code>Person</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE (ee:Person {name:&#39;张三&#39;,属性 2:&#39;属性 2 值&#39;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>MATCH</code> 查找对应的节点，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (ee:Person) WHERE ee.name = &#39;张三&#39; RETURN ee;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>ee</code> 为临时变量，用来代表节点搜查结果。随后建立张三住在北京的关系：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>match (c:Person) where c.name=&quot;张三&quot;
CREATE(a:location {name:&quot;北京&quot;}),
(b:location {name:&quot;上海&quot;}),
(n:Person {name:&quot;李四&quot;}) ,
(n)-[:住在 {since:2001}]-&gt;(a),
(n)-[:住在 {since:2011}]-&gt;(b),
(c)-[:住在 {since:1999}]-&gt;(a)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>[]</code>表示关系，此处关系也可以写成<code>(b)&lt;-[:住在 {since:2011}]-(n)</code>；查找和张三住一个地方的人：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person)-[]-&gt;(location)&lt;-[]-(c:Person) return a,c,location
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同时 match 支持正则表达式（语法如：<code>where n.name=~&quot;.*三&quot;</code>） 。也可以根据关系搜索：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>match p=()-[c:relation]-() return p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询所有有对外关系的节点：<code>MATCH (a)--&gt;() RETURN a</code>；查询所有有关系的节点<code>MATCH (a)--() RETURN a</code></p><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> DELETE</h3><p>删除节点前需要修改节点属性：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;张三&#39;}) SET a.test=&#39;test&#39;
MATCH (a:Person {name:&#39;张三&#39;}) REMOVE a.test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除所有节点与关系</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (n) DETACH DELETE n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="load-csv" tabindex="-1"><a class="header-anchor" href="#load-csv" aria-hidden="true">#</a> LOAD CSV</h4><p>加载 csv 文件中的数据，csv 文件需要是 UTF-8 编码。导入后使用 <code>line[i]</code> 来索引需要的列。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LOAD CSV FROM &#39;file:///sample.csv&#39; as line
create (:person {name:line[0]})
或
LOAD CSV WITH HEADERS FROM &#39;file:///sample.csv&#39; as line
create (:person {name:line.name})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上例，CSV 文件应放置于 <code>&lt;NEO4J_HOME&gt;/data/csv/sample.csv</code>。</p><p>通过导入存有 RDF 三元组的文件来导入节点关系：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>USING PERIODIC COMMIT LOAD CSV FROM &#39;file:///rdf.csv&#39; as line
create (:myrelation {subject:line[0],relation:line[1],object:line[2]})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>USING PERIODIC COMMIT </code> 使 neo4j 在加载一定数据后 commit 一次，常用于载入大文件。在导入数据后，对两个数据集的内容进行匹配，建立节点关系：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>match (n:person),(m:relation),(s:person) where n.name=m.subject and m.object=s.name
create (n)-[r:关系 {relation:m.relation}]-&gt;(s)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> INDEX</h4><p>创建索引可加快检索速度</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE INDEX ON :label(property)
CREATE INDEX ON :person(name)
DROP INDEX ON :person(name)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unique" tabindex="-1"><a class="header-anchor" href="#unique" aria-hidden="true">#</a> UNIQUE</h4><p>确保数据库中 <code>person.name</code>是唯一的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE CONSTRAINT ON (n:Person) ASSERT (n.name) IS UNIQUE
DROP CONSTRAINT ON (n:Person) ASSERT (n.name) IS UNIQUE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据回复与备份" tabindex="-1"><a class="header-anchor" href="#数据回复与备份" aria-hidden="true">#</a> 数据回复与备份</h2><p>备份需要关闭 neo4j 服务。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>neo4j stop
neo4j-admin dump --database=neo4j --to=backup/1.dump
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还原时仍需要关闭 neo4j 服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bin/neo4j-admin load --from=backup/1.dump --database=new.db --force
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="插件安装" tabindex="-1"><a class="header-anchor" href="#插件安装" aria-hidden="true">#</a> 插件安装</h2>`,38),C={href:"https://neo4j.com/labs/apoc/",target:"_blank",rel:"noopener noreferrer"},T=n("strong",null,"APOC 安装：",-1),N={href:"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,[e("重启 neo4j 后，输入 "),n("code",null,"return apoc.version()"),e(" 验证是否安装成功。")],-1),w={href:"https://downloads.mysql.com/archives/c-j/",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"mysql-connector-java-8.0.26.jar",-1),R=t(`<p><code>apoch.load.jdbc</code> 加载 MySQL 数据库时，使用<code>row.col_name</code> 选择。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>call apoc.load.jdbc(&#39;jdbc:mysql://{IP}:{PORT}/{DBNAME}? user={USERNAME}&amp;password={PASSWORD} &quot;,&quot;{TABLENAME}&quot;) yield row
create (b:Black{number:row.black_id, type:row.type})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="py2neo" tabindex="-1"><a class="header-anchor" href="#py2neo" aria-hidden="true">#</a> py2neo</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> py2neo <span class="token keyword">import</span> Graph
graph <span class="token operator">=</span> Graph<span class="token punctuation">(</span><span class="token string">&quot;http://localhost:7687&quot;</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&quot;neo4j&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建带有属性的节点</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> py2neo <span class="token keyword">import</span> Graph<span class="token punctuation">,</span>Node
<span class="token keyword">def</span> <span class="token function">create_diseases_nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> disease_infos<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> disease_dict <span class="token keyword">in</span> disease_infos<span class="token punctuation">:</span>
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&quot;Disease&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> desc<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    prevent<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;prevent&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>cause<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cause&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 easy_get<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;easy_get&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cure_lasttime<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cure_lasttime&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    cure_department<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cure_department&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cure_way<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cure_way&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> cured_prob<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">&#39;cured_prob&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>create<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建关系</strong> - 使用 <code>Graph.run(query)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">create_relationship</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_node<span class="token punctuation">,</span> end_node<span class="token punctuation">,</span> edges<span class="token punctuation">,</span> rel_type<span class="token punctuation">,</span> rel_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 去重处理</span>
    set_edges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> edge <span class="token keyword">in</span> edges<span class="token punctuation">:</span>
        set_edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;###&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token builtin">all</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>set_edges<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> edge <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>set_edges<span class="token punctuation">)</span><span class="token punctuation">:</span>
        edge <span class="token operator">=</span> edge<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;###&#39;</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        q <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        query <span class="token operator">=</span> <span class="token string">&quot;match(p:%s),(q:%s) where p.name=&#39;%s&#39;and q.name=&#39;%s&#39; create (p)-[rel:%s{name:&#39;%s&#39;}]-&gt;(q)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>
            start_node<span class="token punctuation">,</span> end_node<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> rel_type<span class="token punctuation">,</span> rel_name<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>run<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">return</span>

<span class="token comment"># self.create_relationship(&#39;Disease&#39;, &#39;Food&#39;, rels_doeat, &#39;do_eat&#39;, &#39;宜吃&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询的方式类似：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>query <span class="token operator">=</span> <span class="token string">&quot;MATCH (m:Disease) where m.name = &#39;苯中毒&#39; return m.name, m.cause&quot;</span>
ress <span class="token operator">=</span> self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>run<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>`,11),M={href:"https://neo4j.com/labs/apoc/4.1/overview/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://neo4j.com/docs/operations-manual/current/installation/linux/debian/#debian-ubuntu-prerequisites",target:"_blank",rel:"noopener noreferrer"},P=t(`<h4 id="ubuntu18-04-上安装-jdk11" tabindex="-1"><a class="header-anchor" href="#ubuntu18-04-上安装-jdk11" aria-hidden="true">#</a> ubuntu18.04+上安装 jdk11</h4><p><code>apt-get install default-jdk</code> 安装好后，<code>jave -version</code> 检查。</p><p>处理多个 java 版本问题：<code>update-java-alternatives --list</code> 显示已安装的版本，</p><p><code>sudo update-java-alternatives --jre --set &lt;java11name&gt;</code> 指定 java 版本</p><h4 id="docker-运行" tabindex="-1"><a class="header-anchor" href="#docker-运行" aria-hidden="true">#</a> docker 运行：</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull neo4j:community
docker run \\
    -p 7474:7474 \\
    -p 7687:7687 \\
    -p 7473:7473 \\
    -v $HOME/neo4j/data:/data \\
    neo4j:community
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最短路径查询：(<code>*..10</code> 表示限定 10 跳内)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>match (p1:Person{name:&quot;Joel Silver&quot;}),(p2:Person{name:&quot;Emil Eifrem&quot;}),p=shortestpath((p1)-[*..10]-(p2)) return p1, p2, p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8);function D(I,H){const a=c("ExternalLinkIcon");return i(),p("div",null,[n("blockquote",null,[n("p",null,[e("Neo4j 安装搭建、基础 Cypher 语法。大部分内容参考与 Neo4j "),n("a",r,[e("官网"),s(a)]),e("。")])]),d("more"),u,v,n("p",null,[n("a",m,[e("neo4j 下载中心"),s(a)]),e(" 选择需要的版本，Neo4j 4.4，需要 jdk11。")]),k,n("p",null,[e("常用命令有 "),h,e(", "),b,e(", "),g,e(", "),_,e(", "),x,e(", "),E,e(", "),y,e(", "),f,e(" 等 "),n("a",j,[e("查看官网详细文档"),s(a)]),e("。")]),q,n("p",null,[e("APOC（Awesome Procedures On Cypher） APOC 可以提供 文本索引、图算法、空间函数 、数据集成、图形重构、触发器等功能 "),n("a",C,[e("APOC 详细"),s(a)]),e("。")]),n("p",null,[T,e(" 从 "),n("a",N,[e("apoc release"),s(a)]),e(" 下载对应版本 xx-all.jar 包，放置于 neo4j plugins 文件夹下。")]),A,n("p",null,[e("要实现与 MySQL 数据库链接的话，需要安装 MySQL connector 插件。从 "),n("a",w,[e("页面"),s(a)]),e(" 下载 Platform Independent 对应文件，解压出其中的 "),O,e(" 放置于 neo4j plugins 文件夹。")]),R,n("p",null,[n("a",M,[e("APOC 函数"),s(a)])]),n("p",null,[n("a",S,[e("Debian/Ubuntu 下安装 Neo4j server"),s(a)])]),P])}const L=o(l,[["render",D],["__file","笔记neo4j.html.vue"]]);export{L as default};
