import{_ as p,P as o,U as l,Y as n,a1 as s,X as e,aQ as t,E as c}from"./framework-6cee4965.js";const i={},u=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),s(" 概述")],-1),r={href:"https://www.mlflow.org/docs/latest/quickstart.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<h3 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> mlflow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>MLflow 包含了四个应用：</p><ul><li>MLflow Tracking：提供可视化模型训练记录，包括超参配置、训练指标、模型权重、模型输出文件等 artifact。数据会被记录在 MLflow 云服务器上</li><li>MLflow Projects：打包管理 ML 模型项目，方便复现与部署。</li><li>MLflow Models：主要用于 AI 模型储存、加载以及服务部署。由于目前 AI 框架较多，因此 MLflow 也提供了比较统一的保存加载和服务部署方案。</li><li>MLflow Registry：如果说 MLflow Model 能让我们将开发过程中的模型权重、配置等储存起来。那么 MLflow Registry 则让我们对筛选出来的、要落地的模型进行标注和管理。</li></ul><h2 id="mlflow-tracking" tabindex="-1"><a class="header-anchor" href="#mlflow-tracking" aria-hidden="true">#</a> MLflow Tracking</h2>`,5),k={href:"https://www.mlflow.org/docs/latest/tracking.html#",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="启动-mlflow-服务器" tabindex="-1"><a class="header-anchor" href="#启动-mlflow-服务器" aria-hidden="true">#</a> 启动 MLflow 服务器</h3><p>在服务器上启动 Tracking 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mlflow server <span class="token punctuation">\\</span>
    --backend-store-uri sqlite:///mlflow.db <span class="token punctuation">\\</span>
    --default-artifact-root <span class="token operator">&lt;</span>your-artifact-address<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--host</span> <span class="token number">0.0</span>.0.0 <span class="token punctuation">\\</span>
    <span class="token parameter variable">--port</span> <span class="token number">5000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),v=n("code",null,"tracking_uri=server_ip:5000",-1),b={href:"https://www.mlflow.org/docs/latest/tracking.html#id13",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"同时配置",-1),g=n("p",null,[n("code",null,"backend-store-uri"),s(" 用以储存结构化数据如 metrics, params, 等模型信息。"),n("code",null,"artifact-root"),s(" 用以储存非结构化信息包括：模型权重、模型配置文件、模型输出文字、图片、网页等各类数据，一般配置云储存服务。")],-1),_=n("p",null,[s("需要注意如果 "),n("code",null,"default-artifact-root"),s(" 提供 nfs 路径，那么路径对应的文件夹需要在客户端与服务端上保持一致。")],-1),f=n("h3",{id:"客户端配置-uri",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#客户端配置-uri","aria-hidden":"true"},"#"),s(" 客户端配置 URI")],-1),y={href:"https://www.mlflow.org/docs/latest/tracking.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"mlflow.get_tracking_uri()",-1),q={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.set_tracking_uri",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"mlflow.set_tracking_uri()",-1),M=t(`<h3 id="建立-experiment" tabindex="-1"><a class="header-anchor" href="#建立-experiment" aria-hidden="true">#</a> 建立 Experiment</h3><p>实验类似于文件夹，能够用来快速分类与检索模型训练结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>experiment_name <span class="token operator">=</span> <span class="token string">&quot;kevin_task&quot;</span>
mlflow<span class="token punctuation">.</span>set_experiment<span class="token punctuation">(</span>experiment_name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，MLFLOW 使用 <code>default</code> 实验。</p><h3 id="记录训练数据" tabindex="-1"><a class="header-anchor" href="#记录训练数据" aria-hidden="true">#</a> 记录训练数据</h3><p>可视化 AI 模型训练指标，类似于 TensorBoard、VisualDL 等工具。可以记录图片、文字、数字、html 页面等任意格式的内容。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mlflow
<span class="token keyword">import</span> cv2

mlflow<span class="token punctuation">.</span>set_tracking_uri<span class="token punctuation">(</span><span class="token string">&quot;http://mlflow_server_ip:port&quot;</span><span class="token punctuation">)</span>

experiment_name <span class="token operator">=</span> <span class="token string">&quot;kevin_task&quot;</span>
<span class="token keyword">if</span> mlflow<span class="token punctuation">.</span>get_experiment_by_name<span class="token punctuation">(</span>experiment_name<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    mlflow<span class="token punctuation">.</span>create_experiment<span class="token punctuation">(</span>experiment_name<span class="token punctuation">)</span>
mlflow<span class="token punctuation">.</span>set_experiment<span class="token punctuation">(</span>experiment_name<span class="token punctuation">)</span>
np_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&quot;./my_img.png&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> mlflow<span class="token punctuation">.</span>start_run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> run<span class="token punctuation">:</span>
    mlflow<span class="token punctuation">.</span>set_tag<span class="token punctuation">(</span><span class="token string">&quot;your Keys&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;your tags&quot;</span><span class="token punctuation">)</span>
    mlflow<span class="token punctuation">.</span>log_param<span class="token punctuation">(</span><span class="token string">&quot;lambda&quot;</span><span class="token punctuation">,</span> <span class="token number">0.122</span><span class="token punctuation">)</span>
    mlflow<span class="token punctuation">.</span>log_metric<span class="token punctuation">(</span><span class="token string">&quot;f1&quot;</span><span class="token punctuation">,</span> <span class="token number">.6</span><span class="token punctuation">)</span>
    mlflow<span class="token punctuation">.</span>log_text<span class="token punctuation">(</span><span class="token string">&quot;this is a output from NLP model&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span>
    mlflow<span class="token punctuation">.</span>log_text<span class="token punctuation">(</span><span class="token string">&#39;this is a output from &lt;div style=&quot;font-size:40px&quot;&gt;NLP&lt;/div&gt; model&#39;</span><span class="token punctuation">,</span><span class="token string">&quot;custom.html&quot;</span><span class="token punctuation">)</span>
    mlflow<span class="token punctuation">.</span>log_image<span class="token punctuation">(</span>np_img<span class="token punctuation">,</span><span class="token string">&quot;what.png&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># imput np array</span>
    
    <span class="token comment"># 可以记录不同 step 的数值。</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        mlflow<span class="token punctuation">.</span>log_metric<span class="token punctuation">(</span><span class="token string">&quot;loss&quot;</span><span class="token punctuation">,</span> i<span class="token operator">/</span><span class="token number">30</span><span class="token punctuation">,</span> step<span class="token operator">=</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较特别的是 MLflow 适配了自动记录训练参数，但只适配部分主流的 AI 框架，如 SKlearn，Torch 等。在训练开始前声明 <code>mlflow.autolog()</code> 即可。mlflow 会自动根据模型类型选择记录的参数和指标。</p><p>如果 MLflow 搭载在云服务器上，那么所有记录的数据会被上传到已经配置的云数据库中，因此网速慢或者 artifact 文件太大的话，都会导致代码运行很久。</p><h2 id="mlflow-projects" tabindex="-1"><a class="header-anchor" href="#mlflow-projects" aria-hidden="true">#</a> MLflow Projects</h2><p>打包管理 ML 模型项目，方便复现与部署。</p><h3 id="项目文件架构" tabindex="-1"><a class="header-anchor" href="#项目文件架构" aria-hidden="true">#</a> 项目文件架构</h3><p>一个 MLflow 项目的文件夹包含以下文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">|</span>- MLproject
<span class="token operator">|</span>- python_env.yaml
<span class="token operator">|</span>- your_al_files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mlproject-文件" tabindex="-1"><a class="header-anchor" href="#mlproject-文件" aria-hidden="true">#</a> MLproject 文件</h4><p>官方提供的模板：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> My Project

<span class="token key atrule">python_env</span><span class="token punctuation">:</span> python_env.yaml
<span class="token comment"># or</span>
<span class="token comment"># conda_env: my_env.yaml</span>
<span class="token comment"># or</span>
<span class="token comment"># docker_env:</span>
<span class="token comment">#    image:  mlflow-docker-example</span>

<span class="token key atrule">entry_points</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">parameters</span><span class="token punctuation">:</span>
      <span class="token key atrule">data_file</span><span class="token punctuation">:</span> path
      <span class="token key atrule">regularization</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">type</span><span class="token punctuation">:</span> float<span class="token punctuation">,</span> <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;python train.py -r {regularization} {data_file}&quot;</span>
  <span class="token key atrule">validate</span><span class="token punctuation">:</span>
    <span class="token key atrule">parameters</span><span class="token punctuation">:</span>
      <span class="token key atrule">data_file</span><span class="token punctuation">:</span> path
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;python validate.py {data_file}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中我们需要定义：</p><ul><li><code>name</code>: 项目名字</li><li><code>xxx_env</code>：项目运行的环境</li><li><code>entry_points</code>：如何运行这个项目，一般是一些命令。</li></ul><h4 id="环境项目配置" tabindex="-1"><a class="header-anchor" href="#环境项目配置" aria-hidden="true">#</a> 环境项目配置</h4><p>普通情况下我们只需要使用 Virtualenv 虚拟环境运行项目，因此可以编写以下 <code>python_env.yaml</code> 文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># Python version required to run the project.</span>
<span class="token key atrule">python</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8.15&quot;</span>
<span class="token comment"># Dependencies required to build packages. This field is optional.</span>
<span class="token key atrule">build_dependencies</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> pip
  <span class="token punctuation">-</span> setuptools
  <span class="token punctuation">-</span> wheel==0.37.1
<span class="token comment"># Dependencies required to run the project.</span>
<span class="token key atrule">dependencies</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token punctuation">-</span>r requirments.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 MLproject 中配置改文件的 <strong>相对路径</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">python_env</span><span class="token punctuation">:</span> python_env.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：使用 <code>python_env</code> 时，需要安装<code>pyenv</code> 相关命令。</p><p>当然也可以使用 docker（默认从 DockerHub 拉取</p><p>）：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">docker_env</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> mlflow<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>example<span class="token punctuation">-</span>environment
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/local/path:/container/mount/path&quot;</span><span class="token punctuation">]</span>
  <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;NEW_ENV_VAR&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;new_var_value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;VAR_TO_COPY_FROM_HOST_ENVIRONMENT&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置项目运行方式" tabindex="-1"><a class="header-anchor" href="#配置项目运行方式" aria-hidden="true">#</a> 配置项目运行方式</h4><p>配置 Entry Point</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">entry_points</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">parameters</span><span class="token punctuation">:</span>
      <span class="token key atrule">data_file</span><span class="token punctuation">:</span> path
      <span class="token key atrule">regularization</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">type</span><span class="token punctuation">:</span> float<span class="token punctuation">,</span> <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;python train.py -r {regularization} {data_file}&quot;</span>
  <span class="token key atrule">validate</span><span class="token punctuation">:</span>
    <span class="token key atrule">parameters</span><span class="token punctuation">:</span>
      <span class="token key atrule">data_file</span><span class="token punctuation">:</span> path
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token string">&quot;python validate.py {data_file}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数格式：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">parameter_name</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">type</span><span class="token punctuation">:</span> data_type<span class="token punctuation">,</span> <span class="token key atrule">default</span><span class="token punctuation">:</span> value<span class="token punctuation">}</span>  <span class="token comment"># Short syntax</span>

<span class="token key atrule">parameter_name</span><span class="token punctuation">:</span>     <span class="token comment"># Long syntax</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> data_type
  <span class="token key atrule">default</span><span class="token punctuation">:</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>type</code> 支持 <code>string</code>, <code>float</code>, <code>path</code>, <code>uri</code>。</p><h3 id="运行-mlproject-项目" tabindex="-1"><a class="header-anchor" href="#运行-mlproject-项目" aria-hidden="true">#</a> 运行 MLProject 项目</h3><p>MLproject 能够让你知道这个项目的环境依赖还有运行方式，他仅会在 MLtracking 上多记录一行 <code>Run Command=mlflow run ...</code>。</p><p>官方推荐将所有项目的配置都记录在 MLproject 文件下，然后直接用一行简单的命令就能够顺利启动项目。</p><h4 id="使用-python-文件运行" tabindex="-1"><a class="header-anchor" href="#使用-python-文件运行" aria-hidden="true">#</a> 使用 python 文件运行</h4><p><code>mlflow.projects.run()</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mlflow
<span class="token keyword">import</span> os

<span class="token comment"># 要在运行前配置好 tracking uri，当然也可以在环境变量中定义好</span>
mlflow<span class="token punctuation">.</span>set_tracking_uri<span class="token punctuation">(</span><span class="token string">&quot;http://40.76.242.139:8005&quot;</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;ddd&quot;</span>

os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">&quot;AZURE_STORAGE_ACCESS_KEY&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">r&quot;xxx&quot;</span>

project_uri <span class="token operator">=</span> <span class="token string">&quot;./&quot;</span>
params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;alpha&quot;</span><span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token string">&quot;l1_ratio&quot;</span><span class="token punctuation">:</span> <span class="token number">0.0666</span><span class="token punctuation">}</span>

<span class="token comment"># Run MLflow project and create a reproducible conda environment</span>
<span class="token comment"># on a local host</span>
mlflow<span class="token punctuation">.</span>run<span class="token punctuation">(</span>project_uri<span class="token punctuation">,</span> experiment_name<span class="token operator">=</span><span class="token string">&quot;kevin from python&quot;</span><span class="token punctuation">,</span>parameters<span class="token operator">=</span>params<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果使用 MLProject 启动训练或者推理，那么在你的训练文件中就不应该出现 <code>with mlflow.start_run()</code> 等新建 <code>run</code>的 代码。</p>`,41),L=n("strong",null,"比较特别的是",-1),j={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.projects.html#mlflow.projects.run",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"mlflow.projects.run()",-1),E={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.client.html#module-mlflow.client",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"mlflow.client",-1),I={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.projects.html#mlflow.projects.run",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"mlflow.projects.run()",-1),T=n("code",null,"mlflow.client",-1),P=t(`<h4 id="使用终端运行" tabindex="-1"><a class="header-anchor" href="#使用终端运行" aria-hidden="true">#</a> 使用终端运行</h4><p>使用 <code>mlflow run</code> 时，需要提前在环境变量里定义好 tracking_uri 等其他信息，比如你的 artifact 网盘账号和密码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>export MLFLOW_TRACKING_URI<span class="token operator">=</span><span class="token string">&quot;http://40.76.242.139:8005&quot;</span>
mlflow run <span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">-</span>experiment<span class="token operator">-</span>name<span class="token operator">=</span><span class="token string">&quot;new kevin 2&quot;</span> <span class="token operator">-</span>P alpha<span class="token operator">=</span><span class="token number">5.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mlflow-models" tabindex="-1"><a class="header-anchor" href="#mlflow-models" aria-hidden="true">#</a> MLflow Models</h2><p>主要用于 AI 模型储存、加载以及服务部署。由于目前 AI 框架较多，因此 MLflow 也提供了比较统一的保存加载和服务部署方案。</p><h3 id="记录模型" tabindex="-1"><a class="header-anchor" href="#记录模型" aria-hidden="true">#</a> 记录模型</h3>`,6),C=n("code",null,"mlflow.xxx.log_model()",-1),N={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>ensemble <span class="token keyword">import</span> RandomForestClassifier
<span class="token keyword">import</span> mlflow
<span class="token keyword">import</span> mlflow<span class="token punctuation">.</span>sklearn
<span class="token keyword">from</span> mlflow<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signature <span class="token keyword">import</span> infer_signature

iris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>
iris_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>iris<span class="token punctuation">.</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span>iris<span class="token punctuation">.</span>feature_names<span class="token punctuation">)</span>
clf <span class="token operator">=</span> RandomForestClassifier<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>iris_train<span class="token punctuation">,</span> iris<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
signature <span class="token operator">=</span> infer_signature<span class="token punctuation">(</span>iris_train<span class="token punctuation">,</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>iris_train<span class="token punctuation">)</span><span class="token punctuation">)</span>
mlflow<span class="token punctuation">.</span>sklearn<span class="token punctuation">.</span>log_model<span class="token punctuation">(</span>clf<span class="token punctuation">,</span> <span class="token string">&quot;iris_rf&quot;</span><span class="token punctuation">,</span> signature<span class="token operator">=</span>signature<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以上代码，在 mlflow 会储存相对应的模型文件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Directory written by mlflow.sklearn.save_model(model, &quot;my_model&quot;)</span>
my_model<span class="token operator">/</span>
├── MLmodel
├── model<span class="token punctuation">.</span>pkl
├── conda<span class="token punctuation">.</span>yaml
├── input_example<span class="token punctuation">.</span>json
├── python_env<span class="token punctuation">.</span>yaml
└── requirements<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 MLmodel 文件长这样</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">artifact_path</span><span class="token punctuation">:</span> model
<span class="token key atrule">flavors</span><span class="token punctuation">:</span>
  <span class="token key atrule">python_function</span><span class="token punctuation">:</span>
    <span class="token key atrule">env</span><span class="token punctuation">:</span>
      <span class="token key atrule">conda</span><span class="token punctuation">:</span> conda.yaml
      <span class="token key atrule">virtualenv</span><span class="token punctuation">:</span> python_env.yaml
    <span class="token key atrule">loader_module</span><span class="token punctuation">:</span> mlflow.sklearn
    <span class="token key atrule">model_path</span><span class="token punctuation">:</span> model.pkl
    <span class="token key atrule">predict_fn</span><span class="token punctuation">:</span> predict
    <span class="token key atrule">python_version</span><span class="token punctuation">:</span> 3.8.16
  <span class="token key atrule">sklearn</span><span class="token punctuation">:</span>
    <span class="token key atrule">code</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">pickled_model</span><span class="token punctuation">:</span> model.pkl
    <span class="token key atrule">serialization_format</span><span class="token punctuation">:</span> cloudpickle
    <span class="token key atrule">sklearn_version</span><span class="token punctuation">:</span> 0.23.2
<span class="token key atrule">mlflow_version</span><span class="token punctuation">:</span> 2.1.1
<span class="token key atrule">model_uuid</span><span class="token punctuation">:</span> 3a3c5f7183734848a7d80ad08baaab0c
<span class="token key atrule">run_id</span><span class="token punctuation">:</span> 47b2603aa0444991939200ac846d87cf
<span class="token key atrule">utc_time_created</span><span class="token punctuation">:</span> <span class="token string">&#39;2023-02-02 14:32:54.030002&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="记录模型输入输出" tabindex="-1"><a class="header-anchor" href="#记录模型输入输出" aria-hidden="true">#</a> 记录模型输入输出</h3><p>等级的 MLmodel 中可以同时记录模型的输入、输出等信息。</p><p>可以自动根据数据推导输入输出格式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mlflow<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signature <span class="token keyword">import</span> infer_signature

signature <span class="token operator">=</span> infer_signature<span class="token punctuation">(</span>testX<span class="token punctuation">,</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>testX<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以手动记录表格输入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mlflow<span class="token punctuation">.</span>models<span class="token punctuation">.</span>signature <span class="token keyword">import</span> ModelSignature
<span class="token keyword">from</span> mlflow<span class="token punctuation">.</span>types<span class="token punctuation">.</span>schema <span class="token keyword">import</span> Schema<span class="token punctuation">,</span> ColSpec

input_schema <span class="token operator">=</span> Schema<span class="token punctuation">(</span><span class="token punctuation">[</span>
  ColSpec<span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sepal length (cm)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  ColSpec<span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sepal width (cm)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  ColSpec<span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;petal length (cm)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  ColSpec<span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;petal width (cm)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
output_schema <span class="token operator">=</span> Schema<span class="token punctuation">(</span><span class="token punctuation">[</span>ColSpec<span class="token punctuation">(</span><span class="token string">&quot;long&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
signature <span class="token operator">=</span> ModelSignature<span class="token punctuation">(</span>inputs<span class="token operator">=</span>input_schema<span class="token punctuation">,</span> outputs<span class="token operator">=</span>output_schema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者 tensor 输入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mlflow<span class="token punctuation">.</span>types<span class="token punctuation">.</span>schema <span class="token keyword">import</span> Schema<span class="token punctuation">,</span> TensorSpec

input_schema <span class="token operator">=</span> Schema<span class="token punctuation">(</span><span class="token punctuation">[</span>
  TensorSpec<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dtype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
output_schema <span class="token operator">=</span> Schema<span class="token punctuation">(</span><span class="token punctuation">[</span>TensorSpec<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dtype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
signature <span class="token operator">=</span> ModelSignature<span class="token punctuation">(</span>inputs<span class="token operator">=</span>input_schema<span class="token punctuation">,</span> outputs<span class="token operator">=</span>output_schema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以直接记录 input_example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># each input has shape (4, 4)</span>
input_example <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>
   <span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span>  <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">253</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">93</span><span class="token punctuation">,</span>  <span class="token number">82</span><span class="token punctuation">,</span>  <span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span><span class="token punctuation">[</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">46</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span> <span class="token number">33</span><span class="token punctuation">,</span>  <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span> <span class="token number">76</span><span class="token punctuation">,</span>  <span class="token number">75</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span> <span class="token number">33</span><span class="token punctuation">,</span>  <span class="token number">44</span><span class="token punctuation">,</span>  <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">82</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
mlflow<span class="token punctuation">.</span>tensorflow<span class="token punctuation">.</span>log_model<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> input_example<span class="token operator">=</span>input_example<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型保存与加载" tabindex="-1"><a class="header-anchor" href="#模型保存与加载" aria-hidden="true">#</a> 模型保存与加载</h3><p>很多主流的 AI 框架都有自己的保存、加载模型方法。mlflow 仅是在这些主流 AI 的 API 上套一层，已实现用统一 MLflow API 保存和加载 AI 模型。</p><h4 id="上传模型" tabindex="-1"><a class="header-anchor" href="#上传模型" aria-hidden="true">#</a> 上传模型</h4><p>官方为主流框架提供了 <code>mlflow.sklearn</code>， <code>mlflow.torch</code> 等类，可以使用 <code>save_model</code> 保存到本地, <code>log_model</code> 保存到云端 artifact 服务器等 API，比如对于 onnx 模型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># convert model to ONNX and load it</span>
torch<span class="token punctuation">.</span>onnx<span class="token punctuation">.</span>export<span class="token punctuation">(</span>net<span class="token punctuation">,</span> X<span class="token punctuation">,</span> <span class="token string">&quot;model.onnx&quot;</span><span class="token punctuation">)</span>
onnx_model <span class="token operator">=</span> onnx<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">&quot;model.onnx&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># log the model into a mlflow run</span>
<span class="token keyword">with</span> mlflow<span class="token punctuation">.</span>start_run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    model_info <span class="token operator">=</span> mlflow<span class="token punctuation">.</span>onnx<span class="token punctuation">.</span>log_model<span class="token punctuation">(</span>onnx_model<span class="token punctuation">,</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># load the logged model and make a prediction</span>
onnx_pyfunc <span class="token operator">=</span> mlflow<span class="token punctuation">.</span>pyfunc<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>model_info<span class="token punctuation">.</span>model_uri<span class="token punctuation">)</span>

predictions <span class="token operator">=</span> onnx_pyfunc<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>predictions<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者对于 paddle 模型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mlflow<span class="token punctuation">.</span>paddle
<span class="token keyword">import</span> paddle

<span class="token keyword">class</span> <span class="token class-name">Regressor</span><span class="token punctuation">(</span>paddle<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@paddle<span class="token punctuation">.</span>jit<span class="token punctuation">.</span>to_static</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
    
<span class="token comment"># ... your training code here</span>

mlflow<span class="token punctuation">.</span>paddle<span class="token punctuation">.</span>log_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如以上 <code>mlflow.paddle.log_model</code> 中，包含了 <code>paddle.save()</code> 等方法。</p>`,23),O={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.models.html#mlflow.models.Model",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"mlflow.models.Model",-1),U={href:"https://www.mlflow.org/docs/latest/models.html#custom-python-models",target:"_blank",rel:"noopener noreferrer"},z=t(`<h4 id="模型推理" tabindex="-1"><a class="header-anchor" href="#模型推理" aria-hidden="true">#</a> 模型推理</h4><p>在 mlflow server 对应的 artifact model 中，可以查看到模型的 uri。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model_uri <span class="token operator">=</span> <span class="token string">&#39;runs:/a60a1cdd9c644e6bb6594e7ff911e0ea/model&#39;</span>

<span class="token comment"># 在已知 run id 情况下，可以通过 model_uri = mlflow.get_artifact_uri(&quot;model&quot;)</span>


pd_model <span class="token operator">=</span> mlflow<span class="token punctuation">.</span>paddle<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>model_uri<span class="token punctuation">)</span>
training_data<span class="token punctuation">,</span> test_data <span class="token operator">=</span> load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>
np_test_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&quot;float32&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pd_model<span class="token punctuation">(</span>np_test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mlflow.paddle.load_model</code> 中包含了 飞桨的官方加载模型方法：<code>paddle.load()</code></p><h3 id="模型部署" tabindex="-1"><a class="header-anchor" href="#模型部署" aria-hidden="true">#</a> 模型部署</h3>`,5),V={href:"https://www.mlflow.org/docs/latest/models.html#built-in-deployment-tools",target:"_blank",rel:"noopener noreferrer"},X=t(`<p><strong>本地部署</strong></p><p>可以直接通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>model models serve <span class="token parameter variable">-m</span> model_uri <span class="token parameter variable">-p</span> <span class="token number">8000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),F={href:"https://github.com/pyenv/pyenv",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"pyenv",-1),K=t(`<p><strong>创建 docker 镜像并部署</strong></p><p>该方案部署相对顺利，但是需要科学上网环境才能成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mlflow models build-docker <span class="token parameter variable">-m</span> <span class="token string">&quot;modeluri&quot;</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;image-name&quot;</span>

<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">5001</span>:8080 <span class="token string">&quot;my-image-name&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>部署到云服务</strong></p>`,4),W={href:"https://www.mlflow.org/docs/latest/models.html#built-in-deployment-tools",target:"_blank",rel:"noopener noreferrer"},Y=t(`<p><strong>模型调用</strong></p><p>使用 <code>curl -X POST -H &quot;Content-Type:application/json&quot; --data your_input</code>，其中，输入 <code>your_input</code> 的格式可以在上文提到的 <a href="#%E8%AE%B0%E5%BD%95%E6%A8%A1%E5%9E%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA">记录模型输入输出</a> 查看。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> <span class="token parameter variable">--data</span> <span class="token string">&#39;{
  &quot;inputs&quot;: [
    [
      1.7080316543579102,
      2.5316741466522217,
      1.6952152252197266,
      1.9768019914627075,
      1.7444103956222534,
      1.7886496782302856,
      1.963786244392395,
      1.849048137664795,
      1.9302328824996948,
      1.7990881204605103
    ]
  ]
}&#39;</span> http://127.0.0.1:8000/invocations
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span><span class="token string">&quot;predictions&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;0&quot;</span><span class="token builtin class-name">:</span> <span class="token number">566.980224609375</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mlflow-registry" tabindex="-1"><a class="header-anchor" href="#mlflow-registry" aria-hidden="true">#</a> MLflow Registry</h2>`,6),G={href:"https://www.mlflow.org/docs/latest/model-registry.html",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h3 id="注册模型" tabindex="-1"><a class="header-anchor" href="#注册模型" aria-hidden="true">#</a> 注册模型</h3><p>可以在 MLflow 的 web UI 上直接注册：</p><figure><img src="https://www.mlflow.org/docs/latest/_images/oss_registry_1_register.png" alt="相关图片" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>也可以在代码中注册：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># log 模型时提供 registerd_model_name 即可</span>
mlflow<span class="token punctuation">.</span>sklearn<span class="token punctuation">.</span>log_model<span class="token punctuation">(</span>
    sk_model<span class="token operator">=</span>sk_learn_rfr<span class="token punctuation">,</span>
    artifact_path<span class="token operator">=</span><span class="token string">&quot;sklearn-model&quot;</span><span class="token punctuation">,</span>
    registered_model_name<span class="token operator">=</span><span class="token string">&quot;sk-learn-random-forest-reg-model&quot;</span>
<span class="token punctuation">)</span> 

<span class="token comment"># 或者基于现有的模型 MODEL URI 注册</span>
result <span class="token operator">=</span> mlflow<span class="token punctuation">.</span>register_model<span class="token punctuation">(</span>
    <span class="token string">&quot;runs:/d16076a3ec534311817565e6527539c0/sklearn-model&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;sk-learn-random-forest-reg&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于注册的模型，可以设置 <code>Description</code>， <code>Tags</code> ， <code>Stage</code> 等信息。</p><h3 id="使用注册的模型" tabindex="-1"><a class="header-anchor" href="#使用注册的模型" aria-hidden="true">#</a> 使用注册的模型</h3><p>在上一节中，我们使用 MODEL_URI (Run_id) 来索引模型，对于已经注册了的模型，可以使用以下字符代替：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model_uri<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;models:/</span><span class="token interpolation"><span class="token punctuation">{</span>model_name<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>model_version<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>

model_uri <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;models:/</span><span class="token interpolation"><span class="token punctuation">{</span>model_name<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>stage<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他功能" tabindex="-1"><a class="header-anchor" href="#其他功能" aria-hidden="true">#</a> 其他功能</h2><p>有一部分 Data Bricks MLflow 的功能在开源版中没有.</p>`,11);function Z(J,$){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[n("a",r,[s("MLflow 官方"),e(a)])]),d,n("p",null,[s("提供可视化模型训练记录，包括超参配置、训练指标、模型权重、模型输出文件等 artifact。数据会被记录在 MLflow 云服务器上。"),n("a",k,[s("MLTracking Document"),e(a)])]),m,n("p",null,[s("如上，"),v,s("。所有文件将被储存在运行 mlflow 的服务器上。自定义存储配置查看"),n("a",b,[s("官网指南"),e(a)]),s("。如配置 Azure Blob Storage 时，需要在服务端和客户端 "),h,s(" 链接用的账户与密码到环境变量中。")]),g,_,f,n("p",null,[s("参考 "),n("a",y,[s("MLflow 文档"),e(a)]),s(" 不同的 URI 支持不同的功能与储存效果。"),w,s(" 查看当前 URI。"),n("a",q,[x,e(a)]),s(" 配置新的 URI。")]),M,n("p",null,[L,s(" ， "),n("a",j,[S,e(a)]),s(" 可以和 "),n("a",E,[A,e(a)]),s(" 结合，来实现 pipeline。 "),n("a",I,[R,e(a)]),s(" 每次运行后，使用 "),T,s(" 接受本次 run 的结果。而后根据结果来判断下一个 run 什么。")]),P,n("p",null,[s("使用 "),C,s(" 可以将模型记录在 mlflow 服务器中，如对于 sklearn 的模型，可以使用 "),n("a",N,[s("mlflow.sklearn.log_model"),e(a)])]),D,n("p",null,[s("此外可以使用 "),n("a",O,[B,e(a)]),s(" 来自定义 MLflow 模型的创建和储存。或者参考 "),n("a",U,[s("custom python models"),e(a)])]),z,n("p",null,[n("a",V,[s("官方文档链接"),e(a)])]),X,n("p",null,[s("在本地部署 rest_api，需要使用 "),n("a",F,[H,e(a)]),s("，笔者部署过程中还是遇到很多环境依赖问题，如本地设备缺少 bz2 依赖等问题。")]),K,n("p",null,[s("MLflow 可以部署到 Azure ML Studio，Apache Spark UDF 等。具体参考 "),n("a",W,[s("官方文档链接"),e(a)])]),Y,n("p",null,[s("如果说 MLflow Model 能让我们将开发过程中的模型权重、配置等储存起来。那么 MLflow Registry 则让我们对筛选出来的、要落地的模型进行标注和管理。"),n("a",G,[s("官网文档"),e(a)])]),Q])}const sn=p(i,[["render",Z],["__file","笔记mlflow.html.vue"]]);export{sn as default};
