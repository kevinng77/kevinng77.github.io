import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as r,a as s,b as n,d as l,f as e}from"./app-465f02d8.js";const c="/assets/img/airflow/image-20230121131633924.png",i={},d={href:"https://airflow.apache.org/",target:"_blank",rel:"noopener noreferrer"},y=e(`<h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>官网指定通过 python 安装。<code>pip install aparch-airflow</code></p><p>安装后启动各个组件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">airflow db init</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">airflow users create \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">username kevin \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">firstname kevin \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">lastname ng \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">role Admin \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">email </span><span style="color:#005CC5;">417333277</span><span style="color:#D73A49;">@</span><span style="color:#24292E;">qq.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">airflow webserver </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">port </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">airflow scheduler </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">D</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 airflow 启动和停止文件 <code>vim af.sh</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#E36209;">$1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#032F62;">&quot;=== start airflow ===&quot;</span></span>
<span class="line"><span style="color:#24292E;">    nohup airflow webserver -p 8080 &gt; airflow_server.log &amp;</span></span>
<span class="line"><span style="color:#24292E;">    nohup airflow scheduler -D &gt; airflow_scheduler.log &amp;</span></span>
<span class="line"><span style="color:#24292E;">};;</span></span>
<span class="line"><span style="color:#032F62;">&quot;stop&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#032F62;">&quot;=== stop airflow ===&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ps -ef | egrep </span><span style="color:#032F62;">&#39;scheduler|airflow|webserver&#39;</span><span style="color:#24292E;"> | awk </span><span style="color:#032F62;">&#39;{print $2}&#39;</span><span style="color:#24292E;">| xargs kill -15</span></span>
<span class="line"><span style="color:#24292E;">};;</span></span>
<span class="line"><span style="color:#24292E;">esac</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为脚本文件添加执行权限：<code>chmod +x af.sh</code>。之后可以是用 <code>af.sh start</code> 或 <code>af.sh stop</code> 启动停止服务。</p><h3 id="配置-airflow" tabindex="-1"><a class="header-anchor" href="#配置-airflow" aria-hidden="true">#</a> 配置 airflow</h3><p>通过默认方式启动 airflow，登录后发现两个官方提示：</p><p>根据提示修改数据库：</p>`,11),u=s("strong",null,"SQLite",-1),v={href:"https://airflow.apache.org/docs/apache-airflow/2.5.1/howto/set-up-database.html",target:"_blank",rel:"noopener noreferrer"},m=s("strong",null,"Click here",-1),h=s("p",null,"根据提示修改执行器",-1),b=s("strong",null,"SequentialExecutor",-1),E={href:"https://airflow.apache.org/docs/apache-airflow/2.5.1/executor/index.html",target:"_blank",rel:"noopener noreferrer"},_=s("strong",null,"Click here",-1),f=e(`<h3 id="体验调度应用" tabindex="-1"><a class="header-anchor" href="#体验调度应用" aria-hidden="true">#</a> 体验调度应用</h3><p>在 <code>airflow/airflow.cfg</code> 文件中可以查看到配置项目，编写 test.py 并放置于 <code>~/airflow/dags</code> 文件夹下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> datetime </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> datetime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DAG</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.decorators </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> task</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.operators.bash </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BashOperator</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># A DAG represents a workflow, a collection of tasks</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> DAG(</span><span style="color:#E36209;">dag_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kevin_demo&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">start_date</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">datetime(</span><span style="color:#005CC5;">2022</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#E36209;">schedule</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;0 0 * * *&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> dag:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Tasks are represented as operators</span></span>
<span class="line"><span style="color:#24292E;">    hello </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BashOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kevin_learn&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">bash_command</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;echo hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">airflow</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;kevin airflow&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Set dependencies between tasks</span></span>
<span class="line"><span style="color:#24292E;">    hello </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> airflow()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写后在 airflow web 端可以看到更新后的 任务。</p><figure><img src="`+c+`" alt="image-20230121131633924" tabindex="0" loading="lazy"><figcaption>image-20230121131633924</figcaption></figure><p>在 Graph 中查看具体每个环节的属性：instance details，可以看到每个环节的日志报告。</p><h3 id="删除-dags-任务" tabindex="-1"><a class="header-anchor" href="#删除-dags-任务" aria-hidden="true">#</a> 删除 dags 任务</h3><p>在页面中点击删除按钮，删除相关日志文件。而后删除对应的 python 文件。</p><h3 id="配置邮箱服务器" tabindex="-1"><a class="header-anchor" href="#配置邮箱服务器" aria-hidden="true">#</a> 配置邮箱服务器</h3><p>确保 SMTP 功能开启，可通过 SMTP 发送邮件。</p><p>在 airflow.cfg 中配置发件箱信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">smtp_host</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bbb.qiye.163.com</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_starttls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">False</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_ssl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">True</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_user</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xx@airflowdemo.com</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_password</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AOYDOJJRDGXUKDOM</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_port</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">465</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_mail_from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xx@airflowdemo.com</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_timeout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#6F42C1;">smtp_retry_limit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="airflow-其他教程笔记" tabindex="-1"><a class="header-anchor" href="#airflow-其他教程笔记" aria-hidden="true">#</a> AIRFLOW 其他教程笔记</h2>`,13),g={href:"https://airflow.apache.org/docs/apache-airflow/stable/tutorial/fundamentals.html",target:"_blank",rel:"noopener noreferrer"},D=e(`<h3 id="初始化-dag-实例" tabindex="-1"><a class="header-anchor" href="#初始化-dag-实例" aria-hidden="true">#</a> 初始化 DAG 实例</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;">default_args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;depends_on_past&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;airflow@example.com&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;email_on_failure&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;email_on_retry&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;retries&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;retry_delay&quot;</span><span style="color:#24292E;">: timedelta(</span><span style="color:#E36209;">minutes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;queue&#39;: &#39;bash_queue&#39;,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;pool&#39;: &#39;backfill&#39;,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;priority_weight&#39;: 10,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;end_date&#39;: datetime(2016, 1, 1),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;wait_for_downstream&#39;: False,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;sla&#39;: timedelta(hours=2),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;execution_timeout&#39;: timedelta(seconds=300),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;on_failure_callback&#39;: some_function,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;on_success_callback&#39;: some_other_function,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;on_retry_callback&#39;: another_function,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;sla_miss_callback&#39;: yet_another_function,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># &#39;trigger_rule&#39;: &#39;all_success&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> DAG(</span><span style="color:#E36209;">dag_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;your_dag_name&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;A simple tutorial DAG&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">default_args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">default_args,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">start_date</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">datetime(</span><span style="color:#005CC5;">2022</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">schedule</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">timedelta(</span><span style="color:#E36209;">days</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">catchup</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">tags</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;example&quot;</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> dag:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用以下方式初始化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.decorators </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dag, task</span></span>
<span class="line"><span style="color:#6F42C1;">@dag</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">schedule</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;@daily&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">start_date</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pendulum.datetime(</span><span style="color:#005CC5;">2021</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">tz</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UTC&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">catchup</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">tags</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;example&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tutorial_taskflow_api</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># define your task</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#6A737D;"># 调用</span></span>
<span class="line"><span style="color:#24292E;">tutorial_taskflow_api()</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数解析" tabindex="-1"><a class="header-anchor" href="#参数解析" aria-hidden="true">#</a> 参数解析</h4>`,5),A=s("code",null,"Schedule",-1),k=s("code",null,"schedule",-1),F={href:"https://en.wikipedia.org/wiki/Cron",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"schedule",-1),C={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dag-run.html",target:"_blank",rel:"noopener noreferrer"},x=s("li",null,[s("p",null,[s("code",null,"catchup"),n("：首次提交 dag 时，会从设置的 start_date 补齐到现在，如果 catchup=False，则只会执行最新的一次任务")])],-1),w=s("h3",{id:"任务",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#任务","aria-hidden":"true"},"#"),n(" 任务")],-1),O={href:"https://airflow.apache.org/docs/apache-airflow/stable/tutorial/taskflow.html",target:"_blank",rel:"noopener noreferrer"},G=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extract</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    #### Extract task</span></span>
<span class="line"><span style="color:#032F62;">    A simple Extract task to get data ready for the rest of the data</span></span>
<span class="line"><span style="color:#032F62;">    pipeline. In this case, getting data is simulated by reading from a</span></span>
<span class="line"><span style="color:#032F62;">    hardcoded JSON string.</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    data_string </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;{&quot;1001&quot;: 301.27, &quot;1002&quot;: 433.21, &quot;1003&quot;: 502.22}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    order_data_dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.loads(data_string)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> order_data_dict</span></span>
<span class="line"><span style="color:#6F42C1;">@task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(order_data):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 调用</span></span>
<span class="line"><span style="color:#24292E;">order_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> extract()</span></span>
<span class="line"><span style="color:#24292E;">order_summary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transform(order_data)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过参数传递的方式调用 task python 函数的话，对应的依赖关系会被记录。如上边的 DAGS 图应该为 extract -&gt; transform。</p><p>该特性仅在 airflow 2.0 有。在 airflow1.0 中，还需定义 <code>PythonOperator</code> 等。</p><p>被 <code>@task</code> 修饰的函数能通过 <code>fun.override()</code> 改变标签属性等，如 <code>task_id</code>, <code>priority_weight</code> 等。</p><h4 id="任务注释" tabindex="-1"><a class="header-anchor" href="#任务注释" aria-hidden="true">#</a> 任务注释</h4><p><strong>任务 Task 注解</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">t1.doc_md </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dedent(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">#### Task Documentation</span></span>
<span class="line"><span style="color:#032F62;">You can document your task using the attributes \`doc_md\` (markdown),</span></span>
<span class="line"><span style="color:#032F62;">\`doc\` (plain text), \`doc_rst\`, \`doc_json\`, \`doc_yaml\` which gets</span></span>
<span class="line"><span style="color:#032F62;">rendered in the UI&#39;s Task Instance Details page.</span></span>
<span class="line"><span style="color:#032F62;">![img](http://montcs.bloomu.edu/~bobmon/Semesters/2012-01/491/import</span><span style="color:#005CC5;">%20s</span><span style="color:#032F62;">oul.png)</span></span>
<span class="line"><span style="color:#032F62;"> **Image Credit:**  Randall Munroe, [XKCD](https://xkcd.com/license.html)</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dag.doc_md </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__doc__</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># providing that you have a docstring at the beginning of the DAG; OR</span></span>
<span class="line"><span style="color:#24292E;">dag.doc_md </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    This is a documentation placed anywhere</span></span>
<span class="line"><span style="color:#032F62;">    &lt;div style=&quot;margin: 100px 100px&quot;&gt; Hello Hello&lt;div&gt;&quot;&quot;&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># otherwise, type it like this</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给任务写一个对应的文档说明。文档说明支持 md 和 http 格式。</p><p>DAG 的说明文档在 dag 首页顶部可以查看，而 task 文档则需要在 task Instance Details 文档中查看，如上实例中的 <code>t1</code>。</p><p><strong>边的关系注释</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.utils.edgemodifier </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Label</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">my_task </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> Label(</span><span style="color:#032F62;">&quot;When empty&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> other_task</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="任务依赖关系" tabindex="-1"><a class="header-anchor" href="#任务依赖关系" aria-hidden="true">#</a> 任务依赖关系</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">t1.set_downstream(t2)</span></span>
<span class="line"><span style="color:#6A737D;"># 等价于下面：</span></span>
<span class="line"><span style="color:#24292E;">t2.set_upstream(t1)</span></span>
<span class="line"><span style="color:#6A737D;"># 当然也可以使用</span></span>
<span class="line"><span style="color:#24292E;">t1 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> t2</span></span>
<span class="line"><span style="color:#24292E;">t2 </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> t1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># all have the same effect:</span></span>
<span class="line"><span style="color:#24292E;">t1.set_downstream([t2, t3])</span></span>
<span class="line"><span style="color:#24292E;">t1 </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> [t2, t3]</span></span>
<span class="line"><span style="color:#24292E;">[t2, t3] </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> t1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以使用 <code>chain</code> 来动态地定义任务流：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.models.baseoperator </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> chain</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Replaces op1 &gt;&gt; op2 &gt;&gt; op3 &gt;&gt; op4</span></span>
<span class="line"><span style="color:#24292E;">chain(op1, op2, op3, op4)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># You can also do it dynamically</span></span>
<span class="line"><span style="color:#24292E;">chain(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">[EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;op&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Replaces</span></span>
<span class="line"><span style="color:#6A737D;"># op1 &gt;&gt; op2 &gt;&gt; op4 &gt;&gt; op6</span></span>
<span class="line"><span style="color:#6A737D;"># op1 &gt;&gt; op3 &gt;&gt; op5 &gt;&gt; op6</span></span>
<span class="line"><span style="color:#24292E;">chain(op1, [op2, op3], [op4, op5], op6)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以同态的设置 DAGS：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> DAG(</span><span style="color:#032F62;">&quot;loop_example&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> dag:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;first&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;last&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;branch_a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;branch_b&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;branch_c&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;branch_d&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> option </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> options:</span></span>
<span class="line"><span style="color:#24292E;">        t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">option)</span></span>
<span class="line"><span style="color:#24292E;">        first </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> last</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="任务流控制" tabindex="-1"><a class="header-anchor" href="#任务流控制" aria-hidden="true">#</a> 任务流控制</h4><h5 id="branching" tabindex="-1"><a class="header-anchor" href="#branching" aria-hidden="true">#</a> branching</h5><p>根据条件，选择执行哪条分支。可以使用一个 python 函数 进行判断，返回结果为需要执行的分支 ID。</p><img src="https://airflow.apache.org/docs/apache-airflow/stable/_images/branch_note.png"><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@task.branch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;branch_task&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">branch_func</span><span style="color:#24292E;">(ti):</span></span>
<span class="line"><span style="color:#24292E;">    xcom_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(ti.xcom_pull(</span><span style="color:#E36209;">task_ids</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;start_task&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> xcom_value </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;continue_task&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> xcom_value </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;stop_task&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">start_op </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BashOperator(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;start_task&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">bash_command</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;echo 5&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">xcom_push</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">dag</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dag,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">branch_op </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> branch_func()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">continue_op </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;continue_task&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dag</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dag)</span></span>
<span class="line"><span style="color:#24292E;">stop_op </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;stop_task&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dag</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dag)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">start_op </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> branch_op </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> [continue_op, stop_op]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以自定义 <code>operator</code> ，但是需要继承 <code>BaseBranchOperator</code> 类：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyBranchOperator</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">BaseBranchOperator</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">choose_branch</span><span style="color:#24292E;">(self, context):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        Run an extra branch on the first day of the month</span></span>
<span class="line"><span style="color:#032F62;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> context[</span><span style="color:#032F62;">&#39;data_interval_start&#39;</span><span style="color:#24292E;">].day </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;daily_task_id&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;monthly_task_id&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> context[</span><span style="color:#032F62;">&#39;data_interval_start&#39;</span><span style="color:#24292E;">].day </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;daily_task_id&#39;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="latest-only" tabindex="-1"><a class="header-anchor" href="#latest-only" aria-hidden="true">#</a> Latest Only</h5><p>类似于 <code>catchup</code> 参数，<code>LatestOnlyOperator</code> 不会补全遗漏的历史任务。</p>`,26),B={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#latest-only",target:"_blank",rel:"noopener noreferrer"},T=s("h5",{id:"depends-on-past",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#depends-on-past","aria-hidden":"true"},"#"),n(" Depends on Past")],-1),S=s("p",null,[n("仅有在前一个任务运行成功的情况下才运行，可以设置 task 的参数 "),s("code",null,"depends_on_past=True"),n("， 来开启。")],-1),j=s("h5",{id:"trigger-rules",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#trigger-rules","aria-hidden":"true"},"#"),n(" Trigger Rules")],-1),N=s("code",null,"all_success",-1),R=s("code",null,"Branching",-1),P={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#trigger-rules",target:"_blank",rel:"noopener noreferrer"},I=e(`<ul><li><code>all_success</code> (default): All upstream tasks have succeeded</li><li><code>all_failed</code>: All upstream tasks are in a <code>failed</code> or <code>upstream_failed</code> state</li><li><code>all_done</code>: All upstream tasks are done with their execution</li><li><code>all_skipped</code>: All upstream tasks are in a <code>skipped</code> state</li><li><code>one_failed</code>: At least one upstream task has failed (does not wait for all upstream tasks to be done)</li><li><code>one_success</code>: At least one upstream task has succeeded (does not wait for all upstream tasks to be done)</li><li><code>one_done</code>: At least one upstream task succeeded or failed</li><li><code>none_failed</code>: All upstream tasks have not <code>failed</code> or <code>upstream_failed</code> - that is, all upstream tasks have succeeded or been skipped</li><li><code>none_failed_min_one_success</code>: All upstream tasks have not <code>failed</code> or <code>upstream_failed</code>, and at least one upstream task has succeeded.</li><li><code>none_skipped</code>: No upstream task is in a <code>skipped</code> state - that is, all upstream tasks are in a <code>success</code>, <code>failed</code>, or <code>upstream_failed</code> state</li><li><code>always</code>: No dependencies at all, run this task at any time</li></ul><h4 id="任务组" tabindex="-1"><a class="header-anchor" href="#任务组" aria-hidden="true">#</a> 任务组</h4><p>使用 <code>TaskGroup</code> ，基于当前的 DAG 配置进行任务分组</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.decorators </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> task_group</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@task_group</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">group1</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    task1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;task1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    task2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;task2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">task3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EmptyOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;task3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">group1() </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> task3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 subDAG 进行分组，使用新的 DAG 配置。</p><h3 id="虚拟环境" tabindex="-1"><a class="header-anchor" href="#虚拟环境" aria-hidden="true">#</a> 虚拟环境</h3><p>创建动态的虚拟环境， DAGS 会在执行过程中动态安装虚拟环境。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">hello </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BashOperator(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">bash_command</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;echo hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@task.virtualenv</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;virtualenv_python&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">requirements</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;numpy==1.20&quot;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">system_site_packages</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">new_np</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(np.</span><span style="color:#005CC5;">__version__</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@task</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extract</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> np.</span><span style="color:#005CC5;">__version__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">airflow</span><span style="color:#24292E;">(text):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> numpy </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> np</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;np version after virtual task&quot;</span><span style="color:#24292E;">,np.</span><span style="color:#005CC5;">__version__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(text)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Set dependencies between tasks</span></span>
<span class="line"><span style="color:#24292E;">    hello </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> new_np() </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> airflow(extract()) </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如以上示例代码，在该 python 环境中，默认的 numpy 版本为 <code>1.21.6</code>，<code>new_np()</code> 打印 <code>1.20.x</code>，<code>airflow()</code> 中打印的内容为 <code>1.21.6</code>。因此 task 之间的虚拟环境是相互不受影响的。</p><p>以上方式会在线安装环境，可以考虑使用本地已有的 python 环境：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@task.external_python</span><span style="color:#24292E;">(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;external_python&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">python</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">PATH_TO_PYTHON_BINARY</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callable_external_python</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 docker 运行：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@task.docker</span><span style="color:#24292E;">(</span><span style="color:#E36209;">image</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;python:3.9-slim-bullseye&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">multiple_outputs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(order_data_dict: </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    #### Transform task</span></span>
<span class="line"><span style="color:#032F62;">    A simple Transform task which takes in the collection of order data and</span></span>
<span class="line"><span style="color:#032F62;">    computes the total order value.</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    total_order_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> order_data_dict.values():</span></span>
<span class="line"><span style="color:#24292E;">        total_order_value </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;total_order_value&quot;</span><span style="color:#24292E;">: total_order_value}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以使用 k8s 集群，具体查看官网。</p><h3 id="sensor-数据流" tabindex="-1"><a class="header-anchor" href="#sensor-数据流" aria-hidden="true">#</a> sensor 数据流</h3><p>可以使用 <code>sensorOperator</code> 控制数据流。如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Using a sensor operator to wait for the upstream data to be ready.</span></span>
<span class="line"><span style="color:#6F42C1;">@task.sensor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">poke_interval</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, </span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3600</span><span style="color:#24292E;">, </span><span style="color:#E36209;">mode</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;reschedule&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wait_for_upstream</span><span style="color:#24292E;">() -&gt; PokeReturnValue:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> PokeReturnValue(</span><span style="color:#E36209;">is_done</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">xcom_value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xcom_value&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@task</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dummy_operator</span><span style="color:#24292E;">() -&gt; </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"><span style="color:#24292E;">wait_for_upstream() </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> dummy_operator()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者当我们需要从某个路径导入文件时，可以设置文件等待：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extract_from_file</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    #### Extract from file task</span></span>
<span class="line"><span style="color:#032F62;">    A simple Extract task to get data ready for the rest of the data</span></span>
<span class="line"><span style="color:#032F62;">    pipeline, by reading the data from a file into a pandas dataframe</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    order_data_file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/tmp/order_data.csv&quot;</span></span>
<span class="line"><span style="color:#24292E;">    order_data_df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.read_csv(order_data_file)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">file_task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileSensor(</span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;check_file&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">filepath</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/tmp/order_data.csv&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">order_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> extract_from_file()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">file_task </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> order_data</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jinja-模板" tabindex="-1"><a class="header-anchor" href="#jinja-模板" aria-hidden="true">#</a> Jinja 模板</h3>`,20),L={href:"https://jinja.palletsprojects.com/en/2.11.x/",target:"_blank",rel:"noopener noreferrer"},M=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">templated_command </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dedent(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">{% for i in range(5) %}</span></span>
<span class="line"><span style="color:#032F62;">    echo &quot;{{ ds }}&quot;</span></span>
<span class="line"><span style="color:#032F62;">    echo &quot;{{ macros.ds_add(ds, 7)}}&quot;</span></span>
<span class="line"><span style="color:#032F62;">{% endfor %}</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">t3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BashOperator(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;templated&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">depends_on_past</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">bash_command</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">templated_command,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>airflow 支持通过 jinja 模板来传递 bash 操作。</p><h3 id="文件架构" tabindex="-1"><a class="header-anchor" href="#文件架构" aria-hidden="true">#</a> 文件架构</h3>`,3),V={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#packaging-dags",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#airflowignore",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,"dag_folder",-1),H=s("h3",{id:"其他操作",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#其他操作","aria-hidden":"true"},"#"),n(" 其他操作")],-1),J=s("code",null,"httpOperator",-1),U=s("code",null,"sqsPublishOperator ",-1),W={href:"https://airflow.apache.org/docs/apache-airflow-providers-postgres/stable/operators/postgres_operator_howto_guide.html#creating-a-postgres-database-table",target:"_blank",rel:"noopener noreferrer"},K=e(`<h3 id="airflow-命令行操作" tabindex="-1"><a class="header-anchor" href="#airflow-命令行操作" aria-hidden="true">#</a> Airflow 命令行操作</h3><p>查看 DAG 代码是否有问题</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/airflow/dags/test.py</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试 DAGS 中的各个环节</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># command layout: command subcommand [dag_id] [task_id] [(optional) date]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># testing print_date</span></span>
<span class="line"><span style="color:#6F42C1;">airflow</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tasks</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tutorial</span><span style="color:#24292E;"> </span><span style="color:#032F62;">print_date</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2015</span><span style="color:#032F62;">-06-01</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># testing sleep</span></span>
<span class="line"><span style="color:#6F42C1;">airflow</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tasks</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tutorial</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2015</span><span style="color:#032F62;">-06-01</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他参考链接" tabindex="-1"><a class="header-anchor" href="#其他参考链接" aria-hidden="true">#</a> 其他参考链接</h2>`,6),Q={href:"https://zhuanlan.zhihu.com/p/336458279",target:"_blank",rel:"noopener noreferrer"},X={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#concepts-trigger-rules",target:"_blank",rel:"noopener noreferrer"},$={href:"https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html",target:"_blank",rel:"noopener noreferrer"};function Z(ss,ns){const a=p("ExternalLinkIcon");return t(),r("div",null,[s("p",null,[s("a",d,[n("官网"),l(a)])]),y,s("p",null,[n("Do not use "),u,n(" as metadata DB in production – it should only be used for dev/testing. We recommend using Postgres or MySQL. "),s("a",v,[m,n(),l(a)]),n(" for more information.")]),h,s("p",null,[n("Do not use "),b,n(" in production. "),s("a",E,[_,n(),l(a)]),n(" for more information.")]),f,s("p",null,[s("a",g,[n("官方文档"),l(a)])]),D,s("ul",null,[s("li",null,[s("p",null,[A,n(" ：其中 "),k,n(" 参数支持 "),s("a",F,[n("Crontab"),l(a)]),n(" 配置。更多关于 "),q,n(" 的信息，可以查看 "),s("a",C,[n("DAG Runs"),l(a)]),n("。")])]),x]),w,s("p",null,[s("a",O,[n("任务"),l(a)]),n(" task 任务定义方式：")]),G,s("p",null,[s("a",B,[n("参考链接"),l(a)])]),T,S,j,s("p",null,[n("基于前面任务运行失败或者成功，条件选择运行某个 task，默认为 "),N,n("，所有上游任务完成后，才能运行当前任务。。该功能与 "),R,n(" 一起使用时需要谨慎 "),s("a",P,[n("官网解释"),l(a)]),n("。")]),I,s("p",null,[s("a",L,[n("jinjia 文档"),l(a)])]),M,s("p",null,[s("a",V,[n("官网说明 - packaging DAGs"),l(a)])]),s("p",null,[s("a",Y,[n(".airflowignore"),l(a)]),n(" - 类似 gitignore 能够配置 "),z,n(" 下需要无视的文件。")]),H,s("p",null,[n("如 "),J,n(", "),U,n(", "),s("a",W,[n("PostgresOperator"),l(a)]),n("等")]),K,s("p",null,[s("a",Q,[n("知乎网友笔记"),l(a)])]),s("p",null,[s("a",X,[n("DAGS 官网笔记"),l(a)])]),s("p",null,[s("a",$,[n("airflow docker 部署"),l(a)])])])}const es=o(i,[["render",Z],["__file","笔记airflow.html.vue"]]);export{es as default};
