import{_ as p,P as t,U as e,Y as n,a1 as s,X as o,a0 as c,aQ as i,E as l}from"./framework-6cee4965.js";const u="/assets/img/信号/image-20210310153610191.png",r="/assets/img/信号/image-20210310152818968.png",k="/assets/img/信号/image-20210310152843120.png",d="/assets/img/信号/image-20210310155802080.png",m="/assets/img/信号/image-20210310160043387.png",v="/assets/img/信号/image-20210310161130759.png",b="/assets/img/信号/image-20210310164245947.png",g="/assets/img/信号/image-20210310164825710.png",f="/assets/img/信号/image-20210310165906997.png",h="/assets/img/信号/image-20210310170341866.png",y="/assets/img/信号/image-20210310170822503.png",_="/assets/img/TCPIP/image-20210314181037668.png",w="/assets/img/TCPIP/image-20210314182920082.png",x="/assets/img/TCPIP/image-20210314183220015.png",P="/assets/img/TCPIP/image-20210314193736665.png",I="/assets/img/TCPIP/image-20210314200131091.png",q={},T=n("p",null,"嵌入式自学开始几个月啦？",-1),D=n("p",null,"断断续续的忙碌，但总能提醒自己在忙也要做自己想做的。",-1),C=n("p",null,"为了自己的贾维斯",-1),N={href:"https://www.bilibili.com/video/BV1FA411v7YW?p=530&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},A=i('<h2 id="分组交换" tabindex="-1"><a class="header-anchor" href="#分组交换" aria-hidden="true">#</a> 分组交换</h2><figure><img src="'+u+'" alt="image-20210310153610191" tabindex="0" loading="lazy"><figcaption>image-20210310153610191</figcaption></figure><p>首部包含计数器，发送方等。 接受者通过将某一个发送方的数据包通过计数器排列后得到报文。</p><p><strong>交换方式—存储转发</strong> 节点收到分组，先暂时存储下来，再检查其首部，按照首部中的目的地址，找到合适的节点转发出去</p><p><strong>特点：</strong><br> 1、以分组作为传输单位 2、独立的选择转发路由 3、逐段占用，动态分配传输带宽</p><h2 id="tcp-ip-协议族" tabindex="-1"><a class="header-anchor" href="#tcp-ip-协议族" aria-hidden="true">#</a> TCP/IP 协议族</h2><p>为了能够实现不同类型的计算机和不同类型的操作系统之间进行通信，引入了分层的概念</p><p>最早的分层体系结构是 OSI 开放系统互联模型，是由国际化标准组织（ISO）指定的，由于 OSI 过于复杂，所以到现在为止也没有适用，而使用的是 TCP/IP 协议族 OSI 一共分为 7 层，TCP/IP 协议族一共四层，虽然 TCP/IP 协议族层次少，但是却干了 OSI7 层所有任务</p><figure><img src="'+r+'" alt="image-20210310152818968" tabindex="0" loading="lazy"><figcaption>image-20210310152818968</figcaption></figure><p><strong>应用层：</strong> 应用程序间沟通的层 例如：FTP、Telnet、HTTP 等</p><p><strong>传输层：</strong> 提供进程间的数据传送服务 负责传送数据，提供应用程序端到端的逻辑通信 例如：TCP、UDP</p><p><strong>网络层：</strong> 提供基本的数据封包传送功能 最大可能的让每个数据包都能够到达目的主机 例如：IP、ICMP 等</p><p><strong>链路层：</strong> 负责数据帧的发送和接收</p><figure><img src="'+k+'" alt="image-20210310152843120" tabindex="0" loading="lazy"><figcaption>image-20210310152843120</figcaption></figure><h3 id="ip-协议-网际协议" tabindex="-1"><a class="header-anchor" href="#ip-协议-网际协议" aria-hidden="true">#</a> IP 协议/网际协议</h3><p>特指为实现在一个相互连接的网络系统上从源地址到目的地传输数据包（互联网数据包）所提供必要功能的协议</p><p><strong>特点：</strong> 不可靠：</p><ul><li>不能保证 IP 数据包能成功地到达它的目的地，仅 <strong>提供尽力而为的传输服务</strong></li></ul><p>无连接：</p><ul><li>IP 并不维护任何关于后续数据包的状态信息。每个数据包的处理是相互独立的。</li><li>IP 数据包可以不按发送顺序接收</li></ul><p><strong>IP 数据包中含有发送它主机的 IP 地址（源地址）和接收它主机的 IP 地址（目的地址）</strong></p><h3 id="tcp-传输控制协议" tabindex="-1"><a class="header-anchor" href="#tcp-传输控制协议" aria-hidden="true">#</a> TCP - 传输控制协议</h3><p>TCP 是一种面向连接的,可靠的传输层通信协议</p><p><strong>功能：</strong> 提供不同主机上的进程间通信</p><p><strong>特点</strong> 1、建立链接-&gt;使用链接-&gt;释放链接（虚电路） 2、TCP 数据包中包含序号和确认序号 <strong>（保证数据可靠）</strong> 3、对包进行排序并检错，而损坏的包可以被重传</p><p><strong>服务对象</strong> 需要高度可靠性且面向连接的服务,如 HTTP、FTP、SMTP 等</p><h3 id="udp-协议-用户数据报协议" tabindex="-1"><a class="header-anchor" href="#udp-协议-用户数据报协议" aria-hidden="true">#</a> UDP 协议 - 用户数据报协议</h3><p>UDP 是一种面向无连接的传输层通信协议</p><p><strong>功能：</strong> 提供不同主机上的进程间通信</p><p><strong>特点</strong> 1、发送数据之前不需要建立链接 2、不对数据包的顺序进行检查 3、没有错误检测和重传机制</p><p><strong>服务对象</strong> 主要用于“查询—应答”的服务</p><p>如：NFS、NTP、DNS 等 微信语音，视频通话等，传输速度快，卡了就卡了。不会像 TCP 一样一直传输失败内容</p><h2 id="mac" tabindex="-1"><a class="header-anchor" href="#mac" aria-hidden="true">#</a> MAC</h2><p>网卡 - 网络接口卡 NIC</p><h3 id="mac-地址" tabindex="-1"><a class="header-anchor" href="#mac-地址" aria-hidden="true">#</a> MAC 地址</h3><p>每一个网卡在出厂时，都会给分配一个编号，这个编号就称之为 mac 地址 MAC 地址,用于标识网络设备,类似于身份证号，且理论上全球唯一</p><p><strong>组成：</strong> 以太网内的 MAC 地址是一个 48bit 的值，通常人为识别时是通过 16 进制数来识别的，以两个十六进制数为一组，一共分为 6 组，每组之间通过:隔开，前三组称之为厂商 ID，后三组称之为设备 ID</p><p>如何查询 ubuntu 的 mac 地址：<code>ifconfig</code></p><p>如何查询 windows 的 mac 地址</p><p>​ 鼠标右键点击计算机右下角电脑图标，选择网络和共享中心，左边选择更改适配器设置，找 到自己联网的图标，双击打开，点击详细信息，即可找到对应的 mac 地址</p><figure><img src="'+d+'" alt="image-20210310155802080" tabindex="0" loading="lazy"><figcaption>image-20210310155802080</figcaption></figure><h3 id="ip-地址" tabindex="-1"><a class="header-anchor" href="#ip-地址" aria-hidden="true">#</a> IP 地址</h3><p><strong>IP 地址的分类</strong> ipv4，占 32 位 （目前主要用到） ipv6，占 128 位 <strong>IPV4 地址的组成</strong> ipv4 一般使用点分十进制字符串来标识，比如 192.168.3.103</p><p>使用 32bit,由{网络 ID，主机 ID}两部分组成 子网 ID:IP 地址中由子网掩码中 1 覆盖的连续位 主机 ID:IP 地址中由子网掩码中 0 覆盖的连续位</p><figure><img src="'+m+'" alt="image-20210310160043387" tabindex="0" loading="lazy"><figcaption>image-20210310160043387</figcaption></figure><p><strong>ip 地址特点</strong> 子网 ID 不同的网络不能直接通信，如果要通信则需要路由器转发 主机 ID 全为 0 的 IP 地址表示网段地址 主机 ID 全为 1 的 IP 地址表示该网段的广播地址 例如： 192.168.3.10 和 192.168.3.111 可以直接通信 如果 192.168.3.x 网段而言，192.168.3.0 表示网段，192.168.3.255 表示广播地址</p><p><strong>ipv4 地址的分类（依据前八位来进行区分）</strong> A 类地址：默认 8bit 子网 ID,第一位为 0，前八位 00000000 - 01111111,范围 0.x.x.x - 127.x.x.x B 类地址：默认 16bit 子网 ID,前两位为 10，前八位 10000000 - 10111111,范围 128.x.x.x-191.x.x.x C 类地址：默认 24bit 子网 ID,前三位为 110,前八位 11000000 - 11011111,范围 192.x.x.x-223.x.x.x D 类地址：前四位为 1110,组播地址，前八位 11100000-11101111，范围 224.x.x.x- 239.x.x.x E 类地址: 前五位为 11110,保留为今后使用，前八位 11110000-11111111，范围 240.x.x.x-255.x.x.x A,B,C 三类地址是最常用的</p><p><strong>私有 ip 地址</strong> 公有 IP（可直接连接 Internet） 经由 InterNIC 所统一规划的 IP 私有 IP（不可直接连接 Internet ） 主要用于局域网络内的主机联机规划</p><figure><img src="'+v+'" alt="image-20210310161130759" tabindex="0" loading="lazy"><figcaption>image-20210310161130759</figcaption></figure><p><strong>回环 ip 地址</strong> 通常 127.0.0.1 称为回环地址 <strong>功能</strong> 主要是测试本机的网络配置，能 ping 通 127.0.0.1 说 明本机的网卡和 IP 协议安装都没有问题 <strong>注意</strong> 127.0.0.1~127.255.255.254 中的任何地址都将回环到本地主机中 不属于任何一个有类别地址类,它代表设备的本地虚拟接口</p><p><strong>查询 ip 一直的命令</strong> 在 ubuntu 中 <code>ifconfig</code></p><p>lo - 本地回环</p><figure><img src="'+b+'" alt="image-20210310164245947" tabindex="0" loading="lazy"><figcaption>image-20210310164245947</figcaption></figure><p>在 windows 中 <code>ipconfig</code></p><p><strong>如何判断主机是否可以连通通信</strong><code>ping ip 地址</code></p><p>如果现实 0% packet loss，就表示可以正常通信</p><h3 id="子网掩码-subnet-mask" tabindex="-1"><a class="header-anchor" href="#子网掩码-subnet-mask" aria-hidden="true">#</a> 子网掩码 subnet mask</h3><p>子网掩码（subnet mask）又叫网络掩码、地址掩码是一个 32bit 由 1 和 0 组成的数值，并且 1 和 0 分别连续</p><p><strong>作用</strong> 指明 IP 地址中哪些位标识的是主机所在的子网以及哪些位标识的是主机号 <strong>特点</strong> 必须结合 IP 地址一起使用，不能单独存在</p><p>IP 地址中由子网掩码中 1 覆盖的连续位为子网 ID,其余为主机 ID</p><p><strong>子网掩码的表现形式</strong> 192.168.220.0/255.255.255.0 192.168.220.0/24 (有 24 个连续的 1)</p><p>手动进行配置如下(linux)</p><figure><img src="'+g+'" alt="image-20210310164825710" tabindex="0" loading="lazy"><figcaption>image-20210310164825710</figcaption></figure><p><strong>默认的子网掩码</strong> A 类 ip 地址的默认子网掩码为 255.0.0.0 B 类 ip 地址的默认子网掩码为 255.255.0.0 C 类 ip 地址的默认子网掩码为 255.255.255.0</p><h2 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h2><p>TCP/IP 协议采用端口标识通信的 <strong>进程</strong> 用于区分一个系统里的 <strong>多个进程</strong><strong>特点</strong> 1、对于同一个端口，在不同系统中对应着不同的进程</p><p>2、对于同一个系统，一个端口只能被一个进程拥有 3、一个进程拥有一个端口后，传输层送到该端口的数据全部被该进程接收，同样，进 程送交传输层的数据也通过该端口被送出</p><p><strong>端口号</strong> 类似 pid 标识一个进程 （进程号可变，端口号不变）；在网络程序中，用端口号（port）来标识一个运行的网络程序</p><p><strong>特点</strong><strong>1</strong> 、端口号是无符号短整型的类型 2、每个端口都拥有一个端口号 3、TCP、UDP 维护各自独立的端口号 4、网络应用程序,至少要占用一个端口号,也可以占有多个端口号</p><p><strong>知名端口（1~1023）</strong> 由互联网数字分配机构(IANA)根据用户需要进行统一分配 例如：FTP—21，HTTP—80 等 服务器通常使用的范围; 若强制使用,须加 root 特权</p><p><strong>动态端口（1024~65535）</strong> 应用程序通常使用的范围 一般我们可以使用的端口号就是在这个范围，比如 6666、7777、8888、9999、 10000、10001 注意 端口号类似于进程号，同一时刻只能标志一个进程 可以重复使用</p><h2 id="数据包组装拆解" tabindex="-1"><a class="header-anchor" href="#数据包组装拆解" aria-hidden="true">#</a> 数据包组装拆解</h2><p><strong>数据包在各个层之间的传输</strong></p><p>数据在各个层封装/拆解各种头部</p><figure><img src="'+f+'" alt="image-20210310165906997" tabindex="0" loading="lazy"><figcaption>image-20210310165906997</figcaption></figure><h3 id="链路层封包格式" tabindex="-1"><a class="header-anchor" href="#链路层封包格式" aria-hidden="true">#</a> <strong>链路层封包格式</strong></h3><figure><img src="'+h+'" alt="image-20210310170341866" tabindex="0" loading="lazy"><figcaption>image-20210310170341866</figcaption></figure><p><strong>大多数使用以太网封装</strong></p><p><strong>目的地址</strong> ：目的 mac 地址 <strong>源地址</strong> ：源 mac 地址 <strong>类型：</strong> 确定以太网头后面跟的是哪个协议 0x0800 ip 协议 0x0806 arp 协议 0x0835 rarp 协议</p><p><strong>注意</strong> 1、IEEE802.2/802.3 封装常用在无线 2、以太网封装常用在有线局域网</p><h3 id="网络层、传输层封包格式" tabindex="-1"><a class="header-anchor" href="#网络层、传输层封包格式" aria-hidden="true">#</a> <strong>网络层、传输层封包格式</strong></h3><figure><img src="'+y+'" alt="image-20210310170822503" tabindex="0" loading="lazy"><figcaption>image-20210310170822503</figcaption></figure><p>根据协议的不同定义，数据部分会封装不同格式的数据报</p><h2 id="网络应用程序开发流程" tabindex="-1"><a class="header-anchor" href="#网络应用程序开发流程" aria-hidden="true">#</a> 网络应用程序开发流程</h2><p><strong>TCP—面向连接</strong> 电话系统服务模式的抽象 每一次完整的数据传输都要经过建立连接、使用连接、终止连接的过程 本质上,连接是一个管道,收发数据不但顺序一致,而且内容相同 保证数据传输的可靠性</p><p><strong>UDP—面向无连接</strong> 邮件系统服务模式的抽象 每个分组都携带完整的目的地址 不能保证分组的先后顺序 不进行分组出错的恢复和重传 不保证数据传输的可靠性</p><p><strong>C/S 架构示例（面向连接）</strong> 无论采用面向连接的还是无连接，两个进程通信过程中，大多采用 C/S 架构 client 向 server 发出请求,server 接收到后提供相应的服务 在通信过程中往往都是 client 先发送请求，而 server 等待请求然后进行服务</p><h1 id="udp-编程" tabindex="-1"><a class="header-anchor" href="#udp-编程" aria-hidden="true">#</a> UDP 编程</h1><h3 id="字节序概念" tabindex="-1"><a class="header-anchor" href="#字节序概念" aria-hidden="true">#</a> 字节序概念</h3><p>是指多字节数据的存储顺序 <strong>分类</strong> 小端格式:将低位字节数据存储在低地址 大端格式:将高位字节数据存储在低地址 <strong>注意</strong> LSB：低地址 MSB：高地址 靠近 0x 的为高字节区</p><figure><img src="'+_+`" alt="image-20210314181037668" tabindex="0" loading="lazy"><figcaption>image-20210314181037668</figcaption></figure><p><strong>特点</strong> 1、网络协议指定了通讯字节序—大端 2、只有在多字节数据处理时才需要考虑字节序 3、运行在同一台计算机上的进程相互通信时,一般不用考虑字节序 4、异构计算机之间通讯，需要转换自己的字节序为网络字节序 在需要字节序转换的时候一般调用特定字节序转换函数</p><h3 id="字节序转换函数" tabindex="-1"><a class="header-anchor" href="#字节序转换函数" aria-hidden="true">#</a> 字节序转换函数</h3><p>小端存储机器和大段存储机器的数据传输</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>头文件：
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>

返回值：
成功：返回主机字节序的值

htonl 函数 
<span class="token class-name">uint32_t</span> <span class="token function">htonl</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> hostint32<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能<span class="token operator">:</span>
将 <span class="token number">32</span> 位主机字节序数据转换成网络字节序数据
参数：
hostint32：待转换的 <span class="token number">32</span> 位主机字节序数据


htons 函数
<span class="token class-name">uint16_t</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> hostint16<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：
将 <span class="token number">16</span> 位主机字节序数据转换成网络字节序数据
参数：
<span class="token class-name">uint16_t</span>：<span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span>
hostint16：待转换的 <span class="token number">16</span> 位主机字节序数据


ntohl 函数
<span class="token class-name">uint32_t</span> <span class="token function">ntohl</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> netint32<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：
将 <span class="token number">32</span> 位网络字节序数据转换成主机字节序数据
参数：
<span class="token class-name">uint32_t</span>： <span class="token keyword">unsigned</span> <span class="token keyword">int</span>
netint32：待转换的 <span class="token number">32</span> 位网络字节序数据


ntohs 函数
<span class="token class-name">uint16_t</span> <span class="token function">ntohs</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> netint16<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：
将 <span class="token number">16</span> 位网络字节序数据转换成主机字节序数据
参数：
<span class="token class-name">uint16_t</span>： <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span>
netint16：待转换的 <span class="token number">16</span> 位网络字节序数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+`" alt="image-20210314182920082" tabindex="0" loading="lazy"><figcaption>image-20210314182920082</figcaption></figure><p>0x78563412</p><h3 id="ip-地址转换函数" tabindex="-1"><a class="header-anchor" href="#ip-地址转换函数" aria-hidden="true">#</a> IP 地址转换函数</h3><p>inet_pton 函数 <strong>字符串 ip 地址转整型数据</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">inet_pton</span><span class="token punctuation">(</span><span class="token keyword">int</span> family<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>strptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addrptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
功能：
将点分十进制数串转换成 <span class="token number">32</span> 位无符号整数
参数：
family 协议族
AF_INET
strptr 点分十进制数串
addrptr <span class="token number">32</span> 位无符号整数的地址
返回值：
成功返回 <span class="token number">1</span> 、失败返回其它
头文件：
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">char</span> ip_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;10.0.13.100&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> ip_uint <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> ip_p <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//可以用 char 吗？</span>
<span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>ip_str<span class="token punctuation">,</span><span class="token operator">&amp;</span>ip_uint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ip_uint = %d\\n&quot;</span><span class="token punctuation">,</span>ip_uint<span class="token punctuation">)</span><span class="token punctuation">;</span>
ip_p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ip_uint<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ip_uint = %d.%d.%d.%d\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>ip_p<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>ip_p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>ip_p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span>ip_p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="image-20210314183220015" tabindex="0" loading="lazy"><figcaption>image-20210314183220015</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>inet_ntop 函数
整型数据转字符串格式 ip 地址
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">inet_ntop</span><span class="token punctuation">(</span><span class="token keyword">int</span> family<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>addrptr<span class="token punctuation">,</span>
<span class="token keyword">char</span> <span class="token operator">*</span>strptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>

功能：
将 <span class="token number">32</span> 位无符号整数转换成点分十进制数串
参数：
family 协议族
addrptr <span class="token number">32</span> 位无符号整数
strptr 点分十进制数串
len strptr 缓存区长度
len 的宏定义
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INET_ADDRSTRLEN</span> <span class="token expression"><span class="token number">16</span> </span><span class="token comment">//for ipv4</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INET6_ADDRSTRLEN</span> <span class="token expression"><span class="token number">46</span> </span><span class="token comment">//for ipv6</span></span>
返回值：
成功<span class="token operator">:</span>则返回字符串的首地址
失败<span class="token operator">:</span>返回 <span class="token constant">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inet_addr(const char *cp)</code>和<code>inet_ntoa(struct in_addr in)</code>只能用在 IPv4 中。</p><h2 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h2><p><strong>UDP 协议</strong> 面向无连接的用户数据报协议，在传输数据前不需要先建立连接；目地主机的运输层收到 UDP 报文后，不需 要给出任何确认 <strong>UDP 特点</strong> 1、相比 TCP 速度稍快些 2、简单的请求/应答应用程序可以使用 UDP 3、对于海量数据传输不应该使用 UDP 4、广播和多播应用必须使用 UDP UDP 应用 DNS(域名解析)、NFS(网络文件系统)、RTP(流媒体)等</p><p>一般语音和视频都是 UDP</p><h3 id="网络编程接口-socket" tabindex="-1"><a class="header-anchor" href="#网络编程接口-socket" aria-hidden="true">#</a> 网络编程接口 socket</h3><p>网络通信要解决的是不同主机进程间的通信 1、首要问题是网络间进程标识问题 2、以及多重协议的识别问题 20 世纪 80 年代初，加州大学 Berkeley 分校在 BSD(一个 UNIX OS 版本)系统内实现了 TCP/IP 协议；其网络程序编程开发接口为 socket 随着 UNIX 以及类 UNIX 操作系统的广泛应用， socket 成为最流行的网络程序开发接口</p><p>蓝牙 WIFI 这类通信的实现，也是使用 socket。</p><p><strong>socket 作用</strong> 提供不同主机上的进程之间的通信 <strong>socket 特点</strong> 1、socket 也称“套接字” 2、是一种文件描述符,代表了一个通信管道的一个端点 3、类似对文件的操作一样，可以使用 read、write、close 等函数对 socket 套接字进行网络数据的收取和发送等操作 4、得到 socket 套接字（描述符）的方法调用 socket()</p><p><strong>socket 分类</strong> SOCK_STREAM，流式套接字，用于 TCP SOCK_DGRAM，数据报套接字，用于 UDP SOCK_RAW，原始套接字，对于其他层次的协议操作时需要使用这个类型</p><h3 id="udp-编程-c-s-架构" tabindex="-1"><a class="header-anchor" href="#udp-编程-c-s-架构" aria-hidden="true">#</a> UDP 编程 C/S 架构</h3><figure><img src="`+P+`" alt="image-20210314193736665" tabindex="0" loading="lazy"><figcaption>image-20210314193736665</figcaption></figure><p>UDP 网络编程流程： 服务器： 创建套接字 socket( ) 将服务器的 ip 地址、端口号与套接字进行绑定 bind( ) 接收数据 recvfrom() 发送数据 sendto() 客户端： 创建套接字 socket() 发送数据 sendto() 接收数据 recvfrom() 关闭套接字 close()</p><h3 id="udp-编程-创建套接字" tabindex="-1"><a class="header-anchor" href="#udp-编程-创建套接字" aria-hidden="true">#</a> UDP 编程-创建套接字</h3><p>int socket(int family,int type,int protocol); 功能： 创建一个用于网络通信的 socket 套接字（描述符） 参数： family:协议族(AF_INET、AF_INET6、PF_PACKET 等) type:套接字类(SOCK_STREAM、SOCK_DGRAM、SOCK_RAW 等) protocol:协议类别(0、IPPROTO_TCP、IPPROTO_UDP 等 返回值： 套接字 特点：</p><p>​ 创建套接字时，系统不会分配端口 ​ 创建的套接字默认属性是主动的，即主动发起服务的请求;当作为服务器时，往往需要修改为被动的 头文件： ​ #include &lt;sys/socket.h&gt;</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token number">2</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span>
<span class="token number">6</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">7</span> <span class="token punctuation">{</span>
<span class="token number">8</span> <span class="token comment">//使用 socket 函数创建套接字</span>
<span class="token number">9</span> <span class="token comment">//创建一个用于 UDP 网络编程的套接字</span>
<span class="token number">10</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
<span class="token number">11</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">12</span> <span class="token punctuation">{</span>
<span class="token number">13</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">14</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">15</span> <span class="token punctuation">}</span>
<span class="token number">16</span>
<span class="token number">17</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sockfd = %d\\n&quot;</span><span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span>c
<span class="token number">19</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">20</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="udp-编程-发送、绑定、接收数据" tabindex="-1"><a class="header-anchor" href="#udp-编程-发送、绑定、接收数据" aria-hidden="true">#</a> UDP 编程-发送、绑定、接收数据</h3><p><strong>IPv4 套接字地址结构</strong></p><p>在网络编程中经常使用的结构体 sockaddr_in (以下结构体 linux 中都有定义) 头文件：#include &lt;netinet/in.h&gt;</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> <span class="token keyword">struct</span> <span class="token class-name">in_addr</span>
<span class="token number">2</span> <span class="token punctuation">{</span>
<span class="token number">3</span> <span class="token class-name">in_addr_t</span> s_addr<span class="token punctuation">;</span><span class="token comment">//ip 地址 4 字节</span>
<span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token number">5</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span>
<span class="token number">6</span> <span class="token punctuation">{</span>
<span class="token number">7</span> <span class="token class-name">sa_family_t</span> sin_family<span class="token punctuation">;</span><span class="token comment">//协议族 2 字节</span>
<span class="token number">8</span> <span class="token class-name">in_port_t</span> sin_port<span class="token punctuation">;</span><span class="token comment">//端口号 2 字节</span>
<span class="token number">9</span> <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span><span class="token comment">//ip 地址 4 字节</span>
<span class="token number">10</span> <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token comment">//填充，不起什么作用 8 字节</span>
<span class="token number">11</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使不同格式地址能被传入套接字函数,地址须要强制转换成通用套接字地址结构，原因是因为不同场合所使用的结构体不一样，但是调用的函数却是同一个，所以定义一个通用结构体，当在指定场合使用时，在根据要求传入指定的结构体即可通用结构体 sockaddr 头文件:#include &lt;netinet/in.h&gt;</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span>
<span class="token number">2</span> <span class="token punctuation">{</span>
<span class="token number">3</span> <span class="token class-name">sa_family_t</span> sa_family<span class="token punctuation">;</span> <span class="token comment">// 2 字节</span>
<span class="token number">4</span> <span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token comment">//14 字节</span>
<span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>两种地址结构使用场合</strong> 在定义源地址和目的地址结构的时候，选用 <code>struct sockaddr_in;</code> 例： <code>struct sockaddr_in my_addr;</code> 当调用编程接口函数，且该函数需要传入地址结构时需要用 struct sockaddr 进行强制转换 例： <code>bind(sockfd,(struct sockaddr*)&amp;my_addr,sizeof(my_addr));</code></p><p><strong>发送数据—sendto 函数</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>
<span class="token class-name">ssize_t</span> <span class="token function">sendto</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
<span class="token number">4</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>dest_addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">5</span> 功能：发送数据
<span class="token number">6</span> 参数：
<span class="token number">7</span> sockfd：文件描述符，socket 的返回值
<span class="token number">8</span> buf：要发送的数据
<span class="token number">9</span> len：buf 的长度
flags：标志位
<span class="token number">0</span> 阻塞
<span class="token number">12</span> MSG_DONTWAIT 非阻塞
<span class="token number">13</span> dest_addr：目的网络信息结构体（需要自己指定要给谁发送）
<span class="token number">14</span> addrlen：dest_addr 的长度
<span class="token number">15</span> 返回值：
<span class="token number">16</span> 成功：发送的字节数
<span class="token number">17</span> 失败：‐<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="网络调试助手" tabindex="-1"><a class="header-anchor" href="#网络调试助手" aria-hidden="true">#</a> 网络调试助手</h3><figure><img src="`+I+`" alt="image-20210314200131091" tabindex="0" loading="lazy"><figcaption>image-20210314200131091</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">//printf</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span> <span class="token comment">//exit</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span> <span class="token comment">//socket</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h&gt;</span> <span class="token comment">//sockaddr_in</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span> <span class="token comment">//htons inet_addr</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span> <span class="token comment">//close</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">128</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//./a.out 192.168.3.78 8080</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Usage：%s ip port\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//第一步：创建套接字</span>
<span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;sockfd = %d\\n&quot;</span><span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//第二步：填充服务器网络信息结构体 sockaddr_in</span>
<span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serveraddr<span class="token punctuation">;</span>
<span class="token class-name">socklen_t</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serveraddr<span class="token punctuation">)</span><span class="token punctuation">;</span>

serveraddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span> <span class="token comment">//协议族，AF_INET：ipv4 网络协议</span>
serveraddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//transform ip into correct format</span>
serveraddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//第三步：发送数据</span>
<span class="token keyword">char</span> buf<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> <span class="token comment">//把 buf 字符串中的\\n 转化为\\0</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serveraddr<span class="token punctuation">,</span> addrlen<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to sendto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>c

<span class="token comment">//第四步：关闭套接字文件描述符</span>
<span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>./a.out 192.168.3.78 8080</code> 执行</p><h4 id="绑定-bind" tabindex="-1"><a class="header-anchor" href="#绑定-bind" aria-hidden="true">#</a> 绑定 BIND</h4><p>由于服务器是被动的，客户端是主动的，所以一般先运行服务器，后运行客户端，所以服务器需要固定自己的信息（ip 地址和端口号），这样客户端才可以找到服务器并与之通信，但是客户端一般不需要 bind 绑定，因为系统会自动给客户端分配 ip 地址和端口号</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> <span class="token comment">//第二步：将服务器的网络信息结构体绑定前进行填充</span>
<span class="token number">2</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serveraddr<span class="token punctuation">;</span>
<span class="token number">3</span> serveraddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">4</span> serveraddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">5</span> serveraddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">6</span>
<span class="token number">7</span> <span class="token comment">//第三步：将网络信息结构体与套接字绑定</span>
<span class="token number">8</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serveraddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serveraddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">9</span> <span class="token punctuation">{</span>
<span class="token number">10</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">12</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置服务器-ubuntu" tabindex="-1"><a class="header-anchor" href="#设置服务器-ubuntu" aria-hidden="true">#</a> 设置服务器（ubuntu）</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">//printf</span></span>
<span class="token number">2</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//exit</span>
<span class="token number">3</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//socket</span>
<span class="token number">5</span> #include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//sockaddr_in</span>
<span class="token number">6</span> #include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//htons inet_addr</span>
<span class="token number">7</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//close</span>
<span class="token number">8</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">9</span>
<span class="token number">10</span> #define N <span class="token number">128</span>
<span class="token number">11</span>
<span class="token number">12</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">13</span> <span class="token punctuation">{</span>
<span class="token number">14</span> <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">15</span> <span class="token punctuation">{</span>
<span class="token number">16</span> <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Usage: %s ip port\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">18</span> <span class="token punctuation">}</span>
<span class="token number">19</span>
<span class="token number">20</span> <span class="token comment">//第一步：创建套接字</span>
<span class="token number">21</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>
<span class="token number">22</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">23</span> <span class="token punctuation">{</span>
<span class="token number">24</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">25</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">26</span> <span class="token punctuation">}</span>
<span class="token number">27</span>
<span class="token number">28</span> <span class="token comment">//第二步：将服务器的网络信息结构体绑定前进行填充</span>
<span class="token number">29</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serveraddr<span class="token punctuation">;</span>
<span class="token number">30</span> serveraddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">31</span> serveraddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//192.168.3.103</span>
<span class="token number">32</span> serveraddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9999</span>
<span class="token number">33</span>
<span class="token number">34</span> <span class="token comment">//第三步：将网络信息结构体与套接字绑定</span>
<span class="token number">35</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serveraddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serveraddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">36</span> <span class="token punctuation">{</span>
<span class="token number">37</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">38</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span> <span class="token punctuation">}</span>
<span class="token number">40</span>
<span class="token number">41</span> <span class="token comment">//接收数据</span>
<span class="token number">42</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token number">43</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clientaddr<span class="token punctuation">;</span>
<span class="token number">44</span> <span class="token class-name">socklen_t</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">45</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">46</span> <span class="token punctuation">{</span>
<span class="token number">47</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a
ddrlen<span class="token punctuation">)</span> <span class="token operator">==</span> ‐<span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">48</span> <span class="token punctuation">{</span>
<span class="token number">49</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to recvfrom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">51</span> <span class="token punctuation">}</span>
<span class="token number">52</span>
<span class="token number">53</span> <span class="token comment">//打印数据</span>
<span class="token number">54</span> <span class="token comment">//打印客户端的 ip 地址和端口号</span>
<span class="token number">55</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ip:%s, port:%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>clientaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>c
lientaddr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span> <span class="token comment">//打印接收到数据</span>
<span class="token number">57</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;from client: %s\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">58</span> <span class="token punctuation">}</span>
<span class="token number">59</span>
<span class="token number">60</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">61</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ip ifconfig 查看后，使用正确的 IP， 端口号如果别人用了，就换一个</p><h4 id="接受数据-recvfrom-函数" tabindex="-1"><a class="header-anchor" href="#接受数据-recvfrom-函数" aria-hidden="true">#</a> 接受数据 - recvfrom 函数</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token number">2</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>
<span class="token number">4</span> <span class="token class-name">ssize_t</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>src_addr<span class="token punctuation">,</span> <span class="token class-name">socklen_t</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">6</span> 功能：接收数据
<span class="token number">7</span> 参数：
<span class="token number">8</span> sockfd：文件描述符，socket 的返回值
<span class="token number">9</span> buf：保存接收的数据
<span class="token number">10</span> len：buf 的长度
<span class="token number">11</span> flags：标志位
<span class="token number">12</span> <span class="token number">0</span> 阻塞
<span class="token number">13</span> MSG_DONTWAIT 非阻塞
<span class="token number">14</span> src_addr：源的网络信息结构体（自动填充，定义变量传参即可）
<span class="token number">15</span> addrlen：src_addr 的长度
<span class="token number">16</span> 返回值：
<span class="token number">17</span> 成功：接收的字节数
<span class="token number">18</span> 失败：‐<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接受数据" tabindex="-1"><a class="header-anchor" href="#接受数据" aria-hidden="true">#</a> 接受数据</h4><p>可将网络调试助手作为客户端，发送数据</p><h2 id="udp-客户端注意点" tabindex="-1"><a class="header-anchor" href="#udp-客户端注意点" aria-hidden="true">#</a> UDP 客户端注意点</h2><p><strong>上文中的流程图是关键</strong></p><p>1、本地 IP、本地端口（我是谁） 2、目的 IP、目的端口（发给谁） 3、在客户端的代码中，我们只设置了目的 IP、目的端口</p><p>客户端的本地 ip、 <strong>本地 port 是我们调用 sendto 的时候 linux 系统底层自动给客户端分配的</strong> ；分配端口的方式为随机分配，即每次运行系统给的 port 不一样</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//udp 客户端的实现</span>
<span class="token number">2</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//printf</span>
<span class="token number">3</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//exit</span>
<span class="token number">4</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//socket</span>
<span class="token number">6</span> #include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//sockaddr_in</span>
<span class="token number">7</span> #include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//htons inet_addr</span>
<span class="token number">8</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//close</span>
<span class="token number">9</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">10</span>
<span class="token number">11</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">12</span> <span class="token punctuation">{</span>
<span class="token number">13</span> <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">14</span> <span class="token punctuation">{</span>
<span class="token number">15</span> <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Usage: %s &lt;ip&gt; &lt;port&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span> <span class="token punctuation">}</span>
<span class="token number">18</span>
<span class="token number">19</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span> <span class="token comment">//文件描述符</span>
<span class="token number">20</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serveraddr<span class="token punctuation">;</span> <span class="token comment">//服务器网络信息结构体</span>
<span class="token number">21</span> <span class="token class-name">socklen_t</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serveraddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span>
<span class="token number">23</span> <span class="token comment">//第一步：创建套接字</span>
<span class="token number">24</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">25</span> <span class="token punctuation">{</span>
<span class="token number">26</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">27</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span> <span class="token punctuation">}</span>
<span class="token number">29</span>
<span class="token number">30</span> <span class="token comment">//客户端自己指定自己的 ip 地址和端口号，一般不需要，系统会自动分配</span>
<span class="token number">31</span> #<span class="token keyword">if</span> <span class="token number">0</span>
<span class="token number">32</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clientaddr<span class="token punctuation">;</span>
<span class="token number">33</span> clientaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">34</span> clientaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//客户端的 ip 地址</span>
<span class="token number">35</span> clientaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//客户端的端口号</span>
<span class="token number">36</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span> addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">37</span> <span class="token punctuation">{</span>
<span class="token number">38</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">39</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">40</span> <span class="token punctuation">}</span>
<span class="token number">41</span> #endif
<span class="token number">42</span>
<span class="token number">43</span> <span class="token comment">//第二步：填充服务器网络信息结构体</span>
<span class="token number">44</span> <span class="token comment">//inet_addr：将点分十进制字符串 ip 地址转化为整形数据</span>
<span class="token number">45</span> <span class="token comment">//htons：将主机字节序转化为网络字节序</span>
<span class="token number">46</span> <span class="token comment">//atoi：将数字型字符串转化为整形数据</span>
<span class="token number">47</span> serveraddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">48</span> serveraddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">49</span> serveraddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">50</span>
<span class="token number">51</span> <span class="token comment">//第三步：进行通信</span>
<span class="token number">52</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token number">53</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">54</span> <span class="token punctuation">{</span>
<span class="token number">55</span> <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span> buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> ‐ <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
<span class="token number">57</span>
<span class="token number">58</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serve
raddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serveraddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">59</span> <span class="token punctuation">{</span>
<span class="token number">60</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to sendto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">61</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">62</span> <span class="token punctuation">}</span>
<span class="token number">63</span>
<span class="token number">64</span> <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token number">65</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s
erveraddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">66</span> <span class="token punctuation">{</span>
<span class="token number">67</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to recvfrom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">68</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">69</span> <span class="token punctuation">}</span>
<span class="token number">70</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;from server: %s\\n&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">71</span> <span class="token punctuation">}</span>
<span class="token number">72</span> <span class="token comment">//第四步：关闭文件描述符</span>
<span class="token number">73</span> <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">74</span>
<span class="token number">75</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">76</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="udp-服务器注意点" tabindex="-1"><a class="header-anchor" href="#udp-服务器注意点" aria-hidden="true">#</a> UDP 服务器注意点</h2><p>1、服务器之所以要 bind 是因为它的本地 port 需要是固定，而不是随机的 2、服务器也可以主动地给客户端发送数据 3、客户端也可以用 bind，这样客户端的本地端口就是固定的了，但一般不这样做</p><p>udp 是并发服务器，一个服务器可以对多个客户。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//udp 服务器的实现</span>
<span class="token number">2</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//printf</span>
<span class="token number">3</span> #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//exit</span>
<span class="token number">4</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>types<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span> #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>socket<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//socket</span>
<span class="token number">6</span> #include <span class="token operator">&lt;</span>netinet<span class="token operator">/</span>in<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//sockaddr_in</span>
<span class="token number">7</span> #include <span class="token operator">&lt;</span>arpa<span class="token operator">/</span>inet<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//htons inet_addr</span>
<span class="token number">8</span> #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span> <span class="token comment">//close</span>
<span class="token number">9</span> #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">10</span>
<span class="token number">11</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">12</span> <span class="token punctuation">{</span>
<span class="token number">13</span> <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">14</span> <span class="token punctuation">{</span>
<span class="token number">15</span> <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Usage: %s &lt;ip&gt; &lt;port&gt;\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">16</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">17</span> <span class="token punctuation">}</span>
<span class="token number">18</span>
<span class="token number">19</span> <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span> <span class="token comment">//文件描述符</span>
<span class="token number">20</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serveraddr<span class="token punctuation">;</span> <span class="token comment">//服务器网络信息结构体</span>
<span class="token number">21</span> <span class="token class-name">socklen_t</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serveraddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">22</span>
<span class="token number">23</span> <span class="token comment">//第一步：创建套接字</span>
<span class="token number">24</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">25</span> <span class="token punctuation">{</span>
<span class="token number">26</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to socket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">27</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">28</span> <span class="token punctuation">}</span>
<span class="token number">29</span>
<span class="token number">30</span> <span class="token comment">//第二步：填充服务器网络信息结构体</span>
<span class="token number">31</span> <span class="token comment">//inet_addr：将点分十进制字符串 ip 地址转化为整形数据</span>
<span class="token number">32</span> <span class="token comment">//htons：将主机字节序转化为网络字节序</span>
<span class="token number">33</span> <span class="token comment">//atoi：将数字型字符串转化为整形数据</span>
<span class="token number">34</span> serveraddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
<span class="token number">35</span> serveraddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">36</span> serveraddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">37</span>
<span class="token number">38</span> <span class="token comment">//第三步：将套接字与服务器网络信息结构体绑定</span>
<span class="token number">39</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serveraddr<span class="token punctuation">,</span> addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">40</span> <span class="token punctuation">{</span>
<span class="token number">41</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to bind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">42</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">43</span> <span class="token punctuation">}</span>
<span class="token number">44</span>
<span class="token number">45</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">46</span> <span class="token punctuation">{</span>
<span class="token number">47</span> <span class="token comment">//第四步：进行通信</span>
<span class="token number">48</span> <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token number">49</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clientaddr<span class="token punctuation">;</span>
<span class="token number">50</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recvfrom</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c
lientaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">51</span> <span class="token punctuation">{</span>
<span class="token number">52</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to recvfrom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">53</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">54</span> <span class="token punctuation">}</span>
<span class="token number">55</span> <span class="token function">printf</span><span class="token punctuation">(</span>&quot;
<span class="token punctuation">[</span><span class="token operator">%</span>s ‐ <span class="token operator">%</span>d<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token operator">%</span>s\\n&quot;<span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>clientaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>clientaddr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">,</span>
ext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">56</span>
<span class="token number">57</span> <span class="token function">strcat</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">&quot; *_*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">58</span>
<span class="token number">59</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>cli
entaddr<span class="token punctuation">,</span> addrlen<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token number">60</span> <span class="token punctuation">{</span>
<span class="token number">61</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;fail to sendto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">62</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">63</span> <span class="token punctuation">}</span>
<span class="token number">64</span> <span class="token punctuation">}</span>
<span class="token number">65</span>
<span class="token number">66</span> <span class="token comment">//第四步：关闭文件描述符</span>
<span class="token number">67</span> <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">68</span>
<span class="token number">69</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token number">70</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,151);function z(S,U){const a=l("ExternalLinkIcon");return t(),e("div",null,[n("blockquote",null,[T,D,C,n("p",null,[s("笔记总结 课程链接："),n("a",N,[s("千峰嵌入式教程"),o(a)])])]),c(" more"),A])}const F=p(q,[["render",z],["__file","笔记TCPIP1.html.vue"]]);export{F as default};
