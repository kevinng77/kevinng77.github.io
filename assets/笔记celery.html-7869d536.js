import{_ as p,E as o,S as c,W as i,$ as n,a3 as s,Z as e,aS as t}from"./framework-d5c0d2cb.js";const l="/assets/img/celery/image-20231126135511326.png",r={},u=t(`<h1 id="celery" tabindex="-1"><a class="header-anchor" href="#celery" aria-hidden="true">#</a> Celery</h1><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>celery 官方推荐使用 RabbitMQ 作为消息中间件。因此我们需要先安装对应的 broker，比如 rabbitmq：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d -p 5672:5672 rabbitmq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于小规模业务，可以考虑使用 backend redis + broker rabbitMQ 的组合。 可以考虑可视化界面安装（redis 后端 + rabbitmq + flower）：</p><details class="hint-container details"><summary>docker-compose 代码</summary><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>version: &#39;3.8&#39;

services:
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - &quot;5672:5672&quot;    # RabbitMQ server
      - &quot;15672:15672&quot;  # RabbitMQ management console
  redis:
      image: &quot;bitnami/redis:latest&quot;
      environment:
          - REDIS_PASSWORD=password123
      ports:
          - &quot;6379:6379&quot;
      <span class="token comment"># volumes:</span>
      <span class="token comment">#     # - &quot;redis_data:/bitnami/redis/data&quot;</span>
      <span class="token comment">#     - /bitnami/redis/data</span>
  flower:
    image: mher/flower:2.0.1
    command: celery flower
    environment:
      - FLOWER_PORT=5555
      - CELERY_BROKER=amqp://user:password@rabbitmq:5672//
      - FLOWER_BROKER_API=http://user:password@rabbitmq:15672/api/
    ports:
      - &quot;5555:5555&quot;
    depends_on:
      - rabbitmq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>安装后，登录 <code>http://localhost:5555/</code> 查看 celery 任务管理界面。</p><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><p>创建一个 <code>task.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery

<span class="token comment"># 链接 rabbitMQ</span>
app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> backend<span class="token operator">=</span><span class="token string">&#39;rpc://&#39;</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">&#39;amqp://kevin:777777@localhost:5672&#39;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而后运行 celery worker 服务器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>celery <span class="token parameter variable">-A</span> tasks worker <span class="token parameter variable">--loglevel</span><span class="token operator">=</span>INFO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行服务器后，开始监听我们定义的两个任务。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>查看 flower 界面中，可以看到 workers 下有我们启动的监听服务。</p></div><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><p>创建文件 <code>producer.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 假设我们的 add 任务写在了 tasks.py 文件中</span>
<span class="token keyword">from</span> tasks <span class="token keyword">import</span> add
result <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),d=n("code",null,"result = add.delay(4, 4)",-1),k={href:"https://docs.celeryq.dev/en/stable/reference/celery.result.html#celery.result.AsyncResult",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"AsyncResult",-1),m=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult
<span class="token keyword">from</span> celery_task <span class="token keyword">import</span> cel
result <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;result_id&quot;</span><span class="token punctuation">,</span> app<span class="token operator">=</span>cel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来构建。获取结果的话可以：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># redis 中用该 id 取结果。</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>ready<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>

<span class="token comment"># result.get 会阻塞，直到 task 完成，并返回结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于所有的 CeleryResult，我们都需要执行 <code>get()</code> 或 <code>forget()</code> 来释放资源。</p><p>当我们运行了一个 <code>add.delay(4, 4)</code> 之后，可以在 flower 的 broker 下面查看到：有一条 Message 被添加到了 <code>celery</code> 队列当中，然后对应的 consumers 消费了这个消息。</p></div><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>在启动 celery worker 之后，我们可以看到对应的 concurrency 数量：</p><figure><img src="`+l+`" alt="image-20231126135511326" tabindex="0" loading="lazy"><figcaption>image-20231126135511326</figcaption></figure><p>以及 rabbitmq 的 queues 相关信息。我们尝试在客户端同时运行 21 次 <code>add.delay(4,4)</code>。在 flower 中可以看到，运行后，broker 中显示 <code>Message = 5</code>，表示有 5 条消息在等待执行。而后 worker 下显示 <code>Active=16</code>, 后变成 <code>Active=5</code>。</p><p><strong>因此，celery 的 <code>.delay</code> 方法实际是向队列当中添加了对应函数的任务。我们的 celery worker 会从 queue 当中提取任务执行。</strong></p><h2 id="项目架构" tabindex="-1"><a class="header-anchor" href="#项目架构" aria-hidden="true">#</a> 项目架构</h2><p>官方示例项目架构</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>src<span class="token operator">/</span>
    proj<span class="token operator">/</span>__init__<span class="token punctuation">.</span>py
        <span class="token operator">/</span>celery<span class="token punctuation">.</span>py
        <span class="token operator">/</span>tasks<span class="token punctuation">.</span>py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>proj/celery.py</code> 用于配置 celery app：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery
<span class="token keyword">import</span> os


app <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;proj&#39;</span><span class="token punctuation">,</span>
             broker<span class="token operator">=</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;CELERY_BROKER_URL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;amqp://user:password@localhost:5672//&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             backend<span class="token operator">=</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;CELERY_RESULT_BACKEND&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;redis://:password123@localhost:6379/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;proj.tasks&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Optional configuration, see the application user guide.</span>
app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
    result_expires<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>proj/tasks.py</code> 用于编辑任务：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span>
<span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 worker 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>celery <span class="token parameter variable">-A</span> proj worker <span class="token parameter variable">-l</span> INFO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者在后台启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>celery multi start w1 <span class="token parameter variable">-A</span> proj <span class="token parameter variable">-l</span> INFO
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="celery-进阶" tabindex="-1"><a class="header-anchor" href="#celery-进阶" aria-hidden="true">#</a> Celery 进阶</h2><h3 id="task-配置" tabindex="-1"><a class="header-anchor" href="#task-配置" aria-hidden="true">#</a> task 配置</h3>`,22),b={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#list-of-options",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#logging",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>所有 task 都可以通过自定义 class 来批量配置参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> celery

<span class="token keyword">class</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span>celery<span class="token punctuation">.</span>Task<span class="token punctuation">)</span><span class="token punctuation">:</span>
	autoretry_for <span class="token operator">=</span> <span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span><span class="token punctuation">)</span>
    max_retries <span class="token operator">=</span> <span class="token number">5</span>
    retry_backoff <span class="token operator">=</span> <span class="token boolean">True</span>
    retry_backoff_max <span class="token operator">=</span> <span class="token number">700</span>
    retry_jitter <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">def</span> <span class="token function">on_failure</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc<span class="token punctuation">,</span> task_id<span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">,</span> einfo<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0!r} failed: {1!r}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>task_id<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>base<span class="token operator">=</span>MyTask<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> KeyError<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>task 添加 bind 参数后，可以调用 <code>self</code> 中的方法，比如 <code>retry()</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">send_twitter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> oauth<span class="token punctuation">,</span> tweet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        twitter <span class="token operator">=</span> Twitter<span class="token punctuation">(</span>oauth<span class="token punctuation">)</span>
        twitter<span class="token punctuation">.</span>update_status<span class="token punctuation">(</span>tweet<span class="token punctuation">)</span>
    <span class="token keyword">except</span> <span class="token punctuation">(</span>Twitter<span class="token punctuation">.</span>FailWhaleError<span class="token punctuation">,</span> Twitter<span class="token punctuation">.</span>LoginError<span class="token punctuation">)</span> <span class="token keyword">as</span> exc<span class="token punctuation">:</span>
        <span class="token comment"># overrides the default delay to retry after 1 minute</span>
        <span class="token keyword">raise</span> self<span class="token punctuation">.</span>retry<span class="token punctuation">(</span>exc<span class="token operator">=</span>exc<span class="token punctuation">,</span> countdown<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> max_retries<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),y=n("code",null,"retry_backoff=True",-1),_={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#automatic-retry-for-known-exceptions",target:"_blank",rel:"noopener noreferrer"},f=t(`<h4 id="任务状态控制" tabindex="-1"><a class="header-anchor" href="#任务状态控制" aria-hidden="true">#</a> 任务状态控制</h4><p>task 可以使用 broker 中的 basic_reject 方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> Reject

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> acks_late<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">requeues</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>delivery_info<span class="token punctuation">[</span><span class="token string">&#39;redelivered&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Reject<span class="token punctuation">(</span><span class="token string">&#39;no reason&#39;</span><span class="token punctuation">,</span> requeue<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;received two times&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用 <code>from celery.exceptions import Ignore</code> 的 <code>raise Ignore()</code> 来丢弃任务。</p>`,4),w={class:"hint-container tip"},x=t(`<p class="hint-container-title">提示</p><p>每一个 task 的 <code>__init__</code> 方法只会被调用 1 次。 <strong>因此可以用来缓存一些资源，比如数据库链接状态等</strong> ：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Task

<span class="token keyword">class</span> <span class="token class-name">DatabaseTask</span><span class="token punctuation">(</span>Task<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _db <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">db</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_db <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>_db <span class="token operator">=</span> Database<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用时候用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery<span class="token punctuation">.</span>app <span class="token keyword">import</span> task

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>base<span class="token operator">=</span>DatabaseTask<span class="token punctuation">,</span> bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">process_rows</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> task<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> row <span class="token keyword">in</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>table<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        process_row<span class="token punctuation">(</span>row<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#instantiation",target:"_blank",rel:"noopener noreferrer"},R=n("h4",{id:"任务钩子",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#任务钩子","aria-hidden":"true"},"#"),s(" 任务钩子")],-1),T={href:"https://docs.celeryq.dev/en/stable/userguide/tasks.html#handlers",target:"_blank",rel:"noopener noreferrer"},E=n("h4",{id:"执行任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#执行任务","aria-hidden":"true"},"#"),s(" 执行任务")],-1),j={href:"https://docs.celeryq.dev/en/stable/userguide/calling.html",target:"_blank",rel:"noopener noreferrer"},A=t(`<ol><li>调度时建议设置好时间预期：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token punctuation">,</span> timezone

tomorrow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>timezone<span class="token punctuation">.</span>utc<span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
add<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>tomorrow<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>可以使用 <code>on_message</code> 来监听对应任务的进度：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 服务器</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>bind<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    
 <span class="token comment"># 用 self.update_state 会触发 on_message 对应函数</span>
self<span class="token punctuation">.</span>update_state<span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token string">&quot;PROGRESS&quot;</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;progress&#39;</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>update_state<span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token string">&quot;PROGRESS&quot;</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;progress&#39;</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hello world: %i&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端调用时：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">on_raw_message</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>

a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
r <span class="token operator">=</span> hello<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>on_message<span class="token operator">=</span>on_raw_message<span class="token punctuation">,</span> propagate<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>添加 <code>ignore_result=True</code> 来节省时间：<code>result = add.apply_async((1, 2), ignore_result=True)</code></li></ol><h4 id="提示" tabindex="-1"><a class="header-anchor" href="#提示" aria-hidden="true">#</a> 提示</h4><ol><li>不要在一个 task 中调用另一个 task。如果要那么做的话，请使用 signature。</li><li>celery 是一个分布式系统，我们不能知道哪个进程或者哪台机器将会执行这个任务。</li></ol><h3 id="task-flows" tabindex="-1"><a class="header-anchor" href="#task-flows" aria-hidden="true">#</a> Task-flows</h3>`,10),C={href:"https://docs.celeryq.dev/en/stable/userguide/canvas.html#guide-canvas",target:"_blank",rel:"noopener noreferrer"},F=t(`<ol><li><strong>Groups</strong></li></ol><p>一个 group 并行调用任务列表，返回的结果是有序的。执行下列 groups 任务，broker 当中会添加 10 个 message。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> group
<span class="token keyword">from</span> proj<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> add

group<span class="token punctuation">(</span>add<span class="token punctuation">.</span>s<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Chains</strong></li></ol><p>接受多个 signature 的结果，而后传送给一个 message 执行任务。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> chain
<span class="token keyword">from</span> proj<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> add<span class="token punctuation">,</span> mul

<span class="token comment"># (4 + 4) * 8</span>
chain<span class="token punctuation">(</span>add<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> mul<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Chords</strong></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> chord
<span class="token keyword">from</span> proj<span class="token punctuation">.</span>tasks <span class="token keyword">import</span> add<span class="token punctuation">,</span> xsum

chord<span class="token punctuation">(</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>s<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xsum<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-routing" tabindex="-1"><a class="header-anchor" href="#task-routing" aria-hidden="true">#</a> Task Routing</h3><p>不同的任务，可以安排在不同的队列上。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>update<span class="token punctuation">(</span>
    task_routes <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;proj.tasks.objectCheck&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;queue&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;objectCheck&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&#39;proj.tasks.caption&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;queue&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;caption&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&#39;proj.tasks.training&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;queue&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;training&#39;</span><span class="token punctuation">}</span>  <span class="token comment"># 声明每个 task 对应的 queue</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    task_queues <span class="token operator">=</span> <span class="token punctuation">(</span>
        Queue<span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Queue<span class="token punctuation">(</span><span class="token string">&#39;objectCheck&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment"># 声明有这个 queue</span>
        Queue<span class="token punctuation">(</span><span class="token string">&#39;caption&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        Queue<span class="token punctuation">(</span><span class="token string">&#39;training&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment"># rabbitmq 支持特殊 routing 设计</span>
        Queue<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> Exchange<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;direct&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 	
              routing_key<span class="token operator">=</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span>
              queue_arguments<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;x-max-priority&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，使用 <code>celery -A proj worker</code> 会监听所有的 queue。可以使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>celery <span class="token parameter variable">-A</span> proj worker <span class="token parameter variable">-Q</span> objectCheck <span class="token parameter variable">--hostname</span><span class="token operator">=</span>object@%h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),O=n("code",null,"exchange",-1),Q=n("code",null,"routing_key",-1),S={href:"https://docs.celeryq.dev/en/stable/userguide/routing.html#special-routing-options",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"关于 queue 与 routing_key 请查看 rabbitmq",-1),L=n("h3",{id:"worker-启动",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#worker-启动","aria-hidden":"true"},"#"),s(" Worker 启动")],-1),B=n("p",null,[s("对于同一份 celery 项目代码，可以通过在终端传入不同的 "),n("code",null,"-Q"),s(" 参数来指定每个 worker 需要监听的队列。")],-1),M={href:"https://docs.celeryq.dev/en/stable/userguide/workers.html#queues-adding-consumers",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app.control.add_consumer(
    queue=&#39;baz&#39;,
    exchange=&#39;ex&#39;,
    exchange_type=&#39;topic&#39;,
    routing_key=&#39;media.*&#39;,
    options={
        &#39;queue_durable&#39;: False,
        &#39;exchange_durable&#39;: False,
    },
    reply=True,
    destination=[&#39;w1@example.com&#39;, &#39;w2@example.com&#39;])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>worker 启动部分参数：</p><ul><li><p><code>--logfile=%p.log</code></p></li><li><p><code>--loglevel=INFO</code></p></li><li><p><code>--concurrency=10</code></p></li><li><p><code>-n worker1@%h</code></p></li><li><p><code>--autoscale=10,3</code> (always keep 3 processes, but grow to 10 if necessary)</p></li><li><p><code>-Q foo,bar,baz</code></p></li></ul><p>强制关闭所有 worker：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> auxww <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/celery worker/ {print $2}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="落地代办" tabindex="-1"><a class="header-anchor" href="#落地代办" aria-hidden="true">#</a> 落地代办</h3>`,6),D={href:"https://docs.celeryq.dev/en/stable/userguide/index.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.celeryq.dev/en/stable/userguide/security.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.celeryq.dev/en/stable/userguide/optimizing.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://docs.celeryq.dev/en/stable/userguide/configuration.html",target:"_blank",rel:"noopener noreferrer"},K=n("ul",null,[n("li",null,"[ ] flower 集成其他可视化平台"),n("li",null,"[ ] 如何设置失败重试")],-1);function U(V,G){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[d,s(" 返回的是一个 "),n("a",k,[v,e(a)]),s(" 实例，该示例可以用")]),m,n("p",null,[s("task 可选参数："),n("a",b,[s("文档"),e(a)]),s("。")]),n("p",null,[s("logging 可以直接用 print。或者参考"),n("a",h,[s("文档"),e(a)]),s("。")]),g,n("p",null,[s("当任务中涉及到调用其他 API 任务时，可以考虑添加 "),y,s(" 选项（参考"),n("a",_,[s("文档"),e(a)]),s("）。")]),f,n("div",w,[x,n("p",null,[n("a",q,[s("参考文档"),e(a)])])]),R,n("p",null,[s("任务可以添加一些钩子，参考"),n("a",T,[s("文档"),e(a)]),s("。")]),E,n("p",null,[n("a",j,[s("官方文档"),e(a)])]),A,n("p",null,[s("详细的 workflow 可以在 "),n("a",C,[s("celery 官网"),e(a)]),s("查询")]),F,n("p",null,[s("来监听不同的任务。也可以设置不同的 "),O,s("，"),Q,s(" 等。具体查看"),n("a",S,[s("官方文档"),e(a)]),s("。")]),I,L,B,n("p",null,[s("可以通过 "),n("a",M,[s("add_consumers"),e(a)]),s(" 来添加不同消息队列的 consumer：")]),N,n("p",null,[s("请查看官网的其他 "),n("a",D,[s("how-to-guide"),e(a)]),s(", 如 "),n("a",z,[s("Security"),e(a)]),s("， "),n("a",P,[s("Optimizing"),e(a)]),s("， "),n("a",W,[s("Configuration and defaults"),e(a)]),s(" 等。")]),K])}const $=p(r,[["render",U],["__file","笔记celery.html.vue"]]);export{$ as default};
