import{_ as e,P as o,U as c,a0 as l,Y as n,a1 as s,X as t,aQ as p,E as i}from"./framework-6cee4965.js";const u="/assets/img/ahocorasick/image-20211220101906829.png",r={},k=n("blockquote",null,[n("p",null,"Aho-Corasick 多字符串匹配加速算法。文章包括 Tire, KMP, Aho-Corasick")],-1),d=n("p",null,"需要匹配的单词有 n 个，要在一篇具有 m 个单词的文章中找出他们的位置。",-1),m=n("p",null,"AC 自动机可以理解为 Tire 与 KMP 算法的结合。使用 fail 指针加速了字符串匹配的速度。",-1),v=n("h2",{id:"trie",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#trie","aria-hidden":"true"},"#"),s(" Trie")],-1),h=n("p",null,[s("前缀树/字典树 的插入、查询时间复杂度均为 为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"S"),n("mi",{mathvariant:"normal"},"∣"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(|S|)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"∣"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),n("span",{class:"mord"},"∣"),n("span",{class:"mclose"},")")])])]),s("，其中 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"S"),n("mi",{mathvariant:"normal"},"∣")]),n("annotation",{encoding:"application/x-tex"},"|S|")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),n("span",{class:"mord"},"∣")])])]),s(" 是每次插入或查询的字符串的长度。空间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"T"),n("mi",{mathvariant:"normal"},"∣"),n("mo",{separator:"true"},"⋅"),n("mo",null,"∑"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(|T|·\\sum)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"∣"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"mord"},"∣"),n("span",{class:"mpunct"},"⋅"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),n("span",{class:"mclose"},")")])])]),s(" 其中 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"∣"),n("mi",null,"T"),n("mi",{mathvariant:"normal"},"∣")]),n("annotation",{encoding:"application/x-tex"},"|T|")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"∣"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"mord"},"∣")])])]),s(" 为插入字符串长度之和，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"∑")]),n("annotation",{encoding:"application/x-tex"},"\\sum")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑")])])]),s(" 为字符集大小。")],-1),b={href:"https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/shi-xian-trie-qian-zhui-shu-by-leetcode-ti500/",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>Trie<span class="token operator">*</span><span class="token operator">&gt;</span> children<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span>
    Trie<span class="token operator">*</span> <span class="token function">searchPrefix</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Trie<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ch <span class="token operator">-=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">children</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Trie<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ch <span class="token operator">-=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                node<span class="token operator">-&gt;</span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>children<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        node<span class="token operator">-&gt;</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Trie<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">searchPrefix</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-&gt;</span>isEnd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">bool</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">searchPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kmp" tabindex="-1"><a class="header-anchor" href="#kmp" aria-hidden="true">#</a> KMP</h2>`,2),w={href:"https://leetcode-cn.com/problems/implement-strstr/solution/shua-chuan-lc-shuang-bai-po-su-jie-fa-km-tb86/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zhuanlan.zhihu.com/p/83334559",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.zhihu.com/question/21923021/answer/1032665486",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[s("从长度 m 的字符串中匹配出长度为 n 的字符串。时间复杂度 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(m+n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])])],-1),_={href:"https://www.zhihu.com/question/21923021/answer/1032665486",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"next=pmt>>1;",-1),M=n("code",null,"pmt[i]",-1),q=n("code",null,"A[0:pmt[i]] = A[pmt[i]:i]",-1),T=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> next<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token operator">++</span>i<span class="token punctuation">;</span>
			<span class="token operator">++</span>j<span class="token punctuation">;</span>
			next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>	
		<span class="token keyword">else</span>
			j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 next 数组，在匹配失败的时候只需要将指针 <code>j</code> 移动到 <code>next[j]</code> 的位置然后继续匹配，i 指针不需要回溯。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
	<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> 
		<span class="token punctuation">{</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
           		j<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	 	<span class="token keyword">else</span> 
           		j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>
    <span class="token keyword">else</span> 
       <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ac-自动机" tabindex="-1"><a class="header-anchor" href="#ac-自动机" aria-hidden="true">#</a> AC 自动机</h2><figure><img src="`+u+'" alt="image-20211220101906829" tabindex="0" loading="lazy"><figcaption>image-20211220101906829</figcaption></figure>',5),j={href:"https://www.cnblogs.com/cmmdc/p/7337611.html",target:"_blank",rel:"noopener noreferrer"},N=p(`<p><strong>fail 指针的用途：</strong></p><p>参考上图例子，需要匹配的字符串有：<code>{&quot;str&quot;,&quot;she&quot;,&quot;say&quot;,&quot;her&quot;}</code> ，假设主字符串为：<code>&quot;should&quot;</code> 。首先匹配 <code>&quot;str&quot;</code>，在匹配第二个字符 <code>&#39;h&#39;</code> 时成功，接着匹配他的子节点，匹配到第 3 个字符（<code>&#39;r&#39;!=&#39;o&#39;</code>）时失败，而后匹配 <code>&#39;e&#39;!=&#39;o&#39;</code>也失败，此时跳转到 <code>h</code> fail 指针对应地址继续匹配，即匹配 <code>he</code> 与 <code>ho</code>。</p><p><strong>fail 指针的构建：</strong></p><p>Fail 指针用 BFS 来求得，对于直接与根节点相连的节点来说，如果这些节点失配，他们的 Fail 指针直接指向 root 即可，其他节点其 Fail 指针求法如下： 假设当前节点为 father，其孩子节点记为 child。求 child 的 Fail 指针时，首先我们要找到其 father 的 Fail 指针所指向的节点,假如是 t 的话，我们就要看 t 的孩子中有没有和 child 节点所表示的字母相同的节点，如果有的话，这个节点就是 child 的 fail 指针，如果发现没有，则需要找 father-&gt;fail-&gt;fail 这个节点，然后重复上面过程，如果一直找都找不到，则 child 的 Fail 指针就要指向 root。</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><p>root 节点结构</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> kind <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
<span class="token keyword">struct</span> <span class="token class-name">node</span>
<span class="token punctuation">{</span>
    node <span class="token operator">*</span>fail<span class="token punctuation">;</span>       <span class="token comment">//失败指针</span>
    node <span class="token operator">*</span>next<span class="token punctuation">[</span>kind<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//Tire 每个节点的个子节点（最多个字母）</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>        <span class="token comment">//是否为该单词的最后一个节点</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//构造函数初始化</span>
    <span class="token punctuation">{</span>
        fail<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token operator">*</span>q<span class="token punctuation">[</span><span class="token number">500001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">//队列，方便用于 bfs 构造失败指针</span>
<span class="token keyword">char</span> keyword<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//输入的单词</span>
<span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//模式串</span>
<span class="token keyword">int</span> head<span class="token punctuation">,</span>tail<span class="token punctuation">;</span>        <span class="token comment">//队列的头尾指针</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>插入</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span>node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    node <span class="token operator">*</span>p<span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        index<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">//在单词的最后一个节点 count+1，代表一个单词</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>构建 fail 指针</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code> <span class="token keyword">void</span> <span class="token function">build_ac_automation</span><span class="token punctuation">(</span>node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    root<span class="token operator">-&gt;</span>fail<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    q<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span>tail<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        node <span class="token operator">*</span>temp<span class="token operator">=</span>q<span class="token punctuation">[</span>tail<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        node <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span>root<span class="token punctuation">)</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>fail<span class="token operator">=</span>root<span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    p<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>fail<span class="token punctuation">;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>fail<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>fail<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>fail<span class="token operator">=</span>root<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                q<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字符串匹配</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>node <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    node <span class="token operator">*</span>p<span class="token operator">=</span>root<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        index<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">!=</span>root<span class="token punctuation">)</span> p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>fail<span class="token punctuation">;</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        p<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">?</span>root<span class="token operator">:</span>p<span class="token punctuation">;</span>
        node <span class="token operator">*</span>temp<span class="token operator">=</span>p<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span>root <span class="token operator">&amp;&amp;</span> temp<span class="token operator">-&gt;</span>count<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            cnt<span class="token operator">+=</span>temp<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span>
            temp<span class="token operator">-&gt;</span>count<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            temp<span class="token operator">=</span>temp<span class="token operator">-&gt;</span>fail<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pyahocorasick" tabindex="-1"><a class="header-anchor" href="#pyahocorasick" aria-hidden="true">#</a> pyahocorasick</h3>`,14),A=n("code",null,"pip install pyahocorasick",-1),P={href:"https://pyahocorasick.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},U=p(`<p><strong>构建</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> ahocorasick
actree <span class="token operator">=</span> ahocorasick<span class="token punctuation">.</span>Automaton<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># use the Automaton class as a trie</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> word <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>wordlist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    actree<span class="token punctuation">.</span>add_word<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span>
actree<span class="token punctuation">.</span>make_automaton<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search</span>

<span class="token comment"># &#39;word&#39; in actree 检查字符是否在 trie 中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查询</strong> 使用 <code>actree.iter(string)</code> ，返回 结果为 <code>匹配到单词时结束的位置、构建时候插入的 index、匹配到的单词</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> end_index<span class="token punctuation">,</span> <span class="token punctuation">(</span>insert_order<span class="token punctuation">,</span> original_value<span class="token punctuation">)</span> <span class="token keyword">in</span> A<span class="token punctuation">.</span><span class="token builtin">iter</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     start_index <span class="token operator">=</span> end_index <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>original_value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> <span class="token punctuation">(</span>insert_order<span class="token punctuation">,</span> original_value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">assert</span> haystack<span class="token punctuation">[</span>start_index<span class="token punctuation">:</span>start_index <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>original_value<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> original_value
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;he&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;her&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>保存与加载</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cPickle
pickled <span class="token operator">=</span> cPickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>A<span class="token punctuation">)</span>
B <span class="token operator">=</span> cPickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>pickled<span class="token punctuation">)</span>
B<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;he&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function C(O,E){const a=i("ExternalLinkIcon");return o(),c("div",null,[k,l("more"),d,m,v,h,n("p",null,[n("a",b,[s("来源：力扣（LeetCode）"),t(a)])]),g,n("p",null,[n("a",w,[s("力扣 实现 strstr()"),t(a)]),s(),n("a",y,[s("KMP 算法详解 （另类 KMP）"),t(a)]),s(),n("a",x,[s("如何更好地理解和掌握 KMP 算法?"),t(a)])]),f,n("p",null,[s("首先需要求 next 数组 "),n("a",_,[s("算法"),t(a)]),s("。字符串 A 对应的 next 数组为 pmt 数组右移一位得到，"),L,s(),M,s(" 表示 "),q]),T,n("p",null,[s("参考 KMP 的思想，我们将待匹配字符串储存为 Trie 树，而后添加 fail 指针来减少回溯匹配浪费的时间。（该部分参考自："),n("a",j,[s("AC 自动机算法详解"),t(a)]),s("）")]),N,n("p",null,[s("python 下的 AC 自动机库 "),A,s(),n("a",P,[s("官方文档"),t(a)])]),U])}const S=e(r,[["render",C],["__file","笔记ahocorasick.html.vue"]]);export{S as default};
