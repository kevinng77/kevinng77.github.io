import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as s,b as n,d as c,e as r,f as t}from"./app-b886ebe1.js";const i="/assets/img/C++2/image-20210107170029762.png",y={},d=s("h1",{id:"c-基础-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-基础-2","aria-hidden":"true"},"#"),n(" C++ 基础 2")],-1),v=s("p",null,"嵌入式自学开始啦~ 为了自己的贾维斯",-1),E=s("p",null,"太忙了，C++学了快 1 个月。没怎么用竟然也忘得差不多了。",-1),u={href:"https://www.bilibili.com/video/BV1FA411v7YW?p=530&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="c-模板" tabindex="-1"><a class="header-anchor" href="#c-模板" aria-hidden="true">#</a> C++模板</h2><p>参数的类型不具体指定，用通用类型代替。在调用时，编译器会根据实参的类型，推导出形参的类型（类型参数化）</p><h3 id="函数模板" tabindex="-1"><a class="header-anchor" href="#函数模板" aria-hidden="true">#</a> 函数模板</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;</span><span style="color:#6A737D;"> //定义一个模板，模板的通用类型未 T</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap_temp</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    T temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">swap_temp</span><span style="color:#24292E;">(a,b);</span><span style="color:#6A737D;"> //系统自动推导输入类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数模板不能进行自动类型转换</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Myadd</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Myadd</span><span style="color:#24292E;">&lt;&gt;(a,a);</span><span style="color:#6A737D;"> //调用模板函数</span></span>
<span class="line"><span style="color:#6F42C1;">Myadd</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(a,a);</span></span>
<span class="line"><span style="color:#6F42C1;">Myadd</span><span style="color:#24292E;">(a,b)；</span><span style="color:#6A737D;"> //系统调用普通函数，因为普通的函数可以自动类型转换</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>C++优先考虑普通函数</li><li>可以通过&lt;&gt;调用模板函数</li><li>函数模板可以像普通函数那样被重载</li><li>如果函数模板可以产生一个更好的匹配，那么选择模板</li></ul><p>函数模板的本质就是函数重载，二次编译</p><h4 id="类模板" tabindex="-1"><a class="header-anchor" href="#类模板" aria-hidden="true">#</a> 类模板</h4><p>类模板不能自动类型推导</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">        data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	T1 age;</span></span>
<span class="line"><span style="color:#24292E;">    T2 data;</span></span>
<span class="line"><span style="color:#24292E;">};</span><span style="color:#6A737D;"> //类模板不能自动推导类型</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	animal</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dog</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    animal</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">,string</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">cat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lili&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p</span><span style="color:#24292E;">){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> p.age </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">p.data</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">//类模板作为形参,该函数需要写成函数模板</span></span>
<span class="line"><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(dog);</span></span>
<span class="line"><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(cat);</span><span style="color:#6A737D;">//函数会自动推导类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类模板继承</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">base</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">base</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">){}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    T a;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">tenplate</span><span style="color:#D73A49;">&lt;class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">class son: </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">base</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">son</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">):</span><span style="color:#6F42C1;">base</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;(a),</span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">(x1)</span></span>
<span class="line"><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">    T1 x1;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类模板类外实现</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span></span>
<span class="line"><span style="color:#24292E;">    {</span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#24292E;">        T1 a;</span></span>
<span class="line"><span style="color:#24292E;">        T2 b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(T1 a,T2 b) </span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt; a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">    //类模板的成员函数在类外实现 需要写成函数模板</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类模板头文件和源文件分离问题</p><p>类模板如果不调用，就不会被创建</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;132jjj.h&quot;</span></span>
<span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">PERSON</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">t1</span><span style="color:#24292E;">&gt;::</span><span style="color:#6F42C1;">PERSON</span><span style="color:#24292E;">(T1)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6A737D;">//调用的时候</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    person</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int&gt;</span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    p.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">//调用构造函数和 show 函数需要创建，但是没有这两个函数的定义，不能创建函数 .h 函数的定义和声明写到一起去中去 如果用类内实现模板就不存在这种问题</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数模板与友元</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showperson</span><span style="color:#24292E;">&lt;&gt;(person</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T1,T2</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">friend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showPerson2</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt; </span><span style="color:#005CC5;">7</span><span style="color:#D73A49;">p</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> //定义一个全局函数并声明为类的友元</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><ul><li>静态转换：用于转换 int，char 等基本类型</li><li>动态转换：用于转换类和类，不能转内置的数据类型</li><li>常量转换：用于修改类型的 const 属性</li><li>重新解释转换：用于指针间转换，整数和指针间也可以转</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static_cast&lt;int&gt;</span><span style="color:#24292E;">(b);</span><span style="color:#6A737D;">  //静态转换，和 c 的强制类型转换一样。不能转换没有发生继承关系之间的类</span></span>
<span class="line"><span style="color:#24292E;">A </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> A;</span><span style="color:#6A737D;"> //父类</span></span>
<span class="line"><span style="color:#24292E;">B </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> B;</span><span style="color:#6A737D;"> //子类</span></span>
<span class="line"><span style="color:#24292E;">p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">dynamic_cast&lt;</span><span style="color:#24292E;">A </span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(p2);</span><span style="color:#6A737D;"> //不能用于没有继承关系的类之间的转换，只能子类转父类</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cont_cast</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">&gt;(p2);</span></span>
<span class="line"><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const_cast&lt;const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;">(p1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">interpret_cast</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">&gt;(p2);</span></span>
<span class="line"><span style="color:#24292E;">c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">reinterpret_cast&lt;int&gt;</span><span style="color:#24292E;">(p2);</span><span style="color:#6A737D;"> //重新解释转换，指针</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><ul><li>尝试捕获异常</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">itn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mydive</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //抛出异常</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">mydive</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;捕获了 int 类型的异常&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(...){</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">//捕获其他类型的异常</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>try 和 catch 必须同时存在，如果抛出异常然而 catch 没有捕获到该类型异常，那么程序会终止</p></li><li><p>栈解旋: 在 try 到 throw 之间定义的对象，在 throw 之后会被释放</p></li><li><p>异常接口申明：linux 和 qt 下可以，vs 不行</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">throw</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//不能抛出任何异常</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>异常变量：如果抛出匿名对象，它的声明周期在 catch 里</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myexception</span></span>
<span class="line"><span style="color:#24292E;">{  }</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myexception</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">()}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(myexception </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p){ </span></span>
<span class="line"><span style="color:#24292E;">    p.</span><span style="color:#6F42C1;">errror</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>多态实现异常处理</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myexception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">virtual</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">out_of_range</span><span style="color:#24292E;">(): public myexception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        cour</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;out of range&quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">endl;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bad_cast</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myexception</span></span>
<span class="line"><span style="color:#24292E;">{.....}</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">out_of_range</span><span style="color:#24292E;">();</span><span style="color:#6A737D;"> //也可以</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bad_cast</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(myxeception </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p)</span><span style="color:#6A737D;"> //用父类引用</span></span>
<span class="line"><span style="color:#24292E;">{ </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-异常库" tabindex="-1"><a class="header-anchor" href="#c-异常库" aria-hidden="true">#</a> C++ 异常库</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdexcept&gt;</span></span>
<span class="line"><span style="color:#24292E;">exception p;</span></span>
<span class="line"><span style="color:#24292E;">p.</span><span style="color:#6F42C1;">what</span><span style="color:#24292E;">()</span><span style="color:#6A737D;"> //打印出错信息 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">error1</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exception</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#6F42C1;">what</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">c_str</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    string data</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;">//自定义异常类</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stl" tabindex="-1"><a class="header-anchor" href="#stl" aria-hidden="true">#</a> STL</h2><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h3><ul><li>string</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">string str;</span></span>
<span class="line"><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">str1</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">str3</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;K&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str1;</span></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(str1);</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //str = &quot;ab&quot;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123123&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span><span style="color:#6A737D;"> //切片</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">str[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//str.at(4)</span></span>
<span class="line"><span style="color:#24292E;">str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> // str += &#39;c&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // str.append(&quot;123&quot;,2,3);</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(str1,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //从 1 开始查找 str1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>vector</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;vector&gt;</span></span>
<span class="line"><span style="color:#24292E;">vector</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">v2</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">v1</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">v1</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1;</span></span>
<span class="line"><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;(v1).</span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(v1);</span><span style="color:#6A737D;"> //swap 收缩空间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator it_start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator it_end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;it_start </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> it_end;it_start </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//v.resize() resize 后 size 变了，但是 capacity 不变</span></span>
<span class="line"><span style="color:#6A737D;">//.empty().capacity().resize().reserve(提前预留位置)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator iter;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (iter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ivec.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(); iter </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> ivec.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(); iter </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">iter </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">v[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> //v.at(1)</span></span>
<span class="line"><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">front</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//v.back</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //在第 2 个位置插入 3 个 9</span></span>
<span class="line"><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">pop_back</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//删除最后一个</span></span>
<span class="line"><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">erase</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//删除迭代器</span></span>
<span class="line"><span style="color:#24292E;">v.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(),v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(),compare)</span><span style="color:#6A737D;"> //compare 编写排序规则</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>deque</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">deque</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> d;</span></span>
<span class="line"><span style="color:#6F42C1;">deque</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">d1</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">d</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">deque</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#6F42C1;">d3</span><span style="color:#24292E;">(d1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(),d1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(d1.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">(),d1.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//empty;resize</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">push_back</span><span style="color:#24292E;">();</span><span style="color:#6A737D;"> //push_front,pop_back,pop_front</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">d[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> //d.at(1)</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">front</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//d.back() 第一个与最后一个</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(pos,elem);</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#6F42C1;">erase</span><span style="color:#24292E;">(beg,end);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="image-20210107170029762" tabindex="0" loading="lazy"><figcaption>image-20210107170029762</figcaption></figure><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><ul><li>函数对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">negate</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> p;</span><span style="color:#6A737D;"> //plus,minus,multiplies,divides,modulus</span></span>
<span class="line"><span style="color:#6F42C1;">greater</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;();</span><span style="color:#6A737D;"> //equal_to,not_equal_to,greater_equal,less,less_equal</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>适配器</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//二元继承</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">public</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">binary_function</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    public：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">()</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">const</span><span style="color:#24292E;">{};</span></span>
<span class="line"><span style="color:#6A737D;">//绑定参数</span></span>
<span class="line"><span style="color:#6F42C1;">bind2nd</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Print</span><span style="color:#24292E;">(),</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> Lambda</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">[capture](parameters) mutable -&gt;return-type</span></span>
<span class="line"><span style="color:#24292e;">{statement}</span></span>
<span class="line"><span style="color:#24292e;">[函数对象参数](操作符重载函数参数)mutable -&gt;返回值{函数体}</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数对象参数；</p><p>[]，标识一个 Lambda 的开始，这部分必须存在，不能省略。函数对象参数是传 递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到 定义 Lambda 为止时 Lambda 所在作用范围内可见的局部变量（包括 Lambda 所在类的 this）。函数对象参数有以下形式： n 空。没有使用任何函数对象参数。 n =。函数体内可以使用 Lambda 所在作用范围内所有可见的局部变量（包括 Lambda 所在类的 this），并且是值传递方式（相当于编译器自动为我们按值传 递了所有局部变量）。 n &amp;。函数体内可以使用 Lambda 所在作用范围内所有可见的局部变量（包括 Lambda 所在类的 this），并且是引用传递方式（相当于编译器自动为我们按引 用传递了所有局部变量）</p><p>n this。函数体内可以使用 Lambda 所在类中的成员变量。 n a。将 a 按值进行传递。按值进行传递时，函数体内不能修改传递进来的 a 的拷 贝，因为默认情况下函数是 const 的。要修改传递进来的 a 的拷贝，可以添加 mutable 修饰符。 n &amp;a。将 a 按引用进行传递。 n a, &amp;b。将 a 按值进行传递，b 按引用进行传递。 n =，&amp;a, &amp;b。除 a 和 b 按引用进行传递外，其他参数都按值进行传递。 n &amp;, a, b。除 a 和 b 按值进行传递外，其他参数都按引用进行传递。</p><p>操作符重载函数参数； 标识重载的()操作符的参数，没有参数时，这部分可以省略。参数可以通过按值 （如：(a,b)）和按引用（如：(&amp;a,&amp;b)）两种方式进行传递。 ③ 可修改标示符； mutable 声明，这部分可以省略。按值传递函数对象参数时，加上 mutable 修饰符后，可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）。</p><p>函数返回值； -&gt;返回值类型，标识函数返回值的类型，当返回值为 void，或者函数体中只有一 处 return 的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省 略。</p>`,55);function m(A,D){const a=p("ExternalLinkIcon");return e(),o("div",null,[d,s("blockquote",null,[v,E,s("p",null,[n("部分笔记总结于交材：《c++ primer》 , 部分笔记课程链接："),s("a",u,[n("千峰嵌入式教程"),c(a)])])]),r(" more"),b])}const g=l(y,[["render",m],["__file","笔记Cplusplus2.html.vue"]]);export{g as default};
