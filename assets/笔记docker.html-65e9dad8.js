import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as c,c as r,e as t,a as s,b as n,d as l,f as o}from"./app-07c238d0.js";const i={},y=s("p",null,"看越来越多人使用 docker 来进行服务的交付了，在深度学习环境的配置上有了 docker 也节省了很多时间。于是记了一些笔记，接下来通过在 docker 上搭建 NVIDIA 深度学习环境来熟悉吧！",-1),d=s("p",null,"docker 相对与虚拟机，占用空间更小，启动更快。它米有自己的内核且不会对操作系统和硬件进行模拟。",-1),u=s("p",null,"安装卸载指南 https://www.docker.com/",-1),E=o(`<p>docker 类似一个 linux 虚拟机，占有一个端口</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;">       </span><span style="color:#6A737D;">#显示 docker 的系统信息，包括镜像和容器的数量</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">命令</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--help</span><span style="color:#24292E;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="镜像命令" tabindex="-1"><a class="header-anchor" href="#镜像命令" aria-hidden="true">#</a> 镜像命令</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">search</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像名称</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tomcat:8</span></span>
<span class="line"><span style="color:#6A737D;">#如果不写 tag，默认就是 latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rmi</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#删除指定的镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rmi</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">docker</span><span style="color:#032F62;"> images </span><span style="color:#005CC5;">-aq</span><span style="color:#032F62;">)</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#删除全部的镜像</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令" aria-hidden="true">#</a> 容器命令</h4><p>创建容器需要创建镜像</p><p><code>sudo docker pull ubuntu</code></p><p>新建容器并启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [可选参数] image </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [可选参数] image</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">--name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Name&quot;</span><span style="color:#24292E;">		</span><span style="color:#6F42C1;">容器名字</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tomcat01</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tomcat02</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用来区分容器</span></span>
<span class="line"><span style="color:#6F42C1;">-d</span><span style="color:#24292E;">					</span><span style="color:#032F62;">后台方式运行</span></span>
<span class="line"><span style="color:#6F42C1;">-it</span><span style="color:#24292E;"> 				</span><span style="color:#032F62;">使用交互方式运行，进入容器查看内容</span></span>
<span class="line"><span style="color:#6F42C1;">-p</span><span style="color:#24292E;">					</span><span style="color:#032F62;">指定容器的端口</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">宿主机</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:8080</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">容器</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ip:主机端口:容器端口</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">主机端口:容器端口</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">常用</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器端口</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">容器端口</span></span>
<span class="line"><span style="color:#6F42C1;">-P(大写</span><span style="color:#24292E;">) 				随机指定端口</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#容器直接退出</span></span>
<span class="line"><span style="color:#6F42C1;">ctrl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+P</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+Q</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#容器不停止退出</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ps</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#列出当前正在运行的容器</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">-a,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--all</span><span style="color:#24292E;">             </span><span style="color:#032F62;">Show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span><span style="color:#24292E;"> (default </span><span style="color:#032F62;">shows</span><span style="color:#24292E;"> </span><span style="color:#032F62;">just</span><span style="color:#24292E;"> </span><span style="color:#032F62;">running</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">-n,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--last</span><span style="color:#24292E;"> </span><span style="color:#032F62;">int</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">last</span><span style="color:#24292E;"> </span><span style="color:#032F62;">created</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span><span style="color:#24292E;"> (includes </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">states</span><span style="color:#24292E;">) (</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">-q,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--quiet</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Only</span><span style="color:#24292E;"> </span><span style="color:#032F62;">display</span><span style="color:#24292E;"> </span><span style="color:#032F62;">numeric</span><span style="color:#24292E;"> </span><span style="color:#032F62;">IDs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">#删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rf</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">docker</span><span style="color:#032F62;"> ps </span><span style="color:#005CC5;">-aq</span><span style="color:#032F62;">)</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#删除指定的容器</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ps</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">xargs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">#删除所有的容器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动和停止容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kill</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 强制停止当前容器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用其他命令" tabindex="-1"><a class="header-anchor" href="#常用其他命令" aria-hidden="true">#</a> 常用其他命令</h4><p>后台运行容器的时候，如果容器没有前台进程，docker 就会自动停止他</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos</span></span>
<span class="line"><span style="color:#6A737D;"># 如果让容器运行一个 while 循环那么就可以发现它了</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显示日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--tail</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#查看 n 行日志</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-ft</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#查看并实时输出全部日志</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>容器状态查看</p><p><code>docker top 容器 id</code> 查看容器进程信息</p><p><code>docker inspect 容器 id</code> 查看镜像的元数据</p><ul><li>Mounts 查看挂载卷</li><li>&quot;PortBindings&quot; 查看端口</li></ul><p><code>docker stats 容器 id</code> 查看 docker 容器使用内存情况</p><p>进入当前正在运行的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">attach</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 进入容器正在执行的进程</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从容器内拷贝文件到主机</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id:容器内路径</span><span style="color:#24292E;"> </span><span style="color:#032F62;">主机目的路径</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/chengcodex/cloud/assets/img/master/assets/img/image-20200514214313962.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#当前 shell 下 attach 连接指定运行的镜像</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">       </span><span style="color:#032F62;">Build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Dockerfile</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span><span style="color:#24292E;"> </span><span style="color:#032F62;">changes</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">cp</span><span style="color:#24292E;">          </span><span style="color:#032F62;">Copy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files/folders</span><span style="color:#24292E;"> </span><span style="color:#032F62;">between</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span><span style="color:#24292E;"> </span><span style="color:#032F62;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">local</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filesystem</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">diff</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">#查看 docker 容器的变化</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">events</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">real</span><span style="color:#24292E;"> </span><span style="color:#032F62;">time</span><span style="color:#24292E;"> </span><span style="color:#032F62;">events</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">exec</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">command</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">export</span><span style="color:#24292E;">      </span><span style="color:#6A737D;">#导出容器文件系统作为一个 tar 归档文件[对应 import]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">history</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">history</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">images</span><span style="color:#24292E;">      </span><span style="color:#032F62;">List</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 从 tar 包中导入内容创建一个文件系统镜像</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Display</span><span style="color:#24292E;"> </span><span style="color:#032F62;">system-wide</span><span style="color:#24292E;"> </span><span style="color:#032F62;">information</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">inspect</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">low-level</span><span style="color:#24292E;"> </span><span style="color:#032F62;">information</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">objects</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">kill</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Kill</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Load</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">archive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">STDIN</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">       </span><span style="color:#032F62;">Log</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  logout      Log out from a Docker registry</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">logs</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Fetch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pause</span><span style="color:#24292E;">       </span><span style="color:#032F62;">Pause</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">processes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">within</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">port</span><span style="color:#24292E;">        </span><span style="color:#032F62;">List</span><span style="color:#24292E;"> </span><span style="color:#032F62;">port</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mappings</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">specific</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mapping</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ps</span><span style="color:#24292E;">          </span><span style="color:#032F62;">List</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pull</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">repository</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">repository</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">rename</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Rename</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">restart</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Restart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">rm</span><span style="color:#24292E;">          </span><span style="color:#032F62;">Remove</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">rmi</span><span style="color:#24292E;">         </span><span style="color:#032F62;">Remove</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">         </span><span style="color:#032F62;">Run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">command</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">archive</span><span style="color:#24292E;"> (streamed </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">STDOUT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Search</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Hub</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">       </span><span style="color:#032F62;">Start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stopped</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">stats</span><span style="color:#24292E;">       </span><span style="color:#032F62;">Display</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">live</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">s</span><span style="color:#24292E;">) </span><span style="color:#032F62;">resource</span><span style="color:#24292E;"> </span><span style="color:#032F62;">usage</span><span style="color:#24292E;"> </span><span style="color:#032F62;">statistics</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Stop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">tag</span><span style="color:#24292E;">         </span><span style="color:#032F62;">Create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tag</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TARGET_IMAGE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">refers</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">SOURCE_IMAGE</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">top</span><span style="color:#24292E;">         </span><span style="color:#032F62;">Display</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">processes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">unpause</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Unpause</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;"> </span><span style="color:#032F62;">processes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">within</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">      </span><span style="color:#032F62;">Update</span><span style="color:#24292E;"> </span><span style="color:#032F62;">configuration</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">version</span><span style="color:#24292E;">     </span><span style="color:#032F62;">Show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">information</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">wait</span><span style="color:#24292E;">        </span><span style="color:#032F62;">Block</span><span style="color:#24292E;"> </span><span style="color:#032F62;">until</span><span style="color:#24292E;"> </span><span style="color:#032F62;">one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containers</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">then</span><span style="color:#24292E;"> </span><span style="color:#032F62;">print</span><span style="color:#24292E;"> </span><span style="color:#032F62;">their</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">codes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器开启时的配置" tabindex="-1"><a class="header-anchor" href="#容器开启时的配置" aria-hidden="true">#</a> 容器开启时的配置</h3><p>先参考一个深度学习容器开启的命令</p><p><code>docker run -i -d -v /export/username/:/export/username/ --name=tf_img_cls --net=host --runtime=nvidia -e NVIDIA_VISIBLE_DEVICE=0 ai-image.jdcloud.com</code></p><p>不同镜像开启需要的配置不同，一般通过 -e 传递。</p><p><code>-p</code> 建立容器与宿主机的端口映射，可以同时配置多个端口。如下，我们在宿主机上通过访问 666 端口来访问容器上部署的 nginx。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># -p 配置容器的端口，可以同时配置多个端口</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">666</span><span style="color:#032F62;">:80</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:666</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-e</code> 容器环境配置，不同容器环境配置不同。如下 es 的环境配置为内存限制。NVIDIA 容器 -e 可以配置指定显卡。 <strong>具体的 -e 传参应该参考容器发布者提供的信息。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">elasticsearch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9200</span><span style="color:#032F62;">:9200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9300</span><span style="color:#032F62;">:9300</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;discovery.type=single-node&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">elasticsearch:7.6.2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-v</code> 挂载数据卷，具体参考[下方](# 容器数据卷)</p><p><code>--net</code> 容器网络，具体参考[下方](# docker 网络)</p><p>portainer 可视化面板可以玩玩</p><h2 id="镜像讲解" tabindex="-1"><a class="header-anchor" href="#镜像讲解" aria-hidden="true">#</a> 镜像讲解</h2><p>镜像获得途径：</p><ul><li>docker pull</li><li>通过朋友给你的 dockerfile 构建</li></ul><h3 id="镜像加载原理" tabindex="-1"><a class="header-anchor" href="#镜像加载原理" aria-hidden="true">#</a> 镜像加载原理</h3><p><strong>UnionFs（联合文件系统）</strong> ：Union 文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>docker 的镜像</strong> 实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。 boots(boot file system）主要包含 bootloader 和 Kernel, bootloader 主要是引导加 kernel, Linux 刚启动时会加 bootfs 文件系统，在 Docker 镜像的最底层是 boots。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加載器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。 rootfs（root file system),在 bootfs 之上。包含的就是典型 Linux 系统中的/dev,/proc,/bin,/etc 等标准目录和文件。 rootfs 就是各种不同的操作系统发行版，比如 Ubuntu, Centos 等等。</p><p>Docker 镜像都是只读的，当容器启动（run）时，一个新的可写层加载到镜像的顶部！这一层就是我们通常说的容器层，容器之下的都叫镜像层！因此我们所做的操作都是基于容器层的。</p><h4 id="commit-镜像" tabindex="-1"><a class="header-anchor" href="#commit-镜像" aria-hidden="true">#</a> commit 镜像</h4><p>docker commit 来保存当前容器的状态。下词可以直接通过加载对应的镜像来开启保存的容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m=</span><span style="color:#032F62;">&quot;描述信息&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a=</span><span style="color:#032F62;">&quot;作者&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">目标镜像名:[TAG]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器数据卷" tabindex="-1"><a class="header-anchor" href="#容器数据卷" aria-hidden="true">#</a> 容器数据卷</h2><p>docker 将应用和环境打包成环境，但是并不用于保存数据。将数据存储与本地，也可以实现容器间的数据共享。</p><h3 id="使用数据卷" tabindex="-1"><a class="header-anchor" href="#使用数据卷" aria-hidden="true">#</a> 使用数据卷</h3><p>将主机上的文件挂在到容器上，两个文件的内容会自动同步。在创建容器时候制定 -v ，后续开启容器就不需要 -v 操作了。</p><p><code>docker run -it -v 主机目录：容器内目录</code></p><h4 id="mysql-案例" tabindex="-1"><a class="header-anchor" href="#mysql-案例" aria-hidden="true">#</a> Mysql 案例</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 参考官网 hub </span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">some-mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYSQL_ROOT_PASSWORD=my-secret-pw</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql:tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3306</span><span style="color:#032F62;">:3306</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/mysql/conf:/etc/mysql/conf.d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/mysql/data:/var/lib/mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYSQL_ROOT_PASSWORD=</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql01</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql:5.7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="挂载卷的不同方式" tabindex="-1"><a class="header-anchor" href="#挂载卷的不同方式" aria-hidden="true">#</a> 挂载卷的不同方式</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器内路径</span><span style="color:#24292E;">			 </span><span style="color:#6A737D;"># 方式一：没有提供容器外路径</span></span>
<span class="line"><span style="color:#6F42C1;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">卷名：容器内路径</span><span style="color:#24292E;">		   </span><span style="color:#6A737D;"># 方式二：挂载时候提供了名称，没有提供路径</span></span>
<span class="line"><span style="color:#6F42C1;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">宿主机路径：容器内路径</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 方式三</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式一：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx01</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 查看所有的 volume 的情况，可以查看到容器外路径为随即分配的 16 进制数</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6F42C1;">DRIVER</span><span style="color:#24292E;">              </span><span style="color:#032F62;">VOLUME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NAME</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">33</span><span style="color:#032F62;">ae588fae6d34f511a769948f0d3d123c9d45c442ac7728cb85599c2657e50d</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx02</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">juming-nginx:/etc/nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;">                  </span></span>
<span class="line"><span style="color:#6F42C1;">DRIVER</span><span style="color:#24292E;">              </span><span style="color:#032F62;">VOLUME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NAME</span></span>
<span class="line"><span style="color:#D73A49;">local</span><span style="color:#24292E;">               </span><span style="color:#032F62;">juming-nginx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 通过 -v 卷名：容器内路径</span></span>
<span class="line"><span style="color:#6A737D;"># 查看一下这个卷</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">卷名</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数情况都使用方式二， 所有的 docker 容器内的卷，没有指定目录的情况下都是在 <code>/var/lib/docker/volumes/xxxx/_data </code>下</p><p>方式三：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx03</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/nginx:/etc/nginx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#6A737D;"># 通过 docker volume ls 查看不到卷信息</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置卷的读写权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx05</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">juming:/etc/nginx:ro</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#6A737D;"># ro 只能通过宿主机改变卷数据</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx05</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">juming:/etc/nginx:rw</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据卷容器" tabindex="-1"><a class="header-anchor" href="#数据卷容器" aria-hidden="true">#</a> 数据卷容器</h3><p>容器二使用与容器一相同的数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker02</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--volumes-from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker-1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image_name</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h2><p>公开端口，根据 <code>docker inspect</code> 中的 <code>config.ExportPort</code> 可以查看到暴露端口情况。一般可以通过 dockerfile 中配置 <code>EXPOSE 80</code> （更像是一个文档注释，说明 80 端口被监听）。</p><p>公开不会立即产生任何影响。该语句仅表示容器内的应用程序侦听端口<code>80</code>。它不会向世界开放该端口或明确提供对任何其他容器的访问。</p><p>作为镜像作者，列出工作负载使用的<code>EXPOSE</code>端口有助于用户在启动容器时配置适当的端口转发规则。这在使用非标准端口时尤为重要：虽然可以预期 Web 服务器侦听端口 80，但用户将无法猜测自定义套接字服务器使用的端口。</p><p>再创建容器的时候使用 <code>-p</code> 操作，将本机端口与容器绑定。</p><h2 id="构建-dockerfile" tabindex="-1"><a class="header-anchor" href="#构建-dockerfile" aria-hidden="true">#</a> 构建 Dockerfile</h2><p>Dockerfile 是用来构建 docker 镜像的构建文件。</p><p>构建步骤：</p><p>1、 编写一个 dockerfile 文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run 运行镜像</p><p>4、 docker push 发布镜像（DockerHub 、阿里云仓库)</p><h3 id="编写-dockerfile" tabindex="-1"><a class="header-anchor" href="#编写-dockerfile" aria-hidden="true">#</a> 编写 dockerfile</h3><p>dockerfile 命令</p><blockquote><p>FROM # 基础镜像，一切从这里开始构建 MAINTAINER # 镜像是谁写的， 姓名+邮箱 RUN # 镜像构建的时候需要运行的命令 ADD # 步骤，tomcat 镜像，这个 tomcat 压缩包！添加内容 添加同目录 WORKDIR # 镜像的工作目录 VOLUME # 挂载的目录 EXPOSE # 保留端口配置 CMD # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。 ENTRYPOINT # 指定这个容器启动的时候要运行的命令，可以追加命令 ONBUILD # 当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令。 COPY # 类似 ADD，将我们文件拷贝到镜像中 ENV # 构建的时候设置环境变量！</p></blockquote><p>编写 dockerfile 示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos</span></span>
<span class="line"><span style="color:#6F42C1;">MAINTAINER</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myname</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">myemai</span><span style="color:#24292E;">l</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYPATH</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local</span></span>
<span class="line"><span style="color:#6F42C1;">WORKDIR</span><span style="color:#24292E;"> $MYPATH</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">VOLUME</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;volume01&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;volume02&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 生成镜像时候自动挂载的数据卷，匿名挂载</span></span>
<span class="line"><span style="color:#6A737D;"># 如果创建的时候没有挂载，那么后续需要手动挂载</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">RUN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yum</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vim</span></span>
<span class="line"><span style="color:#6F42C1;">RUN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yum</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">net-tools</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">EXPOSE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">CMD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> $MYPATH</span></span>
<span class="line"><span style="color:#6F42C1;">CMD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-----end----&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">CMD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMD 与 ENTRYPOINT 区别</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># dockerfile</span></span>
<span class="line"><span style="color:#6F42C1;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos</span></span>
<span class="line"><span style="color:#6F42C1;">CMD</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;ls&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;-a&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像" aria-hidden="true">#</a> 构建镜像</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 如果传入了 tag 参数，那么打开时也需要使用 tag 参数</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dockerfile1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image_name:tag</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dockerfile1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cmd-test:1.0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建成功后运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cmd-test:1.0</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 输出 ls -a</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cmd-test:1.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 报错 -l 不是命令</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cmd-test:1.0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 原先的 ls -a 会被替换为 ls -l</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上为 <code>CMD</code> 指令的特点，相对的 <code>ENTRYPOINT</code> 就不会被覆盖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># dockerfile 中编写以下内容</span></span>
<span class="line"><span style="color:#6F42C1;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos</span></span>
<span class="line"><span style="color:#6F42C1;">ENTRYPOINT</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;ls&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;-a&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建立后测试 <code>ENTRYPOINT</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dockerfile1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ep-test:1.0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ep-test:1.0</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 输出 ls -a</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ep-test:1.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-l</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 输出 ls -al</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 dockerfile 案例二</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">FROM</span><span style="color:#24292E;"> </span><span style="color:#032F62;">centos</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#6F42C1;">MAINTAINER</span><span style="color:#24292E;"> </span><span style="color:#032F62;">name</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">mail@qq.co</span><span style="color:#24292E;">m</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">COPY</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/README</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#复制文件</span></span>
<span class="line"><span style="color:#6F42C1;">ADD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jdk-8u231-linux-x64.tar.gz</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#复制后自动解压</span></span>
<span class="line"><span style="color:#6F42C1;">ADD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apache-tomcat-9.0.35.tar.gz</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#复制解压</span></span>
<span class="line"><span style="color:#6F42C1;">RUN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yum</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vim</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYPATH</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置环境变量</span></span>
<span class="line"><span style="color:#6F42C1;">WORKDIR</span><span style="color:#24292E;"> $MYPATH </span><span style="color:#6A737D;">#设置工作目录</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">JAVA_HOME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/jdk1.8.0_231</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置环境变量</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CATALINA_HOME</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/apache-tomcat-9.0.35</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置环境变量</span></span>
<span class="line"><span style="color:#6F42C1;">ENV</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PATH</span><span style="color:#24292E;"> $PATH</span><span style="color:#032F62;">:</span><span style="color:#24292E;">$JAVA_HOME</span><span style="color:#032F62;">/bin:</span><span style="color:#24292E;">$CATALINA_HOME</span><span style="color:#032F62;">/lib</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置环境变量 分隔符是：</span></span>
<span class="line"><span style="color:#6F42C1;">EXPOSE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#设置暴露的端口</span></span>
<span class="line"><span style="color:#6F42C1;">CMD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/apache-tomcat-9.0.35/bin/startup.sh</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">tail</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-F</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/apache-tomcat-9.0.35/logs/catalina.out</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 设置默认命令</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从容器创建镜像" tabindex="-1"><a class="header-anchor" href="#从容器创建镜像" aria-hidden="true">#</a> 从容器创建镜像</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;comment&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;author&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container_id</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new_image_name:tag</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器 <code>run</code> 时候的配置信息都将被移除，改在路径下的文件不会保留。</p><h3 id="发布自己的镜像" tabindex="-1"><a class="header-anchor" href="#发布自己的镜像" aria-hidden="true">#</a> 发布自己的镜像</h3><p>首先登陆</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">docker login -u kevinng77</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>制作镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">docker build -t kevin/mytomcat:0.1</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提交 push 镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">docker push kevin/mytomcat:0.1</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="docker-网络" tabindex="-1"><a class="header-anchor" href="#docker-网络" aria-hidden="true">#</a> docker 网络</h2>`,114),v={href:"https://www.cnblogs.com/bakari/p/10613710.html",target:"_blank",rel:"noopener noreferrer"},F=o(`<p>因此容器都通过接口链接到网关 docker0，实现了相互通信。</p><figure><img src="https://img-blog.csdnimg.cn/20191208165648271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3NjEwMzY=,size_16,color_FFFFFF,t_70" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过 <code>--link</code> 可以在 hosts 配置中添加映射，实现使用容器名称代替 ip：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ubuntu02</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--link</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ubuntu03</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ubuntu</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 ubuntu02 中可以使用 <code>ping ubuntu03</code> 。不建议使用 link</p><h4 id="自定义网络" tabindex="-1"><a class="header-anchor" href="#自定义网络" aria-hidden="true">#</a> 自定义网络</h4><p><code>docker network</code> 相关命令： <code>connect</code> Connect a container to a network <code>create</code> Create a network <code>disconnect</code> Disconnect a container from a network <code>inspect</code> Display detailed information on one or more networks <code>ls</code> List networks <code>prune</code> Remove all unused networks <code>rm</code> Remove one or more networks</p><p><code>docekr network ls</code> 查看网络模式，包括 <code>bridge</code> 桥接 docker（默认），<code>none</code> 不配置网络，<code>host</code> 和宿主机共享网络。自定义网络：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--driver</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bridge</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--subnet</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.0.0/16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--getway</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.0.1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mynet</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>自定义的网络不需要 <code>--link</code> 也可以使用容器名称 <code>ping</code> 。不同集群使用不同的网络。<code>docekr network connect mynet container </code> 将容器加入到某个网络中</p><h3 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h3>`,11),m={href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"dockerfile",-1),h=s("code",null,"docker-compose.yml",-1),C=s("code",null,"docker-compose up",-1),g=o(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3.9&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># optional since v1.27.0</span></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">web</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">build</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;5000:5000&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">.:/code</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">logvolume01:/var/log</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">links</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">redis</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">redis</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">redis</span></span>
<span class="line"><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">logvolume01</span><span style="color:#24292E;">: {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k=s("code",null,"web",-1),f=s("code",null,"redis",-1),x=s("code",null,"build",-1),A=s("code",null,"image",-1),D=s("br",null,null,-1),_={href:"https://docs.docker.com/compose/compose-file/compose-file-v3/",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"depends_on",-1),q=s("code",null,"deploys",-1),N=s("code",null,"expose",-1),M=o('<p>后台运行 <code>docker-compose up -d</code> 包括网络配置，自动下载依赖镜像， 建立 dockerfile 镜像，启动 <strong>全部服务</strong> 。使用 <code>docker-compose down </code>结束所有服务（容器）。<code>docker-compose ps</code> 查看所有 compose 进程。 <code>docker-compose run web env</code></p><h4 id="docker-swarm" tabindex="-1"><a class="header-anchor" href="#docker-swarm" aria-hidden="true">#</a> docker Swarm</h4>',2),R={href:"https://docs.docker.com/engine/swarm/",target:"_blank",rel:"noopener noreferrer"},j=o(`<blockquote><p><code>docker swarm</code> Commands: ca Display and rotate the root CA init Initialize a swarm join Join a swarm as a node and/or manager join-token Manage join tokens leave Leave the swarm unlock Unlock swarm unlock-key Manage the unlock key update Update the swarm</p></blockquote><p>Swarm 分为主节点、副节点 初始化 Swarm 主节点：<code>docker swarm init --advertise-addr 私网 ip</code> 其他机器加入节点：<code>docker swarm join --token xxxxx</code> 在主节点上通过 <code>docker swarm join-token manager</code> 或 <code>docker swarm join-token worker</code> 生成 token。</p><p>保证至少 2 个管理节点存活才可用。集群需要 3 个以上主节点。</p><h5 id="docker-service" tabindex="-1"><a class="header-anchor" href="#docker-service" aria-hidden="true">#</a> docker service</h5><p>启动服务：<code>docker service create -p 8888:80 --name new_service images</code> ，服务会在随机的集群机器上运行。</p><p>服务扩缩容：<code>docker service update --replicas 3 new_service new_service</code> 在 3 个机器上运行 new_service 服务。等于 <code>docker service scale new_service=3</code></p><p>其他相关命令：<code>docker stack</code> 部署集群，<code>docker secret</code> 证书相关，<code>docker config</code> 等</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>jupyter notebook 再使用的时候需要配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">jupyter notebook </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">generate</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#docker 中使用 ipython 生成密码</span></span>
<span class="line"><span style="color:#24292E;">In [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]: </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> notebook.auth </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> passwd</span></span>
<span class="line"><span style="color:#24292E;">In [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]: passwd()</span></span>
<span class="line"><span style="color:#24292E;">Enter password:  </span><span style="color:#6A737D;"># 这个密码再后来宿主机登陆时候需要</span></span>
<span class="line"><span style="color:#24292E;">Verify password:   </span><span style="color:#6A737D;"># 宿主机登陆 localhost:8888</span></span>
<span class="line"><span style="color:#24292E;">Out[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]: </span><span style="color:#032F62;">&#39;sha1:38a5ecdf288b:c82dace8d3c7a212ec0bd49bbb99c9af3bae076e&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#去配置文件.jupyter/jupyter_notebook_config.py 中修改以下参数</span></span>
<span class="line"><span style="color:#24292E;">c.NotebookApp.ip</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;">#绑定所有地址</span></span>
<span class="line"><span style="color:#24292E;">c.NotebookApp.password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">u</span><span style="color:#032F62;">&#39;刚才生成的密码&#39;</span></span>
<span class="line"><span style="color:#24292E;">c.NotebookApp.open_browser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">            </span><span style="color:#6A737D;">#启动后是否在浏览器中自动打开</span></span>
<span class="line"><span style="color:#24292E;">c.NotebookApp.port </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">8888</span><span style="color:#24292E;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jupyterlab" tabindex="-1"><a class="header-anchor" href="#jupyterlab" aria-hidden="true">#</a> jupyterlab</h3><p><code>pip install jupyterlab</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">jupyter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lab</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--generate-config</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://pypi.tuna.tsinghua.edu.cn/simple/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jupyterlab-language-pack-zh-CN</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jupyterlab-lsp==</span><span style="color:#005CC5;">3.2</span><span style="color:#032F62;">.0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jupyter-lsp==</span><span style="color:#005CC5;">1.1</span><span style="color:#032F62;">.1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jupyterlab_code_formatter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python-language-server[all]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">black</span><span style="color:#24292E;"> </span><span style="color:#032F62;">isort</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改默认终端</span></span>
<span class="line"><span style="color:#6F42C1;">vim</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/root/.jupyter/</span></span>
<span class="line"><span style="color:#6F42C1;">c.ServerApp.terminado_settings</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{&#39;shell_command&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;/bin/bash&#39;</span><span style="color:#24292E;">]}</span></span>
<span class="line"><span style="color:#6A737D;"># 设置登录密码</span></span>
<span class="line"><span style="color:#6F42C1;">jupyter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">password</span><span style="color:#24292E;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">jupyter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lab</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--notebook-dir=/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ip=</span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--port=8888</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--allow-root</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--no-browser</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),O={href:"https://www.zhihu.com/question/354593673",target:"_blank",rel:"noopener noreferrer"},I=o(`<h3 id="jupyterhub" tabindex="-1"><a class="header-anchor" href="#jupyterhub" aria-hidden="true">#</a> jupyterhub</h3><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodejs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span></span>
<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">conda-forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jupyterhub</span></span>
<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jupyterlab</span><span style="color:#24292E;"> </span><span style="color:#032F62;">notebook</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>jupyterhub --generate-config</code> 生成配置文件</p><p>修改配置文件信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">c.JupyterHub.ip</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;0.0.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">c.JupyterHub.port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">443</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">c.JupyterHub.admin_access </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">c.JupyterHub.admin_user</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;kevin&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">c.Authenticator.admin_users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;kevin&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">c.Spawner.notebook_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;~&quot;</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 用户登录时，显示的 root dir</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jupyterhub 使用的用户和 linux 是对应的，添加用户：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">useradd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stu01</span></span>
<span class="line"><span style="color:#6F42C1;">passwd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stu01</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 root 启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">su</span></span>
<span class="line"><span style="color:#6F42C1;">jupyterhub</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ubuntu-下移动默认储存位置" tabindex="-1"><a class="header-anchor" href="#ubuntu-下移动默认储存位置" aria-hidden="true">#</a> ubuntu 下移动默认储存位置</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">service</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vim</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/systemd/system/multi-user.target.wants/docker.service</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 将 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 修改以下内容：</span></span>
<span class="line"><span style="color:#24292E;">ExecStart</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/usr/bin/dockerd</span><span style="color:#24292E;"> --graph</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/home/data/docker</span><span style="color:#24292E;"> --storage-driver</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">overlay2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 docker 服务</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">sudo systemctl daemon</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">reload</span></span>
<span class="line"><span style="color:#24292E;">sudo systemctl restart docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他参考" tabindex="-1"><a class="header-anchor" href="#其他参考" aria-hidden="true">#</a> 其他参考</h2>`,16),P={href:"https://bbs.huaweicloud.com/blogs/133713",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker",target:"_blank",rel:"noopener noreferrer"},T={href:"https://bluesmilery.github.io/blogs/252e6902/",target:"_blank",rel:"noopener noreferrer"};function L(V,U){const a=e("ExternalLinkIcon");return c(),r("div",null,[y,d,u,t("more"),E,s("p",null,[n("Docker 启动会默认创建 docker0 虚拟网桥，是 Linux 的一个 bridge，可以理解成一个软件交换机。它会在挂载到它的网口之间进行转发。之后所有容器都是在 172.17.0.x 的网段。当创建一个 Docker 容器的时候，同时会创建一对 veth pair。"),s("a",v,[n("Linux 虚拟网络设备 veth-pair 详解，看这一篇就够了"),l(a)]),n("。")]),F,s("p",null,[n("Docker Compose "),s("a",m,[n("文档"),l(a)]),n("。准备好 "),b,n(", "),h,n("（如下），使用 "),C,n(" 运行。")]),g,s("p",null,[n("version 对应 docker 版本，services 中配置各个容器，如上有 "),k,n("，"),f,n(" 两个项目。 "),x,n(" 即通过 docker build 构建镜像，或者使用 "),A,n(" 使用已有镜像。"),D,s("a",_,[n("其他参数"),l(a)]),n(" 比较常用的有 "),w,n(", "),q,n(", "),N,n(" 等。")]),M,s("p",null,[s("a",R,[n("文档"),l(a)]),n(" 小规模服务可以使用 swarm 实现，规模大时考虑 k8s")]),j,s("p",null,[s("a",O,[n("其他插件"),l(a)])]),I,s("p",null,[s("a",P,[n("Docker 部署深度学习环境"),l(a)]),s("a",S,[n("nvidia docker"),l(a)]),s("a",T,[n("nvidia docker 及训练环境配置文档"),l(a)])])])}const z=p(i,[["render",L],["__file","笔记docker.html.vue"]]);export{z as default};
