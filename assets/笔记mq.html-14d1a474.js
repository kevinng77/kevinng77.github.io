import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as r,a as s,b as n,d as l,f as e}from"./app-bbaf15d7.js";const i={},t=e('<h1 id="message-queue" tabindex="-1"><a class="header-anchor" href="#message-queue" aria-hidden="true">#</a> Message Queue</h1><p>MQ 选型</p><p>当消息量不大时 RabbitMQ 效果挺不错。但 RabbitMQ 的 erlang 导致他 debug 成本高。相对的 Kafka，rocketMQ 的分布式+支持堆积消息优势性大。但似乎 rabbitMQ 更容易部署。</p><h1 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h1><h2 id="rabbitmq-安装" tabindex="-1"><a class="header-anchor" href="#rabbitmq-安装" aria-hidden="true">#</a> RabbitMQ 安装</h2>',5),d={href:"https://www.rabbitmq.com/getstarted.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rabbitmq</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">RABBITMQ_DEFAULT_USER=kevin</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">RABBITMQ_DEFAULT_PASS=</span><span style="color:#005CC5;">777777</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5672</span><span style="color:#032F62;">:5672</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15672</span><span style="color:#032F62;">:15672</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rabbitmq:3-management</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问 UI 管理界面：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">http://192.168.1.104:15672/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>python 客户端安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pika</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--upgrade</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h3><p>最基础的消息队列架构为：</p><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-one-overall.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中由生产者、队列、消费者组成。</p><p>基础生产者需要：</p><ol><li>建立链接</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pika, sys, os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 建立链接</span></span>
<span class="line"><span style="color:#24292E;">    credentials </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pika.PlainCredentials(</span><span style="color:#E36209;">username</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;kevin&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">password</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;777777&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pika.BlockingConnection(pika.ConnectionParameters(</span><span style="color:#032F62;">&#39;localhost&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">credentials</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">credentials))</span></span>
<span class="line"><span style="color:#24292E;">    channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.channel()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),u={start:"2"},b={href:"https://www.rabbitmq.com/queues.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">    channel.queue_declare(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#E36209;">durable</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;"># 队列里面的消息是否化磁盘) 默认况消息存储在内存中</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#E36209;">exclusive</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;"># 该队列是否只供一个消费者进行消费 是否进行消息共享，true 可以多个消费者消费 false:只能一个消费者消费</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#E36209;">auto_delete</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 是否自动删除 最后一个消费者端开连接以后 该队一句是否自动删除 true 自动删除 false 不自动删除</span></span>
<span class="line"><span style="color:#24292E;">                        )</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>发送消息：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 通过 exchange 将消息发送到 queue</span></span>
<span class="line"><span style="color:#6A737D;"># 因为是 hello world 教程，我们在这里直接将消息发送到队列中。</span></span>
<span class="line"><span style="color:#6A737D;"># If we send a message to non-existing location, RabbitMQ will just drop the message.</span></span>
<span class="line"><span style="color:#24292E;">channel.basic_publish(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;"># The queue name needs to be specified here</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Hello World!&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>接收端</li></ol><details class="hint-container details"><summary>基础消费者</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env python</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pika, sys, os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 建立链接等操作与 sender 相同</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(ch, method, properties, body):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot; [x] Received </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">body</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    channel.basic_consume(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#E36209;">auto_ack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#E36209;">on_message_callback</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">callback)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; [*] Waiting for messages. To exit press CTRL+C&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    channel.start_consuming()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="work-queue" tabindex="-1"><a class="header-anchor" href="#work-queue" aria-hidden="true">#</a> work queue</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-two.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>多个工作者轮询接收并处理消息，每个消息准确地被处理一次。</p><h4 id="消息丢失处理" tabindex="-1"><a class="header-anchor" href="#消息丢失处理" aria-hidden="true">#</a> 消息丢失处理</h4>`,9),v={href:"https://www.rabbitmq.com/confirms.html",target:"_blank",rel:"noopener noreferrer"},E=e(`<p>在使用 RabbitMQ 时，如果工作进程在任务完成前终止，可能会导致消息丢失。为防止这种情况，RabbitMQ 提供了消息确认机制。消费者处理完消息后，需要向 RabbitMQ 发送确认（ack）。如果消费者在未发送确认的情况下死亡，RabbitMQ 会重新排队这些消息，并可能分配给其他在线消费者。</p><p>默认情况下，消息确认是手动的。在之前的示例中，我们通过设置 <code>auto_ack=True</code> 来关闭此功能，但现在应该移除此标志，并在任务完成后发送确认。以下是一个示例代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(ch, method, properties, body):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot; [x] Received </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">body.decode()</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(body.count(</span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; [x] Done&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ch.basic_ack(</span><span style="color:#E36209;">delivery_tag</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.delivery_tag)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">channel.basic_consume(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">on_message_callback</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">callback)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样即使在处理消息时强行终止工作进程，也不会丢失消息。确认必须通过接收消息的同一通道发送，否则会导致协议异常。</p><ol start="2"><li><strong>消息持久化</strong></li></ol><p>为防止 RabbitMQ 服务器停止时任务丢失，需将队列和消息标记为持久化。首先，声明队列为持久化：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.queue_declare(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">durable</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果已有同名非 <strong>持久化队列</strong> ，需使用不同名称，例如 <code>task_queue</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.queue_declare(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;task_queue&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">durable</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此更改需同时应用于生产者和消费者代码。接下来，将 <strong>消息标记为持久化</strong> ，设置 <code>delivery_mode</code> 为 <code>pika.spec.PERSISTENT_DELIVERY_MODE</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.basic_publish(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;task_queue&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">message,</span></span>
<span class="line"><span style="color:#24292E;">                      </span><span style="color:#E36209;">properties</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pika.BasicProperties(</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#E36209;">delivery_mode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pika.spec.</span><span style="color:#005CC5;">PERSISTENT_DELIVERY_MODE</span></span>
<span class="line"><span style="color:#24292E;">                      ))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，即使消息标记为持久化，也无法完全保证不丢失，因为 RabbitMQ 可能未立即将消息保存到磁盘。如需更强保证，可使用发布者确认机制。</p><ol start="3"><li><strong>轮询策略</strong></li></ol><p>换句话说，直到工作者处理并确认了前一个消息之前，不要向其分发新消息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># worker 中定义</span></span>
<span class="line"><span style="color:#24292E;">channel.basic_qos(</span><span style="color:#E36209;">prefetch_count</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="交换机-exchange" tabindex="-1"><a class="header-anchor" href="#交换机-exchange" aria-hidden="true">#</a> 交换机 Exchange</h2><h3 id="发布订阅模式-fanout-交换机" tabindex="-1"><a class="header-anchor" href="#发布订阅模式-fanout-交换机" aria-hidden="true">#</a> 发布订阅模式（fanout 交换机）</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/exchanges.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>RabbitMQ 的核心：生产者不直接向队列发送消息，而是只能发送到交换机。</p><p>交换机类型包括 <code>direct</code>, <code>topic</code>, <code>headers</code> and <code>fanout</code>。我们关注 <code>fanout</code> 类型（用于广播），创建一个名为 <code>logs</code> 的交换机：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.exchange_declare(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exchange_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;fanout&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发送端" tabindex="-1"><a class="header-anchor" href="#发送端" aria-hidden="true">#</a> 发送端</h4><p>扇出交换机将消息广播到所有队列。</p><p>我们之前使用的是默认交换机（用空字符串 &quot;&quot; 表示），它将消息路由到指定名称的队列。现在，我们改为使用命名的交换机 <code>logs</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.basic_publish(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">message)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用发送确认：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Turn on delivery confirmations</span></span>
<span class="line"><span style="color:#24292E;">channel.confirm_delivery()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    channel.basic_publish(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Hello World!&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#E36209;">properties</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pika.BasicProperties(</span><span style="color:#E36209;">content_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                          </span><span style="color:#E36209;">delivery_mode</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pika.DeliveryMode.Transient)):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Message publish was confirmed&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">except</span><span style="color:#24292E;"> pika.exceptions.UnroutableError:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Message could not be confirmed&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接收端" tabindex="-1"><a class="header-anchor" href="#接收端" aria-hidden="true">#</a> 接收端</h4><p>在接收端，需要定义一个 queue 来绑定到对应的 exchange 上。</p><ol><li>定义一个临时队列</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">result</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">channel.queue_declare</span><span style="color:#24292E;">(queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;,</span><span style="color:#24292E;"> exclusive</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>绑定 queue 和 exchange</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.queue_bind(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;logs&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                   </span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">result.method.queue)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="routing-路由-direct-交换机" tabindex="-1"><a class="header-anchor" href="#routing-路由-direct-交换机" aria-hidden="true">#</a> Routing 路由（direct 交换机）</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-four.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>使用 direct 模式时，队列可以和交换机绑定。该模式下，可以自由指定哪些消息要去到哪个队列。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以想象交换机为一个 mapping，其中储存了 <code>routing_key:queue</code> 的键值对。</p></div><h4 id="通道配置" tabindex="-1"><a class="header-anchor" href="#通道配置" aria-hidden="true">#</a> 通道配置</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.exchange_declare(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;direct_logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exchange_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;direct&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发送端-1" tabindex="-1"><a class="header-anchor" href="#发送端-1" aria-hidden="true">#</a> 发送端</h4><p>比如往 <code>direct_logs</code> 交换机发送 <code>info</code> 类型的信息。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.basic_publish(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;direct_logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;info&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">message)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接收端-1" tabindex="-1"><a class="header-anchor" href="#接收端-1" aria-hidden="true">#</a> 接收端</h4><p>首先定义 exchange 和 queue：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.exchange_declare(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;direct_logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exchange_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;direct&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.queue_declare(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exclusive</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">queue_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.method.queue</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定 exchange 和 queue，让这个 queue 接受 <code>info</code> 类型的信息：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.queue_bind(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;direct_logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">queue_name, </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;info&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个队列可以和交换机绑定多个 <code>routing_key</code>。绑定多个 <code>routing_key</code> 需要多次调用 <code>channel.queue_bind</code>。</p><h3 id="主题模式-topic-交换机" tabindex="-1"><a class="header-anchor" href="#主题模式-topic-交换机" aria-hidden="true">#</a> 主题模式（topic 交换机）</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-five.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>相对于 direct 交换机模式，一个 queue 可以用不同的 tag 来命名，比如一个 queue 可以命名为 <code>&lt;celerity&gt;.&lt;color&gt;.&lt;species&gt;</code>，其中包含三种 tag。topic 模式让我们能够使用 <code>*</code>（匹配任意 1 个 tag）, <code>#</code>（匹配 0+ 个任意的 tag） 对 tag 进行匹配。</p><p>比如发布到 <code>lazy.orange.rabbit</code> 的消息会被主题 <code>*.orange.*</code> 接收到。</p><h4 id="通道配置-1" tabindex="-1"><a class="header-anchor" href="#通道配置-1" aria-hidden="true">#</a> 通道配置</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">channel.exchange_declare(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;topic_logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exchange_type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;topic&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="发送方" tabindex="-1"><a class="header-anchor" href="#发送方" aria-hidden="true">#</a> 发送方</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">routing_key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;lazy.orange.rabbit&quot;</span></span>
<span class="line"><span style="color:#24292E;">channel.basic_publish(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;topic_logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">routing_key, </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">message)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接收端-2" tabindex="-1"><a class="header-anchor" href="#接收端-2" aria-hidden="true">#</a> 接收端</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 声明任意的队列</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.queue_declare(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exclusive</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">queue_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.method.queue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 绑定队列到对应的 binding_key</span></span>
<span class="line"><span style="color:#24292E;">binding_key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*.orange.*&quot;</span></span>
<span class="line"><span style="color:#24292E;">channel.queue_bind(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;topic_logs&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">queue_name, </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">binding_key)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc" aria-hidden="true">#</a> RPC</h3><figure><img src="https://www.rabbitmq.com/assets/img/tutorials/python-six.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当接收方的 worker 需要执行 remote server 的代码，并等待执行结果时，我们需要用到 RPC。</p><p>进行远程处理时，需要明确的指出：</p><ul><li>对 remote 消息进行 error handle 处理（比如长时间未回复）</li><li>明确区分 worker 当中的本地执行任务和远程执行任务。</li><li>请做好详细的文档注释</li></ul><h4 id="通道构建" tabindex="-1"><a class="header-anchor" href="#通道构建" aria-hidden="true">#</a> 通道构建</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 服务端定义主通道</span></span>
<span class="line"><span style="color:#24292E;">channel.queue_declare(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;rpc_queue&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h4><p>在这个机器上，我们可能需要运行一些耗时的任务。当接收到 client 发出的消息后，开始任务的工作，而后将工作结果 <code>publish</code> 到回复队列中去。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_request</span><span style="color:#24292E;">(ch, method, props, body):</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(body)</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fib(n)  </span><span style="color:#6A737D;"># run your slow tasks here</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time </span></span>
<span class="line"><span style="color:#24292E;">    time.sleep(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ch.basic_publish(</span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">props.reply_to,  </span><span style="color:#6A737D;"># 特定回复通道</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#E36209;">properties</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pika.BasicProperties(</span><span style="color:#E36209;">correlation_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">                                                         props.correlation_id),</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># 这个执行结果对应的 UUID</span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(response))</span></span>
<span class="line"><span style="color:#24292E;">    ch.basic_ack(</span><span style="color:#E36209;">delivery_tag</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">method.delivery_tag)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">channel.basic_qos(</span><span style="color:#E36209;">prefetch_count</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">channel.basic_consume(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;rpc_queue&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">on_message_callback</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">on_request)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">channel.start_consuming()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 客户端定义回复消息通道</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.channel.queue_declare(</span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exclusive</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.callback_queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.method.queue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 回复通道也需要定义好 on_response 函数，用来接受回复答案。</span></span>
<span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.channel.basic_consume(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.callback_queue,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">on_message_callback</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.on_response,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">auto_ack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#005CC5;">self</span><span style="color:#24292E;">.corr_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">on_response</span><span style="color:#24292E;">(self, ch, method, props, body):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.corr_id </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> props.correlation_id:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(self, n):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 对于每一次 call，都需要一个单独的 UUID 来确保回复答案的准确性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.corr_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(uuid.uuid4())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.channel.basic_publish(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">exchange</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">routing_key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;rpc_queue&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">properties</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pika.BasicProperties(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">reply_to</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.callback_queue,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">correlation_id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.corr_id,</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(n))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wait for response?&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.connection.process_data_events(</span><span style="color:#E36209;">time_limit</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wait for response?&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.response)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="落地推荐" tabindex="-1"><a class="header-anchor" href="#落地推荐" aria-hidden="true">#</a> 落地推荐</h2><h3 id="dlq-死信队列" tabindex="-1"><a class="header-anchor" href="#dlq-死信队列" aria-hidden="true">#</a> DLQ 死信队列</h3>`,72),m={href:"https://www.rabbitmq.com/dlx.html",target:"_blank",rel:"noopener noreferrer"},g=s("ol",null,[s("li",null,"消息 TTL 过期"),s("li",null,"队列达到最大长度"),s("li",null,"消息被拒绝（basic.reject 或 basic.nack） 并且 requeue=false")],-1),f=s("p",null,"pub-sub 模式在实际落地中，建议的操作：",-1),_={href:"https://www.rabbitmq.com/confirms.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.rabbitmq.com/production-checklist.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.rabbitmq.com/monitoring.html",target:"_blank",rel:"noopener noreferrer"};function A(x,k){const a=o("ExternalLinkIcon");return c(),r("div",null,[t,s("p",null,[n("参考"),s("a",d,[n("官网"),l(a)])]),y,s("ol",u,[s("li",null,[n("声明使用的 queue，"),s("a",b,[n("更详细的 queue 指南参考官网"),l(a)])])]),h,s("ol",null,[s("li",null,[s("a",v,[n("message acknowledgement"),l(a)])])]),E,s("p",null,[s("a",m,[n("rabbitMQ 官方"),l(a)])]),g,f,s("ol",null,[s("li",null,[s("a",_,[n("数据安全相关 - Publisher Confirms and Consumer Acknowledgements"),l(a)])]),s("li",null,[s("a",D,[n("Production Checklist"),l(a)])]),s("li",null,[s("a",C,[n("Monitoring"),l(a)]),n(".")])])])}const w=p(i,[["render",A],["__file","笔记mq.html.vue"]]);export{w as default};
