import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as s,b as n,d as c,e as r,f as t}from"./app-c5f67444.js";const i="/assets/img/系统调用/image-20210224144726745.png",y="/assets/img/系统调用/image-20210225130245871.png",d="/assets/img/系统调用/image-20210225130540877.png",v={},u=s("h1",{id:"系统调用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#系统调用","aria-hidden":"true"},"#"),n(" 系统调用")],-1),E=s("p",null,"嵌入式自学开始几个月啦~ 为了自己的贾维斯 ？？？？！！！！！",-1),b=s("p",null,"真想快点了解到计算机和这个世界是怎么运转的，可能只有真的理解了物理原理，才能没有拘束的创造",-1),m={href:"https://www.bilibili.com/video/BV1FA411v7YW?p=530&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},C=t('<h2 id="系统调用-1" tabindex="-1"><a class="header-anchor" href="#系统调用-1" aria-hidden="true">#</a> 系统调用</h2><p>linux 中，通过操作 shell，applications 或 library routines 来操作 system calls，进而调用 kernel 来操作硬件</p><figure><img src="'+i+`" alt="image-20210224144726745" tabindex="0" loading="lazy"><figcaption>image-20210224144726745</figcaption></figure><ul><li>系统调用的返回值 <ul><li>通常，用一个负的返回值来表明错误，返回一个 0 值表明成功。 错误信息存放在全局变量 errno 中，用户可用 perror 函数打印出错信</li></ul></li><li>Linuxzhong ,API 遵循 POSIX 标准</li></ul><h2 id="系统调用-i-o-函数" tabindex="-1"><a class="header-anchor" href="#系统调用-i-o-函数" aria-hidden="true">#</a> 系统调用 I/O 函数</h2><h3 id="文件描述符" tabindex="-1"><a class="header-anchor" href="#文件描述符" aria-hidden="true">#</a> 文件描述符</h3><p>文件描述符是非负整数。打开现存文件或新建文件时，系统（内核）会返回一个文件描述符。文件描述符用来指定已打开的文件。 在系统调用（文件 IO）中，文件描述符对文件起到标识作用，如果要操作文件，就是对文件描述符的操作 当一个程序运行或者一个进程开启时，系统会自动创建三个文件描述符 0 标准输入 1 标准输出 2 标准输出出错</p><p>文件 IO 的文件描述符和标准 IO 的文件指针的对应关系 文件 IO 标准 IO 0 stdin 1 stdout 2 stderr</p><p>如果自己打开文件，会返回文件描述符，而文件描述符一般按照从小到大依次创建的顺序</p><h3 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> Open</h3><p>标准 IO 文件 IO 权限含义</p><table><thead><tr><th>标准 IO</th><th>文件 IO (flags)</th><th>权限含义</th></tr></thead><tbody><tr><td>r</td><td>O_RDONLY</td><td>以只读的方式打开文件，如果文件不存在则报错</td></tr><tr><td>r+</td><td>O_RDWR</td><td>以读写的方式打开文件，如果文件不存在则报错</td></tr><tr><td>w</td><td>O_WRONLY , O_CREAT , O_TRUNC，0664</td><td>以只写的方式打开文件，如果文件不存在则创建，如果文件存在则清空</td></tr><tr><td>w+</td><td>O_RDWR , O_CREAT , O_TRUNC，0664</td><td>以读写的方式打开文件，如果文件不存在则创建，如果文件存在则清空</td></tr><tr><td>a</td><td>O_WRONLY , O_CREAT ,O_APPEND， 0664</td><td>以只写的方式打开文件，如果文件不存在则创建，如果文件存在则追加</td></tr><tr><td>a+</td><td>O_RDWR , O_CREAT , O_APPEND，0664</td><td>以读写的方式打开文件，如果文件不存在则创建，如果文件存在则追加</td></tr></tbody></table><p>使用 C 文件进行操作</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">, O_RDONLY);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">\\\\</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">pathname</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">\\\\</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">pathname</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">mode_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">mode</span><span style="color:#24292E;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数调用出错后输出错误信息" tabindex="-1"><a class="header-anchor" href="#函数调用出错后输出错误信息" aria-hidden="true">#</a> 函数调用出错后输出错误信息</h4><ul><li>错误码信息可以通过<code>cat /usr/include/asm-generic/errno-base.h</code>查询</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">通过全局变量 errno</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;errno.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">errno 是一个全局变量，当函数调用失败后，可以通过 errno 获取错误码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">通常我们会更多的通过一个函数 perror</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">s</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">功能：输出函数调用失败的错误信息</span></span>
<span class="line"><span style="color:#24292E;">参数：</span></span>
<span class="line"><span style="color:#24292E;">s：打印错误信息的提示消息 c</span></span>
<span class="line"><span style="color:#24292E;">返回值：无</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;errno.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">//使用 open 函数打开或者创建一个文件</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd;</span></span>
<span class="line"><span style="color:#24292E;">fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">, O_RDONLY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">//通过全局变量 errno 打印错误码</span></span>
<span class="line"><span style="color:#6A737D;">//注意需要添加头文件 errno.h</span></span>
<span class="line"><span style="color:#6A737D;">//printf(&quot;errno = %d\\n&quot;, errno);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//通过 perror 函数输出函数调用失败的错误信息</span></span>
<span class="line"><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to open&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fd = </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, fd);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="close-函数" tabindex="-1"><a class="header-anchor" href="#close-函数" aria-hidden="true">#</a> Close 函数</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd;</span></span>
<span class="line"><span style="color:#24292E;">fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">, O_RDONLY);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to open&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fd = </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, fd);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//当不对文件进行任何操作时，就会关闭文件描述符</span></span>
<span class="line"><span style="color:#6A737D;">//使用 close 函数关闭文件描述符</span></span>
<span class="line"><span style="color:#6A737D;">//一旦关闭了文件描述符，就不能再通过原有的文件描述符对文件进行操作</span></span>
<span class="line"><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一个进程最多可以创建 1024 个描述符，0-1023</li><li>一但文件被关闭了，最后创建地文件会优先考虑补齐之前被关闭地文件地文件描述符。最后地文件并不一定是最大地。</li></ul><h4 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">//向终端写入数据</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//对 1 这个文件描述符进行操作</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//调用函数要考虑函数调用错误</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//内核地调用没有缓冲区，他会直接对磁盘进行操作</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello world</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to write&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//向文件中写入数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="向文件写入数据" tabindex="-1"><a class="header-anchor" href="#向文件写入数据" aria-hidden="true">#</a> 向文件写入数据</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">//向文件写入数据</span></span>
<span class="line"><span style="color:#6A737D;">//以只写的方式打开文件，如果文件不存在则创建，如果文件存在则清空</span></span>
<span class="line"><span style="color:#24292E;">fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">, O_WRONLY </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> O_CREAT </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> O_TRUNC, </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">664</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fd </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to open&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//使用 write 函数向文件写入数据</span></span>
<span class="line"><span style="color:#6A737D;">//两个等号的优先级大于一个</span></span>
<span class="line"><span style="color:#D73A49;">ssize_t</span><span style="color:#24292E;"> bytes;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">((bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(fd, </span><span style="color:#032F62;">&quot;hello world</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to write&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes = </span><span style="color:#005CC5;">%ld\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, bytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(fd, </span><span style="color:#032F62;">&quot;nihao beijing&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//关闭文件描述符</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read</h4><p>3 功能：从文件中读取数据 4 参数： 5 fd：指定的文件描述符 6 buf：保存读取到的数据 7 count：最大一次读取多少个字节 8 返回值： 9 成功：实际读取的字节数 10 失败：‐1</p><ul><li>读取终端数据</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;fcntl.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">//使用 read 函数从终端读取数据</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//使用 0 文件描述符从终端读取数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//如果终端输入的字节数大于第三个参数</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//则只会读取第三个参数对应的字节数，返回值也是与第三个参数一致</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//如果终端输入的字节数小于第三个参数‘</span></span>
<span class="line"><span style="color:#6A737D;">//则只会读取输入的数据加上换行符，返回值就是实际输入的数据+1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">ssize_t</span><span style="color:#24292E;"> bytes;</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">str</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">((bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, str, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to read&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;str = [</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, str);</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes = </span><span style="color:#005CC5;">%ld\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, bytes);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6A737D;">//注意：如果读取到文件末尾，返回 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从文件读取数据</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">sys</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">types.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">sys</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">stat.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">fcntl.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> #include </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">unistd.h</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">N</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span></span>
<span class="line"><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#005CC5;">9</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">10</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">11</span><span style="color:#6A737D;"> //使用 read 从文件中读取数据</span></span>
<span class="line"><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fd;</span></span>
<span class="line"><span style="color:#005CC5;">13</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">((fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test.txt&quot;</span><span style="color:#24292E;">, O_RDONLY </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> O_CREAT, </span><span style="color:#D73A49;">0</span><span style="color:#005CC5;">664</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">14</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">15</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to open&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">17</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">18</span></span>
<span class="line"><span style="color:#005CC5;">19</span><span style="color:#6A737D;"> //读取文件内容</span></span>
<span class="line"><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">buf</span><span style="color:#24292E;">[N] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ssize_t</span><span style="color:#24292E;"> bytes;</span></span>
<span class="line"><span style="color:#005CC5;">22</span><span style="color:#24292E;"> #</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">((bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(fd, buf, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">24</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">25</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to read&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">27</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">28</span></span>
<span class="line"><span style="color:#005CC5;">29</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;buf = [</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, buf);</span></span>
<span class="line"><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes = </span><span style="color:#005CC5;">%ld\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, bytes);</span></span>
<span class="line"><span style="color:#005CC5;">31</span></span>
<span class="line"><span style="color:#005CC5;">32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">buf1</span><span style="color:#24292E;">[N] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">33</span><span style="color:#24292E;"> bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(fd, buf1, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">34</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;buf1 = [</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, buf1);</span></span>
<span class="line"><span style="color:#005CC5;">35</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes = </span><span style="color:#005CC5;">%ld\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, bytes);</span></span>
<span class="line"><span style="color:#005CC5;">37</span><span style="color:#6A737D;"> //如果文件中的数据都读取完毕，则 read 会返回 0</span></span>
<span class="line"><span style="color:#005CC5;">38</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">buf2</span><span style="color:#24292E;">[N] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">39</span><span style="color:#24292E;"> bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(fd, buf2, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">40</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;buf2 = [</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, buf2);</span></span>
<span class="line"><span style="color:#005CC5;">41</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes = </span><span style="color:#005CC5;">%ld\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, bytes);</span></span>
<span class="line"><span style="color:#005CC5;">42</span><span style="color:#24292E;"> #endif</span></span>
<span class="line"><span style="color:#005CC5;">43</span></span>
<span class="line"><span style="color:#005CC5;">44</span><span style="color:#24292E;"> #</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#005CC5;">45</span><span style="color:#6A737D;"> //读取文件中的所有内容</span></span>
<span class="line"><span style="color:#005CC5;">46</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">((bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(fd, buf, </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">47</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">48</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;buf = [</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, buf);</span></span>
<span class="line"><span style="color:#005CC5;">49</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bytes = </span><span style="color:#005CC5;">%ld\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, bytes);</span></span>
<span class="line"><span style="color:#005CC5;">50</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#005CC5;">51</span><span style="color:#24292E;"> #endif</span></span>
<span class="line"><span style="color:#005CC5;">52</span><span style="color:#6A737D;"> //关闭文件描述符</span></span>
<span class="line"><span style="color:#005CC5;">53</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(fd);</span></span>
<span class="line"><span style="color:#005CC5;">54</span></span>
<span class="line"><span style="color:#005CC5;">55</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">56</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="remove-函数" tabindex="-1"><a class="header-anchor" href="#remove-函数" aria-hidden="true">#</a> Remove 函数</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">argc</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">argv</span><span style="color:#D73A49;">[]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">//使用 remove 函数删除文件</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./file.txt&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">perror</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fail to remove&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ‐</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;delete done</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统调用和库函数" tabindex="-1"><a class="header-anchor" href="#系统调用和库函数" aria-hidden="true">#</a> 系统调用和库函数</h3><p><strong>库函数由两类函数组成</strong> （1）不需要调用系统调用 不需要切换到内核空间即可完成函数全部功能，并且将结果反馈给应用程序，如 strcpy、bzero 等字符串操作函数。 （2）需要调用系统调用 需要切换到内核空间，这类函数通过封装系统调用去实现相应功能，如 printf、fread 等 <strong>库函数与系统调用的关系</strong> 系统提供的很多功能都必须通过系统调用才能实现</p><figure><img src="`+y+'" alt="image-20210225130245871" tabindex="0" loading="lazy"><figcaption>image-20210225130245871</figcaption></figure><p>库函数通过缓冲区提高了系统调用的效率</p><figure><img src="'+d+'" alt="image-20210225130540877" tabindex="0" loading="lazy"><figcaption>image-20210225130540877</figcaption></figure><p>系统调用是需要时间的，程序中频繁的使用系统调用会降低程序的运行效率 当运行内核代码时，CPU 工作在内核态，在系统调用发生前需要保存用户态的栈和内存环境，然后转入内核态工作。 系统调用结束后，又要切换回用户态。这种环境的切换会消耗掉许多时间库函数访问文件的时候根据需要，设置不同类型的缓冲区，从而减少了直接调用 IO 系统调用 的次数，提高了访问效率。 <strong>总结：大多数库函数的本质也是系统调用，只不过库函数有了缓冲区，用于减少系统调用的次数</strong></p>',39);function D(A,h){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,s("blockquote",null,[E,b,s("p",null,[n("笔记总结 课程链接："),s("a",m,[n("千峰嵌入式教程"),c(a)])])]),r(" more"),C])}const F=l(v,[["render",D],["__file","系统调用.html.vue"]]);export{F as default};
