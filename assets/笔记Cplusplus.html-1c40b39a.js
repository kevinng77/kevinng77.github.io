import{_ as p,Q as e,V as t,Z as n,a2 as s,Y as o,a1 as c,aQ as l,H as i}from"./framework-8ecb9d65.js";const u={},r=n("h1",{id:"c-非常入门笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-非常入门笔记","aria-hidden":"true"},"#"),s(" C++ 非常入门笔记")],-1),k=n("p",null,"嵌入式自学开始啦~ 为了自己的贾维斯",-1),d=n("p",null,"想不到一个金融学生竟然走上了这样的路",-1),v={href:"https://www.bilibili.com/video/BV1FA411v7YW?p=530&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},m=l(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span> <span class="token comment">//标准输入输出流</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> Namespace ::</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//namespace 定义在全局</span>
<span class="token keyword">namespace</span> B <span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//添加项目进 namespace B</span>
<span class="token keyword">namespace</span> B<span class="token punctuation">{</span> <span class="token keyword">namespace</span> A <span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token double-colon punctuation">::</span>a <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//全局变量 100</span>
cout <span class="token operator">&lt;&lt;</span> B<span class="token double-colon punctuation">::</span>a <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//a = 20;</span>
cout <span class="token operator">&lt;&lt;</span> B<span class="token double-colon punctuation">::</span>A<span class="token double-colon punctuation">::</span>a <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//a = 10;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>void A::fun(){int a = 19;}</code> 在外部定义 namespace A 声明的函数</p><p><code>namespace{int a = 1;}</code> namespace 没有取名，则全部成员只能被当前文件调用</p><p><code>namespace newname = oldname;</code> 改名</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">using</span> nameA<span class="token double-colon punctuation">::</span>a<span class="token punctuation">;</span> <span class="token comment">//声明后，函数中不能定义其他 a</span>
cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>using namespace nameA;</code> 后 namespaceA 中的全部标识符都可以直接使用，可以省略 nameA::，有变量冲突则使用局部变量</p><h2 id="c-c-对比" tabindex="-1"><a class="header-anchor" href="#c-c-对比" aria-hidden="true">#</a> C++ /C 对比</h2><ul><li>C++：全局变量无法重复定义。C 中多次定义会默认一次定义，多次声明</li><li>C 编译函数形参可以没有类型定义，C++必须有参数类型</li><li>C 编译函数 void 可以有返回值</li><li>C++：更严格的类型转换</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不允许</span>
<span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//允许</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>C++：定义结构体可以省略 struct</p></li><li><p>C++: bool 类型关键字可以直接使用</p></li><li><p>三目运算符：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span> <span class="token comment">//C 返回 a 的值，C++返回变量 a</span>
<span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span>A<span class="token operator">:</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//c++ 允许</span>
<span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token operator">?</span><span class="token operator">&amp;</span>a<span class="token operator">:</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//c 中操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>const:</p><ul><li><p>C: 函数中 const 修饰的局部变量保存在栈区，可以用*p = &amp;a; 改变 a 的值；</p></li><li><p>c++: 局部的 const 变量保存在符号表中，无法修改</p></li><li><p>C/C++: 全局变量 const 保存在常量区，不能修改;</p></li><li><p>C: extern const int b; //声明外部可用（其他文件使用）</p></li><li><p>c++: const 局部变量</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//如果是函数局部变量，onst 修饰局部变量没有分配内存</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//会分配一个临时空间，int tmp = a, *p = &amp;tmp</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//无法修改 a 的值</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">//const 修饰的局部变量为变量，a 可以被修改，存在栈区</span>

cosnt <span class="token keyword">struct</span> <span class="token class-name">stu</span> obj<span class="token punctuation">;</span> <span class="token comment">//保存在栈区</span>
<span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stu</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>obj； <span class="token comment">//修改 obj</span>

<span class="token keyword">extern</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//定义外部文件可以引用的 const 变量</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> <strong>引用</strong></h3><ul><li>实质是为变量取别名</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//等号左边&amp;为引用，等号右边为取地址; 引用初始化后无法改变引用指向的目标；引用定义时必须初始化，不能写 int b; </span>
b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">//表示把 c 的值赋值给 b，不是给 c 取别名为 b</span>

<span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">//typedef int ARR[5]; ARR &amp; arr = c;</span>
cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数的引用 (190)</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span> x <span class="token operator">=</span> y<span class="token punctuation">;</span> y <span class="token operator">=</span> tmp<span class="token punctuation">}</span><span class="token comment">//交换 x，y;引用做函数形参</span>
<span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token operator">&amp;</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//返回 int 的引用；不能返回局部变量的引用</span>

type <span class="token operator">&amp;</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">//常量引用,无法修改引用指向空间的值</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//允许； int tmp = 1; int &amp;b = tmp;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>引用本质是指针常量 // Type * const ref = &amp;val; 指针常量只能指向同一块地址</strong></li></ul><h3 id="内联函数" tabindex="-1"><a class="header-anchor" href="#内联函数" aria-hidden="true">#</a> 内联函数</h3><ul><li><p>（保持宏函数的效率）（用空间换效率）（不能存在循环，判断，取地址）</p></li><li><p>内联函数只是给编译器一个建议，编译器不一定会接受这种建议</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FUN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> a<span class="token operator">+</span>b </span><span class="token comment">// 宏问题 FUN(a,b) * 5 = a + b*5,预处理只会替换，不会检查函数问题</span></span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//替换发生在编译阶段，不会有函数调用的开销</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FUN</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b </span><span class="token comment">// FUN(++a,b)出错</span></span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token comment">//任何在类中的函数自动成为内联函数</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>函数参数默认值，占位参数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 声明和定义只能一处设置默认参数</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//占位参数，没什么用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数重载: 同一 namespace, 不同参数个数，参数顺序，参数类型 （编译器自动更换函数名）</p></li><li><p>extern C (205) ：c++编译修改函数名</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">myfun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>

<span class="token comment">//C 的头文件加入</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">&quot;c&quot;</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">int</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结构体，C 中不能放函数，C++可以放函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">_stu</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print_stu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> tall<span class="token punctuation">;</span><span class="token comment">//子类可访问</span>
    <span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> money<span class="token punctuation">;</span> <span class="token comment">//子类不可访问</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//struct 换成 class 就行；class 中成员默认都是私有访问</span>
<span class="token comment">//尽量提供接口（public 函数）来实现类中变量的修改和初始化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">person_init</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token punctuation">)</span><span class="token punctuation">{</span>
        m_age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">show_person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">set_age</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            m_age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">set_name</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token keyword">private</span><span class="token operator">:</span>  <span class="token comment">//建议成员设为私有，然后提供接口进行访问</span>
    <span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
    <span class="token keyword">char</span> m_name<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Person p1<span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span><span class="token function">person_init</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span><span class="token function">show_person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    p1<span class="token punctuation">.</span><span class="token function">set_age</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>构造和析构（初始化和清理）系统会默认提供构造和析构函数，但系统提供的构造和析构函数不做事，一般需要人为提供</strong> （及时清理指针等，节约内存）</li></ul><p>构造函数可分为有参构造，无参构造</p><ul><li>拷贝构造：旧对象初始化新对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//构造函数 1. 函数名和类名一致 没有返回值，不能写 void，可以有参数， 可以发生函数重载</span>
        <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//无参构造</span>
        <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>m_a <span class="token operator">=</span> a<span class="token punctuation">;</span> m_b <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//有参构造，提供构造函数后系统不在提供默认构造函数</span>
        <span class="token function">person</span><span class="token punctuation">(</span>person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span>
        <span class="token comment">//添加 explicit ，禁止通过隐式法调用构造函数</span>
        <span class="token keyword">explicit</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
            m_a<span class="token operator">=</span> p<span class="token punctuation">.</span>a<span class="token punctuation">;</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再做拷贝时候，重新给对象开辟一个空间</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token comment">//使用深拷贝，代替系统默认的浅拷贝构造，简单的浅拷贝做了简单的值拷贝，类中变量指向同一个地址，析构时会出错</span>
        
    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">free</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
             name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//析构函数 类名前加上~， 没有返回值，无参数，不能发生函数重载   </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造与调用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//括号法</span>
Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//构造函数再实例化对象时自动调用</span>
    Person P2<span class="token punctuation">;</span> <span class="token comment">//无参构造不使用括号</span>
  <span class="token function">person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名对象；或 person()无参构造调用匿名对象;生命周期再当前行</span>
    <span class="token comment">//销毁之前（如出了函数，或作用域）析构函数自动调用</span>
    <span class="token function">person</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再定义时，不能用括号法调用匿名对象</span>
    
    
  	<span class="token comment">//显示法</span>
    person p1 <span class="token operator">=</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;luchy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//显示法调用有参构造</span>
  
    
    <span class="token comment">//隐式法(不大使用)</span>
    person p1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>初始化列表</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//下方先声明 int m_a,int m_b，再根据声明的顺序进行定义初始化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类对象作为类成员</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Person</span><span class="token punctuation">(</span>string per_name<span class="token punctuation">,</span>string phone_name<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">per_name</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">phone</span><span class="token punctuation">(</span>phone_name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//通过初始化列表调用有参构造</span>
    
    string per_name<span class="token punctuation">;</span>
string phone；<span class="token comment">//先构造内部类，先声明先构造；析构顺序与构造相反</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类的其他特性</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">using</span> pos <span class="token operator">=</span> string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>
	<span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
	<span class="token function">Screen</span><span class="token punctuation">(</span>pos h<span class="token punctuation">,</span>pos w<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">width</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>h <span class="token operator">*</span> w<span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token function">Screen</span><span class="token punctuation">(</span>pos w<span class="token punctuation">,</span> pos h<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">width</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>h<span class="token operator">*</span> w<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	
	Screen <span class="token operator">&amp;</span><span class="token function">move</span><span class="token punctuation">(</span>pos w<span class="token punctuation">,</span> pos h<span class="token punctuation">)</span> <span class="token punctuation">{</span> cursor <span class="token operator">=</span> w <span class="token operator">+</span>  h<span class="token operator">*</span>height<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	Screen <span class="token operator">&amp;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
	<span class="token keyword">void</span> <span class="token function">do_display</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token punctuation">{</span> os <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span> <span class="token punctuation">}</span>
	pos height<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	pos cursor<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	string contents<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Screen <span class="token function">myScreen</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	myScreen<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>动态内存分配，new</p><ul><li><p>C++，使用 malloc 动态申请对象，不会调用构造和析构函数</p></li><li><p>new 先为对象再堆中分配内存，然后调用构造函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>类型 <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> 类型<span class="token punctuation">;</span> <span class="token comment">//int *p = new int; new 出来返回的是指针，可用于无参构造并调用析构函数</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//new 数组，返回首元素地址</span>
<span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>p<span class="token punctuation">;</span> <span class="token comment">//释放数组申请的空间;delete p;释放非数组申请的空间</span>
<span class="token comment">//new 和 delete 采用相同的类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>person <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// new 时候调用有参构造</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>void *p = new person; //不会调用析构函数
//new 调用有参构造;new 对象的数组时不能调用有参构造
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类中可以使用静态成员</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">public</span><span class="token operator">:</span> 
  	<span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token comment">//编译阶段就分配内存；不能再类内初始化，只能声明；存在静态全局区；所有类成员共享 1 个静态成员</span>
  	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可以访问静态成员变量，不能访问非静态成员变量</span>
      <span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">//保存在常量区，不可修改，可以在类中初始化。</span>
  <span class="token keyword">int</span> person<span class="token double-colon punctuation">::</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//类的作用域，静态变量的访问定义 或通过对象访问静态成员函数: person p1; p1.b = 100;</span>
person<span class="token double-colon punctuation">::</span>c<span class="token punctuation">;</span> <span class="token comment">//访问类中的一个成员变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>单例模式：一个类只能有一个对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    	<span class="token keyword">static</span> Person <span class="token operator">*</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> single<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">//提供接口操作</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    	<span class="token keyword">static</span> Person <span class="token operator">*</span>single<span class="token punctuation">;</span> <span class="token comment">//私有化静态指针 new 对象，先创建指针，后在类外定义</span>
    	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//无参构造私有化</span>
    	<span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//拷贝构造私有化</span>
<span class="token punctuation">}</span>
Person <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>类成员的空间占用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span> 
    <span class="token comment">//空类至少为 1 个字节</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment">//4 bytes，占用对象空间</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token comment">//0 bytes 不存在类中，存在静态全局区</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//0 bytes 不存在类中</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 不存在类中</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>//函数存在代码区，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
+ this(对象调用成员函数，会将对象地址传给 this 指针)

\`\`\`cpp
public：
	Person(int a, int b){ this-&gt;a = a;this-&gt;b = b;}
	person fun()const{} //常函数，不能通过 this 指针修改 this 指针指向的对象内容；const 修饰 const type * const this
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="友元" tabindex="-1"><a class="header-anchor" href="#友元" aria-hidden="true">#</a> 友元：</h2><ul><li>让 person 类中的 visit 函数可以访问 building</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">{</span>
<span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">//类中所有的函数和成员都能访问 bilding 中的私有属性</span>
或
<span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">{</span>
<span class="token keyword">friend</span> <span class="token keyword">void</span> person<span class="token double-colon punctuation">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>    <span class="token comment">//person 的 visit 函数能访问，其他不能</span>

<span class="token class-name">Person</span><span class="token double-colon punctuation">::</span><span class="token function">person</span><span class="token punctuation">(</span>
<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span> <span class="token comment">//类外实现构造</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>全局函数声明为类的友元，以访问私有属性</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div></li></ul><p>class Person{</p><p>friend void fun(Person &amp;b); ...}</p><pre><code>\`\`\`
</code></pre><h3 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载" aria-hidden="true">#</a> 运算符重载</h3><p>给符号赋予新的意义，运算符只能运算内置的数据类型，如 char，int。所以我们可以做运算符重载</p><p>string 类相当于对字符串的操作进行了各种重载</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>person p1<span class="token punctuation">;</span>
person p2<span class="token punctuation">;</span>
person p3 <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>
<span class="token comment">//系统调用</span>
<span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span>
或
p1<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>

person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span> person <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> person <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>
person <span class="token function">p</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age <span class="token operator">+</span> p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
<span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或类内实现</span>
person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>person <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    person <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">-&gt;</span> age<span class="token operator">+</span>pe<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重载左移运算符( 右击 cout，转到定义可以查看函数定义)</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span>
    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>count<span class="token punctuation">,</span>person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">+</span><span class="token number">1</span>
            <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>count<span class="token punctuation">,</span>person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token keyword">return</span> cout<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以重载的运算符，但不要改变符号的意义，不能重载的又. :: .* ?: sizeof</p><ul><li>自加自减运算符重载</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">//operator++(p1)  pi.operator++()</span>
a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//p1.operator++(int)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>=重载</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>p2 <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//p2.operator=(p1)</span>

person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>person <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token operator">-&gt;</span>name <span class="token operator">=</span> p1<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token comment">//系统自动生成的=重载只做简单的值拷贝；这样 p1 的 name 与 p2 的 name 指向同一个地址。在释放空间时会出错</span>
person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>person <span class="token operator">&amp;</span>p1<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重载不等号</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">person</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>string name1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>person<span class="token operator">&amp;</span>p2<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span>age <span class="token operator">==</span> p2<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>name <span class="token operator">==</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    string name<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&quot;bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span> <span class="token comment">//p1.operator==(p2)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;p1 == p2&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数调用符号（）重载，又名函数对象</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">myadd</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    myadd p<span class="token punctuation">;</span>
    <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//p.opertor()(3,4)</span>
	<span class="token comment">//或</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">myadd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//匿名对象 调用 operator（3，4）函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>总结</li></ul><p>=，[]，()，和-&gt;操作智能通过成员函数进行重载</p><p>&lt;&lt; 和&gt;&gt;只能通过全局函数配合友元函数进行重载</p><p>不要重载&amp;&amp;，||，不然短路规则可能会实现不了</p><p>所有的一元运算符建议使用成员函数重载</p><h3 id="智能指针" tabindex="-1"><a class="header-anchor" href="#智能指针" aria-hidden="true">#</a> 智能指针</h3><p>定义一个对象，保存另外对象的地址，等出了函数自动释放内存。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">smartpointer</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Smartpointer</span><span class="token punctuation">(</span>person <span class="token operator">*</span>p1<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span> p <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token operator">~</span><span class="token function">Smartpointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    person <span class="token operator">*</span>p
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    person <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Smartpointer <span class="token function">sp</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> sp<span class="token operator">-&gt;</span>age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//可以修改 sp.operator-&gt;()，让他返回 p 的地址</span>
<span class="token punctuation">}</span> <span class="token comment">//这样运行完程序就会自动释放 p</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>子类（派生类）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> tail_len<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//子类函数不能访问父类的 private 成员</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/*
    public:
    int age;
protected:
    int b;
private:
    int c;
    */</span>
<span class="token punctuation">}</span> <span class="token comment">//公有继承方式，基类中是什么控制权限，继承到子类中也是什么控制权限</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment">/* 保护继承，将父类中共有的变成保护的，子类不能访问父类的 private 成员
protected:
 int age;
    int b;
private:
    int c;
    */</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> d<span class="token punctuation">;</span>
            <span class="token comment">/* 私有继承，将父类中所有成员变成私有的，子类不能访问父类的 private 成员，看继承之前的权限

private:
    int c;
     int age;
    int b;
    */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对象构造和析构调用原则</p></li><li><p>创建子类对象时候，必须先创建出父类的对象，需要调用父类的构造函数</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">son</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token function">son</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> string name<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Base</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">this</span><span class="token operator">-&gt;</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//系统会先调用父类的构造函数，再是子类的构造函数。先析构</span>
<span class="token comment">//如果子类和父类又同名的成员变量或者函数，父类的成员会被隐藏，访问的是子类的成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>继承中的静态成员特性，如果子类与父类有同名的静态成员变量或函数，父类的同名的静态成员变量或函数会被隐藏。</p></li><li><p>多继承</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>class C:public A, public B
{}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>菱形继承和虚继承</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">sheep</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">animal</span> <span class="token comment">//虚继承</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token keyword">class</span> <span class="token class-name">camel</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">animal</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> camel_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">shenshou</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">sheep</span><span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token class-name">camel</span> <span class="token comment">//这边的 age 只会从 animal 继承</span></span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    shenshou p<span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>cl /d1 reportSingleClassLayoutanimal file.cpp</li></ul><p>虚继承后，类中储存 Virtural base ptr, 指向 VBtable</p><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态" aria-hidden="true">#</a> 多态</h3><p>一种接口多种形态</p><ul><li>父类有虚函数</li><li>必须发生继承</li><li>子类重写虚函数，参数，函数名要一致</li><li>父类的指针或引用指向子类的对象</li></ul><p>静态多态：编译时，调用的地址已经绑定（静态联编）</p><p>动态多态：运行时才确定需要调用的地址</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">animal</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">dog</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">animal</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//如果两个类发生了继承，父类和子类编译器会自动转换</span>
<span class="token keyword">void</span> <span class="token function">dowork</span><span class="token punctuation">(</span>animal <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地址早绑定</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    animal p1<span class="token punctuation">;</span>
    <span class="token function">dowork</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dog p2<span class="token punctuation">;</span>
    <span class="token function">dowork</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//如果：</span>
<span class="token keyword">class</span> <span class="token class-name">animal</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        
<span class="token punctuation">}</span>    
<span class="token keyword">class</span> <span class="token class-name">dog</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">animal</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//重写虚函数，函数名一致</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">dowork</span><span class="token punctuation">(</span>animal <span class="token operator">&amp;</span>ogj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    obj<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//地址晚绑定，动态多态</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开发时 对源码的修改是关闭的 对扩展是开放的</li><li>多态实现增添计算机功能</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">cal</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">mycal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">add</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">cal</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">mycal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">do_work</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> cal <span class="token operator">&amp;</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">mycal</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    add p1<span class="token punctuation">;</span>
    <span class="token function">do_work</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>抽象基类和纯虚函数</li></ul><p>有纯虚函数的类 叫做抽象类 抽象类不能实例出例子， 子类继承了抽象类，如果子类没有重写虚函数，那么这个子类也是抽象类</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">mycal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//纯虚函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="虚析构函数" tabindex="-1"><a class="header-anchor" href="#虚析构函数" aria-hidden="true">#</a> 虚析构函数</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
animal <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> dog<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> p<span class="token punctuation">;</span> <span class="token comment">//这边调用的是父类的析构函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果再父类析构函数加上 virtual，变成虚析构函数，再调用基类的析构函数之前会先调用子类的析构函数。</p><ul><li>纯虚析构：虚析构函数等于 0。同纯虚函数</li></ul><h3 id="重写-重载-重定义" tabindex="-1"><a class="header-anchor" href="#重写-重载-重定义" aria-hidden="true">#</a> 重写 重载 重定义</h3><p>重载：</p><ul><li>函数名相同</li><li>作用域</li><li>桉树的各户，顺序，类型不一致</li><li>const 也可以称为重载的条件</li></ul><p>重定义</p><ul><li>发生继承</li><li>子类和父类有同名的函数和变量父类中的同名的变量和函数都会被隐藏</li></ul><p>重写</p><ul><li>父类中有虚函数</li><li>发生了继承</li><li>子类重写了虚函数，函数名返回值参数一致</li></ul>`,109);function b(y,w){const a=i("ExternalLinkIcon");return e(),t("div",null,[r,n("blockquote",null,[k,d,n("p",null,[s("笔记总结 课程链接："),n("a",v,[s("千峰嵌入式教程"),o(a)])])]),c("more"),m])}const h=p(u,[["render",b],["__file","笔记Cplusplus.html.vue"]]);export{h as default};
