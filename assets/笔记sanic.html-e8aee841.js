import{_ as p,Q as o,V as c,Z as n,a2 as s,Y as e,aQ as t,H as i}from"./framework-8ecb9d65.js";const l={},u=n("h1",{id:"sanic",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sanic","aria-hidden":"true"},"#"),s(" sanic")],-1),r=n("p",null,[s("sanic 因为 Sanic 不仅仅是一个 "),n("strong",null,"框架"),s(" ，它还是一个 "),n("strong",null,"Web 服务器"),s(" 。网上对他的标签有：异步，快，开发效率高等")],-1),d={href:"https://github.com/mekicha/awesome-sanic",target:"_blank",rel:"noopener noreferrer"},k={href:"https://sanic.dev/zh/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://sanic.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},m=t(`<h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> sanic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sanic 旨在提高性能、灵活性和易用性。 写一个简单的 api 服务（官方推荐在 server.py 中来实例化你的 app）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># server.py</span>
<span class="token keyword">from</span> sanic <span class="token keyword">import</span> Sanic
<span class="token keyword">from</span> sanic<span class="token punctuation">.</span>response <span class="token keyword">import</span> text

app <span class="token operator">=</span> Sanic<span class="token punctuation">(</span><span class="token string">&quot;MyHelloWorldApp&quot;</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> text<span class="token punctuation">(</span><span class="token string">&quot;Hello, world.&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>除非有特殊目的，请尽量使用 <code>async</code> 来声明响应函数。 <strong>必须</strong> 使用 <code>Response</code> 或继承自 <code>Response</code> 的类作为响应类型。不能直接 <code>return something</code></p></div><p>sanic 可以用于生产环境：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sanic server.app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h2>`,8),h={href:"https://sanic.dev/zh/plugins/sanic-ext/getting-started.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<ul><li><strong>OpenAPI</strong> 使用 Redoc 和/或 Swagger 的文档</li><li><strong>CORS</strong> 保护</li><li><strong>依赖注入</strong> 路由处理程序</li><li>Request 参数 <strong>检查</strong></li><li>自动创建 <code>HEAD</code>, <code>OPTIONS</code>, 和 <code>TRACE</code> 响应函数</li><li>响应序列化</li></ul><p>安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install sanic[ext]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h2><h3 id="注册表" tabindex="-1"><a class="header-anchor" href="#注册表" aria-hidden="true">#</a> 注册表</h3><p>可以在其他 py 文件中，通过注册表的方式获得对应的 app 实例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># ./path/to/server.py</span>
<span class="token keyword">from</span> sanic <span class="token keyword">import</span> Sanic

app <span class="token operator">=</span> Sanic<span class="token punctuation">(</span><span class="token string">&quot;my_awesome_server&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># ./path/to/somewhere_else.py</span>
<span class="token keyword">from</span> sanic <span class="token keyword">import</span> Sanic

app <span class="token operator">=</span> Sanic<span class="token punctuation">.</span>get_app<span class="token punctuation">(</span><span class="token string">&quot;my_awesome_server&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3>`,8),g={href:"https://sanic.dev/zh/guide/deployment/configuration.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>添加 sanic 配置可以通过：</p><ol><li><p>直接赋值：<code>app.config.DB_NAME = &quot;appdb&quot;</code></p></li><li><p>通过系统环境变量赋值：</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">SANIC_REQUEST_TIMEOUT</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token comment">#  python 中 print(app.config.REQUEST_TIMEOUT)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><p>通过 python 字典：<code>app.update_config({&quot;A&quot;: 1, &quot;B&quot;: 2})</code></p></li><li><p>通过 python 类：</p></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyConfig</span><span class="token punctuation">:</span>
    A <span class="token operator">=</span> <span class="token number">1</span>
    B <span class="token operator">=</span> <span class="token number">2</span>

app<span class="token punctuation">.</span>update_config<span class="token punctuation">(</span>MyConfig<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>通过 python 文件：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>app<span class="token punctuation">.</span>update_config<span class="token punctuation">(</span><span class="token string">&quot;/path/to/my_config.py&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>my_config.py</code> 中定义好要配置的变量，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># my_config.py</span>
A <span class="token operator">=</span> <span class="token number">1</span>
B <span class="token operator">=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的配置有：</p><p>请求超时设置：<code> app.config.RESPONSE_TIMEOUT = response_timeout</code></p><p>CORS 配置：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">configure_cors</span><span class="token punctuation">(</span>
    app<span class="token punctuation">:</span> Sanic<span class="token punctuation">,</span> cors_origins<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Text<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Text<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;*&quot;</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Configure CORS origins for the given app.&quot;&quot;&quot;</span>

    <span class="token comment"># Workaround so that socketio works with requests from other origins.</span>
    <span class="token comment"># https://github.com/miguelgrinberg/python-socketio/issues/205#issuecomment-493769183</span>
    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CORS_AUTOMATIC_OPTIONS <span class="token operator">=</span> <span class="token boolean">True</span>
    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CORS_SUPPORTS_CREDENTIALS <span class="token operator">=</span> <span class="token boolean">True</span>
    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>CORS_EXPOSE_HEADERS <span class="token operator">=</span> <span class="token string">&quot;filename&quot;</span>

    CORS<span class="token punctuation">(</span>
        app<span class="token punctuation">,</span> resources<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">r&quot;/*&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;origins&quot;</span><span class="token punctuation">:</span> cors_origins <span class="token keyword">or</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> automatic_options<span class="token operator">=</span><span class="token boolean">True</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应函数-handlers" tabindex="-1"><a class="header-anchor" href="#响应函数-handlers" aria-hidden="true">#</a> 响应函数 Handlers</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> text<span class="token punctuation">(</span><span class="token string">&quot;Hello, world.&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>除非有特殊目的，请尽量使用 <code>async</code> 来声明响应函数。 <strong>必须</strong> 使用 <code>Response</code> 或继承自 <code>Response</code> 的类作为响应类型。不能直接 <code>return something</code></p></div><h3 id="请求" tabindex="-1"><a class="header-anchor" href="#请求" aria-hidden="true">#</a> 请求</h3><p>响应函数接收 request 参数，可以通过以下方式接收不同类型的请求参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>request<span class="token punctuation">.</span>json  <span class="token comment"># 接收 json 对象</span>
request<span class="token punctuation">.</span>body  <span class="token comment"># 接收 raw 对象</span>
request<span class="token punctuation">.</span>form  <span class="token comment"># 接收表单对象， 用 .get 方法获取表单内容</span>
request<span class="token punctuation">.</span><span class="token builtin">file</span>  <span class="token comment"># 接收文件对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上下文-context" tabindex="-1"><a class="header-anchor" href="#上下文-context" aria-hidden="true">#</a> 上下文 Context</h3><h4 id="请求上下文-request-context" tabindex="-1"><a class="header-anchor" href="#请求上下文-request-context" aria-hidden="true">#</a> 请求上下文(Request context)</h4><p>具体查看中间件(Middleware)</p><p>案例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>middleware</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">run_before_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    request<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">await</span> fetch_user_by_token<span class="token punctuation">(</span>request<span class="token punctuation">.</span>token<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/hi&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">hi_my_name_is</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> text<span class="token punctuation">(</span><span class="token string">&quot;Hi, my name is {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="连接上下文-connection-context" tabindex="-1"><a class="header-anchor" href="#连接上下文-connection-context" aria-hidden="true">#</a> 连接上下文(Connection context)</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>on_request</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">increment_foo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>conn_info<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        request<span class="token punctuation">.</span>conn_info<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">0</span>
    request<span class="token punctuation">.</span>conn_info<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>foo <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">count_foo</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> text<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;request.conn_info.ctx.foo=</span><span class="token interpolation"><span class="token punctuation">{</span>request<span class="token punctuation">.</span>conn_info<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>foo<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="响应-response" tabindex="-1"><a class="header-anchor" href="#响应-response" aria-hidden="true">#</a> 响应 Response</h3><p>sanic 内置的响应方式包括返回文本， html，json，文件，streaming，raw 等方式。在 <code>sanic.response</code> 中查看</p><h3 id="路由-routing" tabindex="-1"><a class="header-anchor" href="#路由-routing" aria-hidden="true">#</a> 路由 Routing</h3><p>常用的路由方式如 <code>@app.post()</code>, <code>@app.get()</code> 等。路由支持传参</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/foo/&lt;foo_id:uuid&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">uuid_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> foo_id<span class="token punctuation">:</span> UUID<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> text<span class="token punctuation">(</span><span class="token string">&quot;UUID - {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>foo_id<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),_=n("code",null,"str, int, float, path, uuid",-1),f={href:"https://sanic.dev/zh/guide/basics/routing.html#%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0-path-parameters",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>正则表达式案例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">r&quot;/&lt;foo:[a-z]{3}.txt&gt;&quot;</span><span class="token punctuation">)</span>                <span class="token comment"># 全模式匹配</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">r&quot;/&lt;foo:([a-z]{3}).txt&gt;&quot;</span><span class="token punctuation">)</span>              <span class="token comment"># 定义单个匹配组</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">r&quot;/&lt;foo:(?P&lt;foo&gt;[a-z]{3}).txt&gt;&quot;</span><span class="token punctuation">)</span>       <span class="token comment"># 定义单个命名匹配组</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">r&quot;/&lt;foo:(?P&lt;foo&gt;[a-z]{3}).(?:txt)&gt;&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># 用一个或多个不匹配组定义单个命名匹配组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如要提取 <code>/image/123456789.jpg</code> 中的数字作为参数，可以使用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">r&quot;/image/&lt;img_id:(?P&lt;img_id&gt;\\d+)\\.jpg&gt;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="监听器-listeners" tabindex="-1"><a class="header-anchor" href="#监听器-listeners" aria-hidden="true">#</a> 监听器 Listeners</h3><p>支持在以下 8 个 server 运行节点进行监听和操作：</p><ul><li><code>main_process_start</code></li><li><code>main_process_stop</code></li><li><code>reload_process_start</code></li><li><code>reload_process_stop</code></li><li><code>before_server_start</code></li><li><code>after_server_start</code></li><li><code>before_server_stop</code></li><li><code>after_server_stop</code></li></ul><h3 id="中间件-middleware" tabindex="-1"><a class="header-anchor" href="#中间件-middleware" aria-hidden="true">#</a> 中间件 Middleware</h3>`,8),w={href:"https://sanic.dev/zh/guide/basics/middleware.html#%E5%90%AF%E7%94%A8-attaching-middleware",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>middleware</span><span class="token punctuation">(</span><span class="token string">&#39;response&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">prevent_xss</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&quot;x-xss-protection&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;1; mode=block&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>middleware</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">middleware_1</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;middleware_1&quot;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>middleware</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">middleware_2</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;middleware_2&quot;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>middleware</span><span class="token punctuation">(</span><span class="token string">&quot;response&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">middleware_3</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;middleware_3&quot;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>middleware</span><span class="token punctuation">(</span><span class="token string">&quot;response&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">middleware_4</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;middleware_4&quot;</span><span class="token punctuation">)</span>
    
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/handler&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;~ handler ~&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> text<span class="token punctuation">(</span><span class="token string">&quot;Done.&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sanic 中的 HTTP 流执行的顺序为：接收请求，request 中间件，response 中间件，响应函数。因此请求 <code>/handler</code> 时候，日志端会打印：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>middleware_1
middleware_2
<span class="token operator">~</span> handler <span class="token operator">~</span>
middleware_4
middleware_3
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">44788</span><span class="token punctuation">]</span><span class="token punctuation">:</span> GET http<span class="token punctuation">:</span><span class="token operator">//</span>localhost<span class="token punctuation">:</span><span class="token number">8000</span><span class="token operator">/</span>handler  <span class="token number">200</span> <span class="token number">5</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后台任务" tabindex="-1"><a class="header-anchor" href="#后台任务" aria-hidden="true">#</a> 后台任务</h3><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> channel</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>
    input_channels<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token string">&quot;InputChannel&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> app<span class="token punctuation">:</span> Sanic<span class="token punctuation">,</span> route<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Text<span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Registers input channel blueprints with Sanic.&quot;&quot;&quot;</span>

    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> UserMessage<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">await</span> app<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>handle_message<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

    <span class="token keyword">for</span> channel <span class="token keyword">in</span> input_channels<span class="token punctuation">:</span>
        <span class="token keyword">if</span> route<span class="token punctuation">:</span>
            p <span class="token operator">=</span> urljoin<span class="token punctuation">(</span>route<span class="token punctuation">,</span> channel<span class="token punctuation">.</span>url_prefix<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            p <span class="token operator">=</span> <span class="token boolean">None</span>
        app<span class="token punctuation">.</span>blueprint<span class="token punctuation">(</span>channel<span class="token punctuation">.</span>blueprint<span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">,</span> url_prefix<span class="token operator">=</span>p<span class="token punctuation">)</span>

    app<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>input_channels <span class="token operator">=</span> input_channels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级" tabindex="-1"><a class="header-anchor" href="#高级" aria-hidden="true">#</a> 高级</h2><h3 id="蓝图-bluprint" tabindex="-1"><a class="header-anchor" href="#蓝图-bluprint" aria-hidden="true">#</a> 蓝图 Bluprint</h3><p>蓝图是应用中可以作为子路由的对象。蓝图定义了同样的添加路由的方式，您可以将一系列路由注册到蓝图上而不是直接注册到应用上，然后再以可插拔的方式将蓝图注册到到应用程序。</p><p>蓝图对于大型应用特别有用。在大型应用中，您可以将应用代码根据不同的业务分解成多个蓝图。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># ./my_blueprint.py</span>
<span class="token keyword">from</span> sanic<span class="token punctuation">.</span>response <span class="token keyword">import</span> json
<span class="token keyword">from</span> sanic <span class="token keyword">import</span> Blueprint

bp <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">&quot;my_blueprint&quot;</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@bp<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">bp_root</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> json<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;my&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;blueprint&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sanic <span class="token keyword">import</span> Sanic
<span class="token keyword">from</span> my_blueprint <span class="token keyword">import</span> bp

app <span class="token operator">=</span> Sanic<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>blueprint<span class="token punctuation">(</span>bp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function S(E,T){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",d,[s("awesome sanic"),e(a)]),s(),n("a",k,[s("中文用户指南"),e(a)]),s(),n("a",v,[s("API doc"),e(a)])]),m,n("p",null,[n("a",h,[s("Sanic Extensions"),e(a)]),s(" 包括了各种易用的功能：")]),b,n("p",null,[n("a",g,[s("官方文档"),e(a)])]),y,n("p",null,[s("参数类型包括 "),_,s(" 等。可以通过正则表达式来自定义自己想要的参数类型 "),n("a",f,[s("官方指南"),e(a)])]),q,n("p",null,[n("a",w,[s("文档"),e(a)]),s(" 。中间件支持在 http 流的生命周期中挂载额外功能。以下为中间件响应的函数：")]),x])}const O=p(l,[["render",S],["__file","笔记sanic.html.vue"]]);export{O as default};
