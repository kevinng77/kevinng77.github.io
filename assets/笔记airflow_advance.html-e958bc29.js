import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c as t,a as s,b as a,d as l,f as e}from"./app-af903ae7.js";const c={},i=e('<h1 id="airflow-advanced" tabindex="-1"><a class="header-anchor" href="#airflow-advanced" aria-hidden="true">#</a> Airflow Advanced</h1><h2 id="airflow-参数" tabindex="-1"><a class="header-anchor" href="#airflow-参数" aria-hidden="true">#</a> Airflow 参数</h2><h3 id="variable" tabindex="-1"><a class="header-anchor" href="#variable" aria-hidden="true">#</a> Variable</h3>',3),d={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/variables.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>在 UI 中设置 <code>Admin -&gt; Variable</code>，而后在 dag 中可以调用 variable</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.models </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Variable</span></span>
<span class="line"><span style="color:#24292E;">Variable.get(</span><span style="color:#032F62;">&quot;you_var_name&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">deserialize_json</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">default_var</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在 jinja template 中使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Raw value</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">var.value.</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">variable_nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Auto-deserialize JSON value</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">var.json.</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">variable_nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xcoms" tabindex="-1"><a class="header-anchor" href="#xcoms" aria-hidden="true">#</a> XComs</h3><p>XComs (“cross-communications”) 用于 Task 和 Operator 之间的数据传递。</p><ol><li>PythonOperator 中使用</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_http_request</span><span style="color:#24292E;">(params, ti, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    xcom_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ti.xcom_pull(</span><span style="color:#E36209;">task_ids</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;extract_file_locations&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 默认的 key=&#39;return_value&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 可以自定义 push 值</span></span>
<span class="line"><span style="color:#24292E;">	ti.xcom_push(</span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;custom_key&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">any_serializable_value)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># return 的值会被自动传到 XComs 中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 jinja Template 当中使用：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#005CC5;">SELECT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FROM</span><span style="color:#24292E;"> {{ task_instance.xcom_pull(</span><span style="color:#E36209;">task_ids</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;table_name&#39;</span><span style="color:#24292E;">) }}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处 <code>task_instance</code> 为具体 operator 实例对象</p><h3 id="坑" tabindex="-1"><a class="header-anchor" href="#坑" aria-hidden="true">#</a> 坑</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>bash operator 中，尽量使用 <code>env</code> 来传参和调用。</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># check_train_sample_number 为 python @task</span></span>
<span class="line"><span style="color:#24292E;">train_folder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> check_train_sample_number(</span><span style="color:#E36209;">user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user_id, </span></span>
<span class="line"><span style="color:#24292E;">                                         </span><span style="color:#E36209;">username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">username,</span></span>
<span class="line"><span style="color:#24292E;">                                         </span><span style="color:#E36209;">data_processing_result</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data_processing_result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">train_task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BashOperator(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;run_train&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">bash_command</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;echo </span><span style="color:#005CC5;">{{</span><span style="color:#032F62;">params.train_data_folder</span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">: user_id,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;train_data_folder&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;">ti.xcom_pull(&#39;train.check_train_sample_number&#39;)</span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;"># 这边传递后，是不会解析的</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;train_steps&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">800</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">queue</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;train&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">max_active_tis_per_dag</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">env</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;">ti.xcom_pull(&#39;train.check_train_sample_number&#39;)</span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># env 中传递没问题，这边也可以直接用 train_folder 参数传递。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="params" tabindex="-1"><a class="header-anchor" href="#params" aria-hidden="true">#</a> Params</h3><h4 id="dag-级别参数" tabindex="-1"><a class="header-anchor" href="#dag-级别参数" aria-hidden="true">#</a> DAG 级别参数</h4><p>用于提供每次运行 DAG 时候的临时参数</p><p><strong>定义和传参：</strong> 可以在 DAG 中设置：也可以通过 REST API 传入参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">dag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DAG(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;my_concurrent_dag&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">default_args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">default_args,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;useruuid&quot;</span><span style="color:#24292E;">: Param(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;666&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">minLength</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">maxLength</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">: Param(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kevin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">minLength</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">maxLength</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">     }，</span></span>
<span class="line"><span style="color:#24292E;">    		</span><span style="color:#E36209;">render_template_as_native_obj</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用参数：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># python 中使用参数：</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processing</span><span style="color:#24292E;">(params, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Your task logic goes here</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;&gt;&gt;&gt; kwargs: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">kwargs[</span><span style="color:#032F62;">&#39;dag_run&#39;</span><span style="color:#24292E;">].conf</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 这个是 dag 中传入的参数，在 REST API 那边也可以设置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;&gt;&gt;&gt; args: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">params.get(</span><span style="color:#032F62;">&#39;useruuid&#39;</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># params 当中会含有 dag 级别的参数，以及 task 级别的参数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jinja template 使用参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">caption </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SimpleHttpOperator(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Caption_Images&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">http_conn_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;test_server_4090&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">endpoint</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;">var.value.caption_endpoint</span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">json.dumps({</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;">var.value.caption_endpoint</span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">/caption&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;uuid&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;">params.useruuid</span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">response_check</span><span style="color:#D73A49;">=lambda</span><span style="color:#24292E;"> response: response.json()[</span><span style="color:#032F62;">&quot;uuid&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;">params.useruuid</span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">dag</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">dag</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="task-级别-params" tabindex="-1"><a class="header-anchor" href="#task-级别-params" aria-hidden="true">#</a> Task 级别 Params</h4><p>Task 级别 Params 调用方式与 dags 大致相同。定义 task params 在 operator 相对应地方添加：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">PythonOperator(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">task_id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;print_my_int_param&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;my_int_param&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">python_callable</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">print_my_int_param,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的 Operator 需要定义 <code>provide_context=True</code> 。</p>`,27),u={href:"https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/operators.html#concepts-jinja-templating",target:"_blank",rel:"noopener noreferrer"},v=s("h2",{id:"operator",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#operator","aria-hidden":"true"},"#"),a(" Operator")],-1),E={href:"https://airflow.apache.org/docs/apache-airflow/stable/faq.html#how-to-improve-dag-performance",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,"对于 Operator 可以配置以下参数：",-1),m=s("li",null,[s("p",null,[s("code",null,"max_active_tis_per_dag"),a("：the number of concurrent running task instances across dag_runs per task.")])],-1),b=s("code",null,"pool",-1),_={href:"https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/pools.html#concepts-pool",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"priority_weight",-1),g={href:"https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/priority-weight.html#concepts-priority-weight",target:"_blank",rel:"noopener noreferrer"},C=s("li",null,[s("p",null,[s("code",null,"queue"),a(": 见下文 queue")])],-1),A={href:"https://airflow.apache.org/docs/apache-airflow-providers-http/stable/_api/airflow/providers/http/operators/http/index.html#airflow.providers.http.operators.http.SimpleHttpOperator",target:"_blank",rel:"noopener noreferrer"},D=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Airflow HTTP Operator 自带的解码器可能存在无法处理中文的情况，可以考虑用 python Operator 替代：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send_http_request</span><span style="color:#24292E;">(params, ti, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    xcom_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ti.xcom_pull(</span><span style="color:#E36209;">task_ids</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;extract_file_locations&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;return_value&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://192.168.136.245:8000/caption&quot;</span></span>
<span class="line"><span style="color:#24292E;">    headers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json; charset=utf-8&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">: params.get(</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;uuid&quot;</span><span style="color:#24292E;">: params.get(</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;image_folder_path&quot;</span><span style="color:#24292E;">: xcom_value,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Sending Body: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">data</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> requests.post(url, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">json.dumps(data, </span><span style="color:#E36209;">ensure_ascii</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">).encode(</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">), </span><span style="color:#E36209;">headers</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">headers)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># Check if response is valid and decode it</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> response.status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        response_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.json()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> response_data.get(</span><span style="color:#032F62;">&#39;uuid&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> params.get(</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Task failed, UUID is not 111. Received UUID: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">response_data.get(</span><span style="color:#032F62;">&#39;uuid&#39;</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># Constructing the desired response format</span></span>
<span class="line"><span style="color:#24292E;">        output_response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">response_data,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;"># add other information here</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> output_response</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;HTTP Request failed with status code </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">response.status_code</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="airflow-2-新特性" tabindex="-1"><a class="header-anchor" href="#airflow-2-新特性" aria-hidden="true">#</a> Airflow 2 新特性</h2><p>使用 decorator 是的 airflow 更加的简洁明了：</p><h3 id="dag-decorator" tabindex="-1"><a class="header-anchor" href="#dag-decorator" aria-hidden="true">#</a> dag decorator</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> airflow.decorators </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dag, task</span></span>
<span class="line"><span style="color:#24292E;">default_args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;owner&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;airflow&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;depends_on_past&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;retry_delay&#39;</span><span style="color:#24292E;">: timedelta(</span><span style="color:#E36209;">minutes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;start_date&#39;</span><span style="color:#24292E;">: datetime(</span><span style="color:#005CC5;">2023</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@dag</span><span style="color:#24292E;">(</span><span style="color:#E36209;">default_args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">default_args, </span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;An example DAG with concurrency settings&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">schedule</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">catchup</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">max_active_runs</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#6A737D;"># Maximum number of active DAG runs</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">max_active_tasks</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">#  the number of task instances allowed to run concurrently,</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main_flow</span><span style="color:#24292E;">(user_id: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fe03bda5-d2ed-49c7-848f-eb21f84d15dc&quot;</span><span style="color:#24292E;">,   </span><span style="color:#6A737D;"># 定义 dag 参数</span></span>
<span class="line"><span style="color:#24292E;">              username: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;kk&quot;</span><span style="color:#24292E;">):  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># your dag code here</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">main_flow()  </span><span style="color:#6A737D;"># 加载 dag</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种 dag 情况下，所有 operator 和 flow 都需要写在 <code>main_flow</code> 下。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><p>jinja template 中使用参数方法不变：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">sql_query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">                SELECT upload_file FROM images</span></span>
<span class="line"><span style="color:#032F62;">                WHERE user_id = &#39;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;"> params.user_id </span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&#39;;</span></span>
<span class="line"><span style="color:#032F62;">                &quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>task 可以直接调用 dag 的参数，</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">caption</span><span style="color:#24292E;">(filename, user_id: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">,  username: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(filename)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(username, user_id)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这边设置的默认值 <code>user_id: str = user_id</code> 是不会生效的，必须再调用 task 时候传入参数。再 operator 中，dag 的参数可以直接通过变量调用:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> caption(extract_file_locations_task.output,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#E36209;">user_id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user_id,</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#E36209;">username</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> username)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="动态-flow" tabindex="-1"><a class="header-anchor" href="#动态-flow" aria-hidden="true">#</a> 动态 flow</h3><p>动态 flow 可以用来实现类似 map reduce 的功能：</p><p>比如我们需要对 20 个不同的 <code>filename</code> 经过 <code>caption</code> 处理后，才会进入下一阶段，那么我们可以使用 mapping:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">@task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">caption</span><span style="color:#24292E;">(filename, user_id: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">,  username: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(filename)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(username, user_id)</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> caption.partial(</span><span style="color:#E36209;">user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user_id, </span><span style="color:#E36209;">username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">username).expand(</span><span style="color:#E36209;">filename</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">extract_file_locations_task.output) </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 task_group:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h2>`,19),k={href:"https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html",target:"_blank",rel:"noopener noreferrer"},q=s("h3",{id:"docker-镜像配置",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#docker-镜像配置","aria-hidden":"true"},"#"),a(" Docker 镜像配置")],-1),F=s("p",null,"参考文档 https://airflow.apache.org/docs/docker-stack/index.html",-1),x={href:"https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html",target:"_blank",rel:"noopener noreferrer"},w=e(`<h3 id="数据库配置" tabindex="-1"><a class="header-anchor" href="#数据库配置" aria-hidden="true">#</a> 数据库配置</h3><ol><li>用户信息数据库</li><li>用户图片数据库</li></ol><h3 id="celery-executor" tabindex="-1"><a class="header-anchor" href="#celery-executor" aria-hidden="true">#</a> Celery Executor</h3><p>Airflow worker 容器中启动 CeleryExecutor 时，需要在系统环境变量中设置好 celery worker 对应的 concurrency 数量，如<code>AIRFLOW__CELERY__WORKER_CONCURRENCY: &quot;2&quot;</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>airflow operator 中设置的 concurrency 和 celery 中的 concurrency 不同。airflow 的 conccurency 似乎是通过 airflow 的 schedular 来实现的。参考 airflow 的 dag 执行流程，schedular 会分发任务到 queue 上。因此如果我们设置了：</p><p><code>AIRFLOW__CELERY__WORKER_CONCURRENCY: &quot;2&quot;</code>, 但是 airflow 中 <code>task_concurrency=10</code> 时。可能会出现有 8 个任务在 queue 中等待的情况。</p></div><figure><img src="https://airflow.apache.org/docs/apache-airflow/stable/_images/task_lifecycle_diagram.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="关于-queue" tabindex="-1"><a class="header-anchor" href="#关于-queue" aria-hidden="true">#</a> 关于 Queue</h4><p><strong>不同任务（Operator）可以使用不同的 queue：</strong> 当使用 CeleryExecutor 时，可以指定任务发送到的 Celery 队列。</p><p><strong>Worker 可以监听一个或多个任务队列。</strong> 监听方法与 Celery 中的一样：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">airflow</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">spark,quark</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而后在 operator 中，设置 <code>queue=spark</code> 参数后，可以把任务单独交给指定的这个 worker 去完成。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这在需要特殊工作器时非常有用，无论是从资源角度（例如，对于非常轻量级的任务，一个工作器可以处理成千上万个任务而不成问题），还是从环境角度（您希望工作器在 Spark 集群内部运行，因为它需要非常特定的环境和安全权限）。</p></div><h4 id="关于-celery-worker-对应的-app" tabindex="-1"><a class="header-anchor" href="#关于-celery-worker-对应的-app" aria-hidden="true">#</a> 关于 Celery Worker 对应的 app</h4>`,13),T={href:"https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html",target:"_blank",rel:"noopener noreferrer"},O=e(`<div class="language-docker line-numbers-mode" data-ext="docker"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">healthcheck:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># yamllint disable rule:line-length</span></span>
<span class="line"><span style="color:#24292E;">      test:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&quot;CMD-SHELL&quot;</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">&#39;celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d &quot;celery@$\${HOSTNAME}&quot; || celery --app airflow.executors.celery_executor.app inspect ping -d &quot;celery@$\${HOSTNAME}&quot;&#39;</span></span>
<span class="line"><span style="color:#24292E;">      interval: 30s</span></span>
<span class="line"><span style="color:#24292E;">      timeout: 10s</span></span>
<span class="line"><span style="color:#24292E;">      retries: 5</span></span>
<span class="line"><span style="color:#24292E;">      start_period: 30s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.</p><h3 id="dag-python-api-参考" tabindex="-1"><a class="header-anchor" href="#dag-python-api-参考" aria-hidden="true">#</a> DAG python API 参考</h3>`,4),R={href:"https://airflow.apache.org/docs/apache-airflow/2.3.4/python-api-ref.html",target:"_blank",rel:"noopener noreferrer"};function P(j,S){const n=p("ExternalLinkIcon");return r(),t("div",null,[i,s("p",null,[a("通常用来配置一些全局参数，如服务器地址等（"),s("a",d,[a("参考链接"),l(n)]),a("）。")]),y,s("p",null,[a("Python 外的 Operator 可以通过 "),s("a",u,[a("Jinja Templating"),l(n)]),a(" 来调用 dag 当中定义的 params")]),v,s("p",null,[s("a",E,[a("如何提高 DAG 运行效率"),l(n)])]),h,s("ul",null,[m,s("li",null,[s("p",null,[b,a(": See "),s("a",_,[a("Pools"),l(n)]),a(".")])]),s("li",null,[s("p",null,[f,a(": See "),s("a",g,[a("Priority Weights"),l(n)]),a(".")])]),C]),s("ol",null,[s("li",null,[a("HTTP Operator: 配置 HTTP 链接 "),s("a",A,[a("参考 API - SimpleHttpOperator"),l(n)])])]),D,s("p",null,[s("a",k,[a("airflow.cfg 官方配置"),l(n)])]),q,F,s("p",null,[s("a",x,[a("Running Airflow in Docker - 官方提供的 Celery Executor compose file"),l(n)])]),w,s("p",null,[a("参考 "),s("a",T,[a("Running Airflow in Docker"),l(n)]),a("，celery worker 启动的时候，添加了这样的参数进行活动监听：")]),O,s("p",null,[s("a",R,[a("DAG Python API 参考"),l(n)])])])}const N=o(c,[["render",P],["__file","笔记airflow_advance.html.vue"]]);export{N as default};
