import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as r,a as s,b as n,d as l,f as e}from"./app-f8f8de17.js";const c={},i=s("p",null,"以 canine 复现为例，整理总结复现过程中重要的深度学习知识点。",-1),d=s("h2",{id:"简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),n(" 简介")],-1),y={href:"https://github.com/kevinng77/canine_paddle",target:"_blank",rel:"noopener noreferrer"},u=e('<h2 id="模型实现" tabindex="-1"><a class="header-anchor" href="#模型实现" aria-hidden="true">#</a> 模型实现</h2><h3 id="模型定位" tabindex="-1"><a class="header-anchor" href="#模型定位" aria-hidden="true">#</a> 模型定位</h3><p>在一切复现之前，最重要的事情就是判断这篇文章是否值得复现，内容包括：</p><ul><li><strong>复现难度：</strong> 你是否具备复现所需要的设备？训练模型所需要的时间是否充足？</li><li><strong>模型成就水平：</strong> 模型的指标是否可信，模型拿了哪些 SOTA？评测的数据库是否权威？算法是否优雅？</li><li><strong>论文合理性：</strong> 尽量避开有坑的论文。复现前检查论文是否具备完整的源码，浏览下论文仓库 issue 区。过一下论文大致框架。时间允许的话可以跑以下官方源码。</li></ul><p>不要迷恋大厂光环，如 google 的 CANINE 论文就充满了槽点，模型架构没什么创新，模型指标也一般般。CANINE 论文中声明该模型比 TydiQA 基线采用的 mBert 高了约 2%，看似不错，但同年发布的其他 TydiQA Top 5 模型比 CANINE 指标还要高出约 7% 到 13%。再者 TydiQA 数据集较为小众，排行榜发布两年到现在也就个位数的模型投榜。因此个人认为 CANINE 有点水论文的嫌疑了。</p>',5),h={href:"https://github.com/google-research-datasets/tydiqa",target:"_blank",rel:"noopener noreferrer"},_=e('<ul><li><code>run_tydi_lib.py</code> 中在 GPU 训练过程中插入了频繁的 CPU 计算，大大降低显卡使用率；</li><li><code>postproc.py</code> 中内存管理极不合理，实际运行官方源码，你需要 120G+ 的内存；然而经过笔者的优化测试，在程序效率不变的情况下，10G+的内存就可以搞定了。</li><li><code>postproc.py</code> 中计算效率极为缓慢，文件中存在诸多与 TydiQA 任务结果无关的计算，并且没有任何优化计算的方案，笔者通过加入多线程、清理无用中间变量，将数据处理时间从官方文件的 3 小时减少到了仅 20 分钟。</li></ul><h3 id="模型编写" tabindex="-1"><a class="header-anchor" href="#模型编写" aria-hidden="true">#</a> 模型编写</h3><p>复现一定不是从绝对的零开始，大部分复现都是基于已有的算子、模型框架进行编写。如 CANINE 采用了 Transformer Encoder 作为主编码器，因此若基于 Bert 模型进行修改，1 天便能完成模型架构的编写。若是从 0 开始自己拼算子，只怕需要花上个一周甚至更久。</p><p>算子也可能存在 bug，如 paddle 的 <code>repeat_interleave</code> 就存在反向传播时候的 <code>segmentation fault</code> 问题</p><h3 id="预训练权重转换" tabindex="-1"><a class="header-anchor" href="#预训练权重转换" aria-hidden="true">#</a> 预训练权重转换</h3><p>使用 paddle 或者其他框架时，可以考虑转换已有的 huggingface 预训练权重而非自己训练预训练权重。转换好的权重可以上传至 huggingface.co （记得使用 git lfs）</p><h3 id="静态图-动态图" tabindex="-1"><a class="header-anchor" href="#静态图-动态图" aria-hidden="true">#</a> 静态图，动态图</h3><p>个人喜欢使用动态图构建框架，在实现后转为静态图进行服务部署。</p>',8),b={href:"https://zhuanlan.zhihu.com/p/191648279",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.paddlepaddle.org.cn/documentation/docs/zh/guides/jit/index_cn.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.paddlepaddle.org.cn/tutorials/projectdetail/1499114",target:"_blank",rel:"noopener noreferrer"},E=e("<p>根据 operator 算子解析执行方式不同，模型可以分为动态图和静态图。</p><table><thead><tr><th></th><th>动态图</th><th>静态图</th></tr></thead><tbody><tr><td>编程范式</td><td>命令式编程范式</td><td>声明式编程范式</td></tr><tr><td>执行方式</td><td>用户无需预先定义完整的网络结构，每写一行网络代码，即可同时获得计算结果。</td><td>先编译后执行，用户需预先定义完整的网络结构，再对网络结构进行编译优化后，才能执行获得计算结果。</td></tr><tr><td>编程体验</td><td>可以使用 python 原生的控制流，容易开发、调试</td><td>调试不方便，开发有一定门槛，过程中的算子需要有 action（如 .run()）才会执行。</td></tr><tr><td>性能</td><td>动态图需要在 python 与 C++计算库之间频繁切换，导致了更大的时间开销。</td><td>一般采用 C++ 性能更优。</td></tr><tr><td>模型架构</td><td>无需使用占位符</td><td>静态图组网阶段并没有实际运行网络，因此并不读入数据，所以需要使用“占位符”（如 paddle.data）指明输入数据的类型、shape 等信息，以完成组网。</td></tr></tbody></table><p><strong>动态图转静态</strong></p><p>除了手动编写静态图代码外，部分框架也提供了动转静的 API，如 paddle 只需要采用 <code>paddle.jit.to_static()</code> 。动态图转静态的一部分优化内容在于使用 python 定义的控制流，如 <code>for</code>, <code>while</code> 等。</p><p><strong>paddle 动态图转静态图注意点：</strong></p>",5),f={href:"https://www.paddlepaddle.org.cn/documentation/docs/zh/guides/jit/grammar_list_cn.html#8",target:"_blank",rel:"noopener noreferrer"},g=e('<p>for range 中不支持参数传递 step 值，如 <code>for x in range(0,n, step):</code>，可改用 while 替代。</p><p><code>for a,b,c,d in xs:</code> 报错，采用 <code>for x in xs: a,b,c,d = x</code> 代替</p><ul><li><p>模型中比较常见的控制流转写大多数与 <code>batch_size</code> 或者 <code>x.shape</code> 相关。</p><p><code>x.shape[i]</code> 的返回值可能是固定的值，也可能是 <code>None</code> ，表示动态 shape（如 batch_size）。</p><p>如果比较明确 <code>x.shape[i]</code> 对应的是 <strong>动态 shape</strong> ，推荐使用 <code>paddle.shape(x)[i]</code>，特别是在生成 position_ids 的时候。</p></li><li><p>错误：Intel MKL function load error: cpu specific dynamic library is not loaded。环境问题，尝试 <code>conda install nomkl</code></p></li><li><p><code>paddle.jit.set_code_level()</code> 打印转换后的静态图模型代码。</p></li><li><p>若出现推理时候的维度错误，但模型动态转静态无报错，那么大概错误在于 reshape 或者 unsqeeze 时候维度出问题。1. 尽量少用 <code>axis=-1</code>；2. 检查所有的维度变换是否正确；3.检查是否使用 <code>paddle.shape(x)[i]</code>来获取动态维度，如 <code>batch_size</code>, <code>len_seq</code> 等。</p></li></ul><h2 id="数据处理" tabindex="-1"><a class="header-anchor" href="#数据处理" aria-hidden="true">#</a> 数据处理</h2><p>背景：训练数据集太大，一次性加载不进内存中。</p><h3 id="数据加载" tabindex="-1"><a class="header-anchor" href="#数据加载" aria-hidden="true">#</a> 数据加载</h3><p>场景：NLP 预训练任务，文本数据集大。</p>',7),C=s("thead",null,[s("tr",null,[s("th",null,"储存方式"),s("th",null,"文件格式"),s("th",null,"Dataset"),s("th",null,"备注"),s("th",null,"shuffle")])],-1),D=s("tr",null,[s("td",null,"单个大文件"),s("td",null,"pickle/jsonl/txt 等"),s("td",null,"map dataset/iterable dataset"),s("td",null,"使用更好的机器，将所有样本加载到内存中。"),s("td",null,"可以")],-1),A=s("td",null,"单个大文件",-1),k=s("td",null,"pickle/jsonl/txt 等",-1),x=s("td",null,"map dataset",-1),w={href:"https://zhuanlan.zhihu.com/p/460012052",target:"_blank",rel:"noopener noreferrer"},F=s("td",null,"可以",-1),z=s("tr",null,[s("td",null,"多个中文件"),s("td",null,"pickle/jsonl/txt 等"),s("td",null,"iterable dataset"),s("td",null,"每个文件储存一定数量的样本，内次加载部分样本到内存中，样本加载速度远大于楼下。"),s("td",null,"不能全局 shuffle")],-1),q=s("tr",null,[s("td",null,"超多个小文件"),s("td",null,"pickle/jsonl/txt 等"),s("td",null,"map dataset"),s("td",null,"将每个样本储存在一个文件中，通过索引 文件名获取样本。I/O 的开销非常大。"),s("td",null,"支持全局 shuffle")],-1),B=s("tr",null,[s("td",null,"数据库"),s("td",null,"h5df, tfrecord 等"),s("td",null,"map dataset"),s("td",null,"所有样本储存在同一数据库中，通过索引数据库获取样本。"),s("td",null,"支持全局 shuffle，但影响性能")],-1),N=e(`<h3 id="相关-api" tabindex="-1"><a class="header-anchor" href="#相关-api" aria-hidden="true">#</a> 相关 API</h3><p><code>Dataset</code></p><p>常用的 dataset 有 <code>MapDataset</code> 和 <code>IterableDataset</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TydiDataset</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">paddle</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">io</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">IterableDataset</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">    Construct Dataset Class for Canine TydiQA task.</span></span>
<span class="line"><span style="color:#032F62;">Args:</span></span>
<span class="line"><span style="color:#032F62;">    file_names (List[int]): the names of input files.</span></span>
<span class="line"><span style="color:#032F62;">    sample_dir (str): The directory of folder storing input sample files, which contains a single</span></span>
<span class="line"><span style="color:#032F62;">        training sample respectively.</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self,</span></span>
<span class="line"><span style="color:#24292E;">                 file_names,</span></span>
<span class="line"><span style="color:#24292E;">                 sample_dir: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/data/tydi/train_samples&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                 ):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(TydiDataset, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.all_file_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> file_name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> file_names:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.all_file_path.append(os.path.join(sample_dir, file_name))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__iter__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> paddle.distributed.get_world_size() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            file_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.all_file_path</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            worker_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.io.get_worker_info()</span></span>
<span class="line"><span style="color:#24292E;">            num_files </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.all_file_path)</span></span>
<span class="line"><span style="color:#24292E;">            files_per_worker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                math.ceil(num_files </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">float</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    worker_info.num_workers)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            worker_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> worker_info.id</span></span>
<span class="line"><span style="color:#24292E;">            iter_start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> worker_id </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> files_per_worker</span></span>
<span class="line"><span style="color:#24292E;">            iter_end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">min</span><span style="color:#24292E;">(iter_start </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> files_per_worker, num_files)</span></span>
<span class="line"><span style="color:#24292E;">            file_list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.all_file_path[iter_start:iter_end]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> file_name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> file_list:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(file_name,</span><span style="color:#032F62;">&quot;rb&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> fp:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> sample </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> pickle.load(fp):</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> sample</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DataLoader </code></p>`,5),P={href:"https://www.zhihu.com/question/422160231/answer/1484767204",target:"_blank",rel:"noopener noreferrer"},T=s("code",null,"num_worker",-1),j=s("p",null,[s("code",null,"DistrubutedBatchSampler")],-1),I=s("p",null,[n("多卡训练下，数据的分配是个关键问题。采用 dataset 时可以手动设置每个卡读取的样本，如上述案例代码。若使用 "),s("code",null,"MapDataset"),n("，则可以考虑使用 "),s("code",null,"DistributedBatchSampler"),n(" 来自动分配每个卡的样本，以保证样本不重叠。")],-1),L=s("h3",{id:"h5df",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#h5df","aria-hidden":"true"},"#"),n(" H5DF")],-1),H=s("p",null,"Canine 的指标是根据 TydiQA 数据集进行评测的，其中 TydiQA 数据集在数据处理过程中，使用了 tfrecord + tftensor 进行数据存储。为了适配 Paddle 的训练，笔者尝试了使用 H5DF 代替 tfrecord，在数据处理过程中，H5DF 的空间占用与 tfrecord 旗鼓相当，训练过程中，H5DF 也能提供足够的速度，以保证训练效率上与从内存加载数据集的效率相近。",-1),S={href:"http://wujiawen.xyz/archives/h5dfh5py%E6%96%87%E6%A1%A3%E5%B0%8F%E6%95%B4%E7%90%86",target:"_blank",rel:"noopener noreferrer"},R={href:"https://docs.h5py.org/en/stable/high/dataset.html#creating-datasets",target:"_blank",rel:"noopener noreferrer"},Q=s("h2",{id:"训练",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#训练","aria-hidden":"true"},"#"),n(" 训练")],-1),G=s("h3",{id:"混合精度训练",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#混合精度训练","aria-hidden":"true"},"#"),n(" 混合精度训练")],-1),U={href:"http://wujiawen.xyz/archives/%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83",target:"_blank",rel:"noopener noreferrer"},M=e(`<h3 id="梯度累加" tabindex="-1"><a class="header-anchor" href="#梯度累加" aria-hidden="true">#</a> 梯度累加</h3><p>可以近似地模拟大 batch：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">global_step </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i, (inputs, labels) </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">enumerate</span><span style="color:#24292E;">(training_set):</span></span>
<span class="line"><span style="color:#24292E;">  loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model(inputs, labels)                    </span></span>
<span class="line"><span style="color:#24292E;">  loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loss </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> accumulation_steps                </span></span>
<span class="line"><span style="color:#24292E;">  loss.backward()  </span></span>
<span class="line"><span style="color:#24292E;">  global_step </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> global_step </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> accumulation_steps </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:             </span></span>
<span class="line"><span style="color:#24292E;">      optimizer.step()                            </span></span>
<span class="line"><span style="color:#24292E;">      model.zero_grad()                           </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单机多卡训练" tabindex="-1"><a class="header-anchor" href="#单机多卡训练" aria-hidden="true">#</a> 单机多卡训练</h3>`,4),O={href:"https://zhuanlan.zhihu.com/p/56991108",target:"_blank",rel:"noopener noreferrer"},V=e(`<p>对于 torch，单机多卡可以使用 <code>DataParallel</code>（PS 架构，异步训练）。或者 <code>DistributedDataParallel</code> （Ring All-Reduce，同步训练）；对于 paddle，其中的 <code>DataParallel</code> 默认采用的已经是 Ring All-Reduce 了。使用单机多卡训练的操作也比较简介，通常只需要初始化多进程多卡，模型分配等环节即可，以下以 paddle 为例总结（torch 类似）。paddle 可以采用 paddle 的 spawn 或者通过 <code>paddle.distributed.launch</code> 开启多进程多卡训练。只要对单机单卡进行简单的修改即可：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 添加以下语句</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> paddle </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> distributed </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> dist</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> dist.get_world_size() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    dist.init_parallel_env()</span></span>
<span class="line"><span style="color:#24292E;">    model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.DataParallel(model)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常多卡训练时的日志操作比较麻烦，常见的方法是使用 <code>get_rank()</code> 选择发布日志的进程，而后进行操作，如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> dist.get_rank() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    paddle.save(model.state_dict(), os.path.join(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.output_dir, name))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 只需要一个进程保存模型即可</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> dist.get_world_size() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 对所有进程的数据进行汇总，这边使用 ALL_GATHER,也可以用别的算子， 如 ALL_REDUCE</span></span>
<span class="line"><span style="color:#24292E;">    dist.all_gather(loss_list, local_loss)</span></span>
<span class="line"><span style="color:#24292E;">    dist.all_gather(dev_loss_list, dev_loss_tensor)</span></span>
<span class="line"><span style="color:#24292E;">    dist.all_gather(acc_list, acc)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> dist.get_rank() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        logging_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (paddle.stack(loss_list).sum() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            loss_list)).item()</span></span>
<span class="line"><span style="color:#24292E;">        dev_loss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (paddle.stack(dev_loss_list).sum() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            dev_loss_list)).item()</span></span>
<span class="line"><span style="color:#24292E;">        logging_acc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (paddle.stack(acc_list).sum() </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            acc_list)).item()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        logger.info(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Step </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">global_step</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">num_train_steps</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> train loss </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">logging_loss</span><span style="color:#D73A49;">:.4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">                                            </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot; dev loss </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">dev_loss</span><span style="color:#D73A49;">:.4f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> acc </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">logging_acc</span><span style="color:#D73A49;">:.2f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">% diff </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">logging_diff</span><span style="color:#D73A49;">:.2f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">                                            </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot; time </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">(time.time() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> time1) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#D73A49;">:.2f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">min&quot;</span></span>
<span class="line"><span style="color:#24292E;">                                            )</span></span>
<span class="line"><span style="color:#24292E;">        dist.barrier()  </span><span style="color:#6A737D;"># 阻塞其他进程，等待 0 号进程处理完毕。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多卡学习需要注意：</p><ul><li>batch size 与 学习率的调整</li><li>多卡下需要注意数据集的分配，可以使用 <code>DistributeBatchSampler</code> 来自动分配样本。</li><li>混合精度+多卡训练可能要预留一部分的显存出来，不然可能训练到一半发现 OOM 了</li></ul><h2 id="推理部署" tabindex="-1"><a class="header-anchor" href="#推理部署" aria-hidden="true">#</a> 推理部署</h2>`,7),W={href:"https://www.paddlepaddle.org.cn/tutorials/projectdetail/3952715",target:"_blank",rel:"noopener noreferrer"},K=e(`<h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="pdb-调试" tabindex="-1"><a class="header-anchor" href="#pdb-调试" aria-hidden="true">#</a> pdb 调试</h3><blockquote><p>pdb 调试更加灵活，可以使用条件判断语句，在代码中任意选择断点。这通常是 IDE 做不到的。</p></blockquote><p><strong>step1：</strong> 在想要进行调试的代码前插入<code>import pdb; pdb.set_trace()</code>开启 pdb 调试。</p><p><strong>step2：</strong> 正常运行.py 文件，在终端会出现下面类似结果，在<code>(Pdb)</code>位置后输入相应的 pdb 命令进行调试。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">&gt; /tmp/tmpm0iw5b5d.py(9)func()</span></span>
<span class="line"><span style="color:#24292e;">-&gt; two = paddle.full(shape=[1], fill_value=2, dtype=&#39;int32&#39;)</span></span>
<span class="line"><span style="color:#24292e;">(Pdb)</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),X=s("strong",null,"step3：",-1),J={href:"https://docs.python.org/zh-cn/3/library/pdb.html",target:"_blank",rel:"noopener noreferrer"},Y=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">l</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 查看当前位置的源代码</span></span>
<span class="line"><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">expression</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 查看上下文打印 expression 的值，如 p x</span></span>
<span class="line"><span style="color:#6F42C1;">s</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 执行下一行，进入函数内部</span></span>
<span class="line"><span style="color:#6F42C1;">n</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 执行下一行，不进入函数</span></span>
<span class="line"><span style="color:#6F42C1;">r</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 执行代码到函数返回处</span></span>
<span class="line"><span style="color:#6F42C1;">b</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 在 30 行处设置断点</span></span>
<span class="line"><span style="color:#6F42C1;">c</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 执行代码，直到下一个断点</span></span>
<span class="line"><span style="color:#6F42C1;">q</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 退出调试</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="segmentation-fault-报错分析" tabindex="-1"><a class="header-anchor" href="#segmentation-fault-报错分析" aria-hidden="true">#</a> segmentation fault 报错分析</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#005CC5;">ulimit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 查看 core 限制大小</span></span>
<span class="line"><span style="color:#6A737D;"># 0</span></span>
<span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/sys/kernel/core_pattern</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#  查看 core 生成路径</span></span>
<span class="line"><span style="color:#6A737D;"># core</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现象：</p><p>我们执行生成 core 的文件并不是在 linux 的目录下，而是在 windows 和 linux 共享的 hgfs 下，导致生成的 core.xxx 都是 0 字节大小。</p>`,5),Z={href:"https://so.csdn.net/so/search?q=%E6%A0%B9%E7%9B%AE%E5%BD%95&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},$={href:"https://zhuanlan.zhihu.com/p/201330829",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://blog.csdn.net/dzhongjie/article/details/80280192",target:"_blank",rel:"noopener noreferrer"},ns=e(`<ul><li><p>修改 core 文件大小限制<code>ulimit -c unlimit</code></p></li><li><p>重新运行会 segmentation fault 的程序。</p></li><li><p>目录下生成 core 文件，检查 core 文件大小不为 0</p></li><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">gdb</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">whichi</span><span style="color:#032F62;"> python\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">core</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;"># 用 python 解释器来进行 gdb core 分析</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>由于 docker 容器的权限问题，默认无法产生 core 文件，需要做一些配置修改。</p><p>在宿主机上修改 core 路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/tmp/core.%t.%e.%p&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tee</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/sys/kernel/core_pattern</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为系统在产生 Core Dump 文件的时候是根据 /proc/sys/kernel/core_pattern 的设定。而默认的设定是 |/usr/share/apport/apport %p %s %c %P，也就是用管道传给 apport。然而 Docker 里面的系统不一定有装 apport，并且 /proc 又是直接挂到 Docker 里面的，所以我们就得改成放到固定的位置去，也就是 /tmp。</p><p>另外，在 docker run 的时候要加上以下参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">--ulimit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">core=</span><span style="color:#005CC5;">-1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--security-opt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">seccomp=unconfined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="windows-环境还是很多坑" tabindex="-1"><a class="header-anchor" href="#windows-环境还是很多坑" aria-hidden="true">#</a> windows 环境还是很多坑</h3><p>尝试了 WSL2 下进行开发，还是感觉原先纯 LINUX 的环境更适应一点。Windows WSL 下存在 git 使用不方便，文件磁盘格式问题，文件权限有限等。</p><p>linux 和 windows 换行符：导致各种错误，如 pre-commit， sh 文件解析错误，markdown 文件解析错误等。解决方法： vim 中使用 <code>:set ff=unix</code> 或者 vscode 等编辑器中设置换行符为 lr</p>`,10);function as(ls,es){const a=p("ExternalLinkIcon");return t(),r("div",null,[i,d,s("p",null,[n("本文章对 NLP 论文复现的流程进行总结，包括模型编写、预训练权重转换；微调时候的大型数据处理、对卡训练、混合精度训练；模型推理部署。完整复现仓库："),s("a",y,[n("link"),l(a)])]),u,s("p",null,[n("此外从 TydiQA 源码中的算法来看，该团队的作风有些诡异。如"),s("a",h,[n("官方仓库"),l(a)]),n(" 中的：")]),_,s("p",null,[n("相关链接："),s("a",b,[n("动态图，静态图"),l(a)]),n("，"),s("a",v,[n("飞桨 动态图转静态图 "),l(a)]),n("，"),s("a",m,[n("飞桨产业级实践深度学习-"),l(a)])]),E,s("ul",null,[s("li",null,[n("需要注意控制流的使用方式，如 for range 等，详细可查看 "),s("a",f,[n("支持语法"),l(a)]),n("。")])]),g,s("table",null,[C,s("tbody",null,[D,s("tr",null,[A,k,x,s("td",null,[s("a",w,[n("知乎链接"),l(a)]),n(" ,计算每个样本的 offset，移动指针截取样本。")]),F]),z,q,B])]),N,s("ul",null,[s("li",null,[s("a",P,[n("num workers 和 dataloader"),l(a)]),n(" - 似乎不太起作用？个人测试对于小 batch size，提高 "),T,n(" 会有部分效果提升。")])]),j,I,L,H,s("p",null,[n("相比于使用 pickle 或者 jsonl + 压缩的方式储存文件。H5DF 的数据处理方式更佳优雅，笔者个人也是推荐采用 h5df 的。关于 H5DF 的经验分享，欢迎参考我的博客 "),s("a",S,[n("H5DF | H5py 文档小整理"),l(a)]),n("。更多详细，请参考 "),s("a",R,[n("HDF5 官方文档链接"),l(a)])]),Q,G,s("p",null,[n("混合精度训练，短短的几行代码，在节省显存占用 40%+，训练速度翻倍的前提下，能够做到模型准确率几乎不减少！该部分笔者也在个人博客 "),s("a",U,[n("混合精度训练"),l(a)]),n(" 中进行了整理。")]),M,s("p",null,[n("需要注意几个概念：模型并行与数据并行，Parameter Server 与 Ring All-Reduce，同步训练与异步训练。通常单机多卡采用数据并行，GPU 之间大多使用 Ring-All-reduce 进行同步。可以参考："),s("a",O,[n("一文说清楚 Tensorflow 分布式训练必备知识"),l(a)]),n(" 等。")]),V,s("p",null,[s("a",W,[n("paddle 产业级推理部署"),l(a)])]),K,s("p",null,[X,n(" 在 pdb 交互模式下输入 l、p 等命令可以查看相应的代码、变量，进而排查相关的问题。"),s("a",J,[n("pdb 官方"),l(a)])]),Y,s("p",null,[n("解决： 把需要运行的程序拷贝到 linux 的"),s("a",Z,[n("根目录"),l(a)]),n("下运行即可。"),s("a",$,[n("方案 1"),l(a)]),n(", "),s("a",ss,[n("方案 2"),l(a)])]),ns])}const ts=o(c,[["render",as],["__file","笔记reproduction_summary.html.vue"]]);export{ts as default};
