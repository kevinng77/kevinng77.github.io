import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as n,c as p,a as e,b as a,d as o,f as h}from"./app-79a64b8b.js";const l={},c={href:"http://www.artint.info/2e/html/ArtInt2e.Ch1.S1.html",target:"_blank",rel:"noopener noreferrer"},s=h('<h1 id="智能体结构与分层" tabindex="-1"><a class="header-anchor" href="#智能体结构与分层" aria-hidden="true">#</a> 智能体结构与分层</h1><p>在大自然中，我们也会常识性的对事物的结构进行分层，直到某些最基础的子系统，如物理中的基本粒子。</p><p>智能体的架构应该是什么样子的？首先我们来考虑使用单一的函数来实现一个智能体：</p><h3 id="智能体函数" tabindex="-1"><a class="header-anchor" href="#智能体函数" aria-hidden="true">#</a> 智能体函数</h3><img src="http://www.artint.info/2e/html/x354.png"><p>上图是智能体的架构，以购买自动交易机为例子。 percepts 为股票价格、成交量等，command 为机器想要购买的股票数量。environment 即为股市环境。</p><p>交易机通过 Body 接受股票的信息，并且执行股市具体交易。而 Controller 则通过股票信息决定采取什么交易策略。</p><p>Percepts 感知得到的信息是会随时间变化的，比如某个交易高峰时刻，机器可能会遭受一定的延迟，Commands 同理。</p><p>此外 Commands 发出的交易策略并不一定被执行，比如当 Body 接收到以 12 块钱买入 10 手股票时，股票价格涨到了 14 元。 但这种情况比较少见，因为机器的信息传递速度还是足够快的。</p><p>Controller 类似我们的大脑，身体传递视觉、触觉等 Percepts 到大脑中，大脑在通过这些知觉，发出命令来控制身体。</p><p>类似大脑中存有记忆，机器也能够获取过去的经验来辅助目前的决策。 如果将记忆表示为单一的状态 S（brief state），那么 S 随着时间以及我们的感知 Percepts 更新。</p><h3 id="分级控制" tabindex="-1"><a class="header-anchor" href="#分级控制" aria-hidden="true">#</a> 分级控制</h3><img src="http://www.artint.info/2e/html/x355.png"><p>事实证明前面提到的智能体架构太慢了，很难调和对复杂的高级目标的缓慢推理和低级任务所需要的快速反应。</p><p>考虑人的快速反应来源，大部分的快速反应都是条件反射带动的，因此我们可以考虑一个分层的智能体，每层都会接收如上节中提到的命令、内省和记忆。</p><p>低层处理如直觉，本能，情绪化等，并且不接受内省</p><p><strong>在较高层的推理通常是离散的和定性的，而在较低层执行的低级推理通常是连续的和定量的。</strong> 这也是分层智能体和上一节中智能体最主要的不同之处。每个层只需要处理他所负责的参数形式，从而大大减少了运算时间（联想下 python 高性能编程，当我们对 Cython 函数输入进行类型限定时，性能能够有极大的提升正是因为减少了很多中间不必要的数据转换）。</p><img src="http://www.artint.info/2e/html/x357.png"><h3 id="智能体记忆力的世界" tabindex="-1"><a class="header-anchor" href="#智能体记忆力的世界" aria-hidden="true">#</a> 智能体记忆力的世界</h3><p>提示：我们可以通过收集一些感知信息，如视觉传感器，同时采用贝叶斯法则来过滤现实生活中的噪声。</p><h3 id="知识和应用" tabindex="-1"><a class="header-anchor" href="#知识和应用" aria-hidden="true">#</a> 知识和应用</h3><p>知识的学习和应用大致逻辑：</p><img src="http://www.artint.info/2e/html/x362.png"><p>一个例子就是 ELBO。</p><p>Ontology（本体）: 系统中，符号的特殊意义（一般指和现实世界的关联）。如果一个模型是 state-based 的，那么他的本体就是解释 state 中数字显示意义的映射。</p><p>Knowledge Engineer 是协助 domain expert 构建知识库的人员（如码农）。</p><h2 id="寻找答案" tabindex="-1"><a class="header-anchor" href="#寻找答案" aria-hidden="true">#</a> 寻找答案</h2><p>寻找答案的过程，可以视为在有向图中寻找起始节点到目标节点的路径的数学问题，若将答案表示成路径，那该路径将由不同的状态（state）组成。</p><p>本书第三章探索了部分路径搜索算法。</p><h3 id="路径搜索" tabindex="-1"><a class="header-anchor" href="#路径搜索" aria-hidden="true">#</a> 路径搜索</h3><p>最佳路线可能意味着：</p><ul><li>最短路线</li><li>最快路线</li><li>考虑到时间、金钱和路线吸引力的最低成本路线。</li></ul><p>路径搜索的挑战：</p><ul><li>路径中的噪声，会影响路径的实际决策。</li><li>计算路径时间时，需要考虑到其他智能体选择的路径</li></ul><p>对于路径搜索，找到最佳的解决方案往往是 NP hard 的。但是我们能够找到令人满意的解决方案。</p><p>我们应该用有关特殊情况的知识来指导智能体找到解决方案，这些额外的知识也被称为启发式知识。</p><h4 id="用图定义任务" tabindex="-1"><a class="header-anchor" href="#用图定义任务" aria-hidden="true">#</a> 用图定义任务</h4><p>如果用图来表示一个问题（书中称为 graph searching），那么我们有以下定义：</p><ul><li>节点 n 表示 State</li><li>边表示 action</li><li>goal 表示 <code>goal(n)</code> 布尔值</li><li>cost：通常每条边都会带有一个 cost</li><li>solution：solution 是一条总 cost 最小的路径</li></ul><p>对于许多问题，搜索图并不是明确给定的，需要动态地进行调整。</p><p>定义：</p><ul><li>branching factor：number of outgoing/incoming arcs of node.</li></ul><h4 id="_3-4-a-generic-searching-algorithm" tabindex="-1"><a class="header-anchor" href="#_3-4-a-generic-searching-algorithm" aria-hidden="true">#</a> 3.4 A Generic Searching Algorithm</h4><img src="http://www.artint.info/2e/html/x227.png"><p>算法通常是具有不确定性的：</p><ul><li>choose：算法不会知道当前如何选择，才能够达到目标。因此我们需要对所有结果进行遍历。</li><li>Select：在某些路径上，不论如何探索，最终的结局都不会是好的。虽然在这些无用的路径上探索不会影响算法最后结果的准确性，但是却会大大影响算法的效率。因此，启发式是一个能够用来辨别无用选项的方法。</li></ul><p>书中对 select 和 choose 两个词进行了不同的定义，以表示以上两种不同的，虽然都有选择的意思，但 choose 更偏向于中性的选择，而 select 则蕴含有选出好的的意思。</p><p>重点：P 与 NP</p><h4 id="_3-5-uninformed-search-strategies" tabindex="-1"><a class="header-anchor" href="#_3-5-uninformed-search-strategies" aria-hidden="true">#</a> 3.5 Uninformed Search Strategies</h4><p>信息缺乏情况下的搜素方案</p><p>BFS</p><p>DFS</p><p>iterative deepening(有深度限制的 DFS)</p><p>lowest cost first search</p><p>A* search（implemented using generic search algorithm）</p><p>Heuristic Function：启发式方程是对未来 cost 下限的一个估算。如对于旅游问题，两个景点的最小消耗就是他们之间的直线距离。</p><p>cycle pruning</p><p>验证一个图是否为有环图</p><p>multiple-path pruning</p><p>当我们的目的是只要返回一个可行解时，可以采用。我们只需要维持所有 frontier 中，消耗最小地那个就行。</p>',60);function d(g,m){const t=i("ExternalLinkIcon");return n(),p("div",null,[e("blockquote",null,[e("p",null,[a("印象最深的 AI 书籍：人工智能 计算智能体基础笔记。"),e("a",c,[a("书籍全文链接"),o(t)])])]),s])}const _=r(l,[["render",d],["__file","笔记2_ai_basic_agent.html.vue"]]);export{_ as default};
