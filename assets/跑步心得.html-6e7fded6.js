const n=JSON.parse('{"key":"v-7eee4f1a","path":"/posts/notes/articles/%E8%B7%91%E6%AD%A5%E5%BF%83%E5%BE%97.html","title":"深度学习多卡训练","lang":"zh-CN","frontmatter":{"title":"深度学习多卡训练","date":"2021-06-07T00:00:00.000Z","author":"Kevin 吴嘉文","category":["知识笔记"],"tag":["NLP"],"description":"单机单卡 梯度累加 单机单卡下可以通过梯度累加来增大训练时候的理论 batch size。如： for i, (inputs, labels) in enumerate(training_set): loss = model(inputs, labels) loss = loss / accumulation_steps loss.backward() if (i+1) % accumulation_steps == 0: global_step += 1 optimizer.step() optimizer.clean_grad()","head":[["meta",{"property":"og:url","content":"http://wujiawen.xyz/posts/notes/articles/%E8%B7%91%E6%AD%A5%E5%BF%83%E5%BE%97.html"}],["meta",{"property":"og:site_name","content":"记忆笔书"}],["meta",{"property":"og:title","content":"深度学习多卡训练"}],["meta",{"property":"og:description","content":"单机单卡 梯度累加 单机单卡下可以通过梯度累加来增大训练时候的理论 batch size。如： for i, (inputs, labels) in enumerate(training_set): loss = model(inputs, labels) loss = loss / accumulation_steps loss.backward() if (i+1) % accumulation_steps == 0: global_step += 1 optimizer.step() optimizer.clean_grad()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Kevin 吴嘉文"}],["meta",{"property":"article:tag","content":"NLP"}],["meta",{"property":"article:published_time","content":"2021-06-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深度学习多卡训练\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kevin 吴嘉文\\"}]}"]]},"headers":[{"level":2,"title":"单机单卡","slug":"单机单卡","link":"#单机单卡","children":[{"level":3,"title":"梯度累加","slug":"梯度累加","link":"#梯度累加","children":[]},{"level":3,"title":"混合精度训练","slug":"混合精度训练","link":"#混合精度训练","children":[]}]},{"level":2,"title":"单机多卡","slug":"单机多卡","link":"#单机多卡","children":[{"level":3,"title":"多 GPU 操作总结","slug":"多-gpu-操作总结","link":"#多-gpu-操作总结","children":[]},{"level":3,"title":"进程间通信","slug":"进程间通信","link":"#进程间通信","children":[]},{"level":3,"title":"多卡训练提示","slug":"多卡训练提示","link":"#多卡训练提示","children":[]}]},{"level":2,"title":"其他参考","slug":"其他参考","link":"#其他参考","children":[]}],"git":{},"readingTime":{"minutes":3.56,"words":1069},"filePathRelative":"posts/notes/articles/跑步心得.md","localizedDate":"2021年6月7日","excerpt":"<h2> 单机单卡</h2>\\n<h3> 梯度累加</h3>\\n<p>单机单卡下可以通过梯度累加来增大训练时候的理论 batch size。如：</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">for</span> i<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>inputs<span class=\\"token punctuation\\">,</span> labels<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">enumerate</span><span class=\\"token punctuation\\">(</span>training_set<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n  loss <span class=\\"token operator\\">=</span> model<span class=\\"token punctuation\\">(</span>inputs<span class=\\"token punctuation\\">,</span> labels<span class=\\"token punctuation\\">)</span>                   \\n  loss <span class=\\"token operator\\">=</span> loss <span class=\\"token operator\\">/</span> accumulation_steps                \\n  loss<span class=\\"token punctuation\\">.</span>backward<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                                 \\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">%</span> accumulation_steps <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span> \\n      global_step <span class=\\"token operator\\">+=</span> <span class=\\"token number\\">1</span>\\n      optimizer<span class=\\"token punctuation\\">.</span>step<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>                            \\n      optimizer<span class=\\"token punctuation\\">.</span>clean_grad<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
