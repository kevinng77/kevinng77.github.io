import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c,a as s,b as n,d as l,f as e}from"./app-82c5f5e3.js";const t={},i=s("h2",{id:"概述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),n(" 概述")],-1),d={href:"https://www.mlflow.org/docs/latest/quickstart.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<h3 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mlflow</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>MLflow 包含了四个应用：</p><ul><li>MLflow Tracking：提供可视化模型训练记录，包括超参配置、训练指标、模型权重、模型输出文件等 artifact。数据会被记录在 MLflow 云服务器上</li><li>MLflow Projects：打包管理 ML 模型项目，方便复现与部署。</li><li>MLflow Models：主要用于 AI 模型储存、加载以及服务部署。由于目前 AI 框架较多，因此 MLflow 也提供了比较统一的保存加载和服务部署方案。</li><li>MLflow Registry：如果说 MLflow Model 能让我们将开发过程中的模型权重、配置等储存起来。那么 MLflow Registry 则让我们对筛选出来的、要落地的模型进行标注和管理。</li></ul><h2 id="mlflow-tracking" tabindex="-1"><a class="header-anchor" href="#mlflow-tracking" aria-hidden="true">#</a> MLflow Tracking</h2>`,5),u={href:"https://www.mlflow.org/docs/latest/tracking.html#",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="启动-mlflow-服务器" tabindex="-1"><a class="header-anchor" href="#启动-mlflow-服务器" aria-hidden="true">#</a> 启动 MLflow 服务器</h3><p>在服务器上启动 Tracking 服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">mlflow</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--backend-store-uri</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sqlite:///mlflow.db</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--default-artifact-root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">your-artifact-addres</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--host</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#032F62;">.0.0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),v=s("code",null,"tracking_uri=server_ip:5000",-1),h={href:"https://www.mlflow.org/docs/latest/tracking.html#id13",target:"_blank",rel:"noopener noreferrer"},b=s("strong",null,"同时配置",-1),E=s("p",null,[s("code",null,"backend-store-uri"),n(" 用以储存结构化数据如 metrics, params, 等模型信息。"),s("code",null,"artifact-root"),n(" 用以储存非结构化信息包括：模型权重、模型配置文件、模型输出文字、图片、网页等各类数据，一般配置云储存服务。")],-1),f=s("p",null,[n("需要注意如果 "),s("code",null,"default-artifact-root"),n(" 提供 nfs 路径，那么路径对应的文件夹需要在客户端与服务端上保持一致。")],-1),_=s("h3",{id:"客户端配置-uri",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#客户端配置-uri","aria-hidden":"true"},"#"),n(" 客户端配置 URI")],-1),g={href:"https://www.mlflow.org/docs/latest/tracking.html",target:"_blank",rel:"noopener noreferrer"},C=s("code",null,"mlflow.get_tracking_uri()",-1),A={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.set_tracking_uri",target:"_blank",rel:"noopener noreferrer"},w=s("code",null,"mlflow.set_tracking_uri()",-1),F=e(`<h3 id="建立-experiment" tabindex="-1"><a class="header-anchor" href="#建立-experiment" aria-hidden="true">#</a> 建立 Experiment</h3><p>实验类似于文件夹，能够用来快速分类与检索模型训练结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">experiment_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;kevin_task&quot;</span></span>
<span class="line"><span style="color:#24292E;">mlflow.set_experiment(experiment_name)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，MLFLOW 使用 <code>default</code> 实验。</p><h3 id="记录训练数据" tabindex="-1"><a class="header-anchor" href="#记录训练数据" aria-hidden="true">#</a> 记录训练数据</h3><p>可视化 AI 模型训练指标，类似于 TensorBoard、VisualDL 等工具。可以记录图片、文字、数字、html 页面等任意格式的内容。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mlflow</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cv2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mlflow.set_tracking_uri(</span><span style="color:#032F62;">&quot;http://mlflow_server_ip:port&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">experiment_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;kevin_task&quot;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> mlflow.get_experiment_by_name(experiment_name) </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    mlflow.create_experiment(experiment_name)</span></span>
<span class="line"><span style="color:#24292E;">mlflow.set_experiment(experiment_name)</span></span>
<span class="line"><span style="color:#24292E;">np_img </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cv2.imread(</span><span style="color:#032F62;">&quot;./my_img.png&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> mlflow.start_run() </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> run:</span></span>
<span class="line"><span style="color:#24292E;">    mlflow.set_tag(</span><span style="color:#032F62;">&quot;your Keys&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;your tags&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    mlflow.log_param(</span><span style="color:#032F62;">&quot;lambda&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.122</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    mlflow.log_metric(</span><span style="color:#032F62;">&quot;f1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">.6</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    mlflow.log_text(</span><span style="color:#032F62;">&quot;this is a output from NLP model&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;test.txt&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    mlflow.log_text(</span><span style="color:#032F62;">&#39;this is a output from &lt;div style=&quot;font-size:40px&quot;&gt;NLP&lt;/div&gt; model&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;custom.html&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    mlflow.log_image(np_img,</span><span style="color:#032F62;">&quot;what.png&quot;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># imput np array</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 可以记录不同 step 的数值。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        mlflow.log_metric(</span><span style="color:#032F62;">&quot;loss&quot;</span><span style="color:#24292E;">, i</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#E36209;">step</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">i)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较特别的是 MLflow 适配了自动记录训练参数，但只适配部分主流的 AI 框架，如 SKlearn，Torch 等。在训练开始前声明 <code>mlflow.autolog()</code> 即可。mlflow 会自动根据模型类型选择记录的参数和指标。</p><p>如果 MLflow 搭载在云服务器上，那么所有记录的数据会被上传到已经配置的云数据库中，因此网速慢或者 artifact 文件太大的话，都会导致代码运行很久。</p><h2 id="mlflow-projects" tabindex="-1"><a class="header-anchor" href="#mlflow-projects" aria-hidden="true">#</a> MLflow Projects</h2><p>打包管理 ML 模型项目，方便复现与部署。</p><h3 id="项目文件架构" tabindex="-1"><a class="header-anchor" href="#项目文件架构" aria-hidden="true">#</a> 项目文件架构</h3><p>一个 MLflow 项目的文件夹包含以下文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MLproject</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python_env.yaml</span></span>
<span class="line"><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">your_al_files</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mlproject-文件" tabindex="-1"><a class="header-anchor" href="#mlproject-文件" aria-hidden="true">#</a> MLproject 文件</h4><p>官方提供的模板：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">My Project</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">python_env</span><span style="color:#24292E;">: </span><span style="color:#032F62;">python_env.yaml</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#6A737D;"># conda_env: my_env.yaml</span></span>
<span class="line"><span style="color:#6A737D;"># or</span></span>
<span class="line"><span style="color:#6A737D;"># docker_env:</span></span>
<span class="line"><span style="color:#6A737D;">#    image:  mlflow-docker-example</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">entry_points</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">main</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">parameters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">data_file</span><span style="color:#24292E;">: </span><span style="color:#032F62;">path</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">regularization</span><span style="color:#24292E;">: {</span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">float</span><span style="color:#24292E;">, </span><span style="color:#22863A;">default</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;python train.py -r {regularization} {data_file}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">validate</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">parameters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">data_file</span><span style="color:#24292E;">: </span><span style="color:#032F62;">path</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;python validate.py {data_file}&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中我们需要定义：</p><ul><li><code>name</code>: 项目名字</li><li><code>xxx_env</code>：项目运行的环境</li><li><code>entry_points</code>：如何运行这个项目，一般是一些命令。</li></ul><h4 id="环境项目配置" tabindex="-1"><a class="header-anchor" href="#环境项目配置" aria-hidden="true">#</a> 环境项目配置</h4><p>普通情况下我们只需要使用 Virtualenv 虚拟环境运行项目，因此可以编写以下 <code>python_env.yaml</code> 文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Python version required to run the project.</span></span>
<span class="line"><span style="color:#22863A;">python</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3.8.15&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># Dependencies required to build packages. This field is optional.</span></span>
<span class="line"><span style="color:#22863A;">build_dependencies</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">pip</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">setuptools</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">wheel==0.37.1</span></span>
<span class="line"><span style="color:#6A737D;"># Dependencies required to run the project.</span></span>
<span class="line"><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">-r requirments.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 MLproject 中配置改文件的 <strong>相对路径</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#22863A;">python_env</span><span style="color:#24292E;">: </span><span style="color:#032F62;">python_env.yaml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：使用 <code>python_env</code> 时，需要安装<code>pyenv</code> 相关命令。</p><p>当然也可以使用 docker（默认从 DockerHub 拉取</p><p>）：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#22863A;">docker_env</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mlflow-docker-example-environment</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;/local/path:/container/mount/path&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">environment</span><span style="color:#24292E;">: [[</span><span style="color:#032F62;">&quot;NEW_ENV_VAR&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;new_var_value&quot;</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&quot;VAR_TO_COPY_FROM_HOST_ENVIRONMENT&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置项目运行方式" tabindex="-1"><a class="header-anchor" href="#配置项目运行方式" aria-hidden="true">#</a> 配置项目运行方式</h4><p>配置 Entry Point</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#22863A;">entry_points</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">main</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">parameters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">data_file</span><span style="color:#24292E;">: </span><span style="color:#032F62;">path</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">regularization</span><span style="color:#24292E;">: {</span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">float</span><span style="color:#24292E;">, </span><span style="color:#22863A;">default</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;python train.py -r {regularization} {data_file}&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">validate</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">parameters</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">data_file</span><span style="color:#24292E;">: </span><span style="color:#032F62;">path</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;python validate.py {data_file}&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数格式：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#22863A;">parameter_name</span><span style="color:#24292E;">: {</span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data_type</span><span style="color:#24292E;">, </span><span style="color:#22863A;">default</span><span style="color:#24292E;">: </span><span style="color:#032F62;">value</span><span style="color:#24292E;">}  </span><span style="color:#6A737D;"># Short syntax</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">parameter_name</span><span style="color:#24292E;">:     </span><span style="color:#6A737D;"># Long syntax</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data_type</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">default</span><span style="color:#24292E;">: </span><span style="color:#032F62;">value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>type</code> 支持 <code>string</code>, <code>float</code>, <code>path</code>, <code>uri</code>。</p><h3 id="运行-mlproject-项目" tabindex="-1"><a class="header-anchor" href="#运行-mlproject-项目" aria-hidden="true">#</a> 运行 MLProject 项目</h3><p>MLproject 能够让你知道这个项目的环境依赖还有运行方式，他仅会在 MLtracking 上多记录一行 <code>Run Command=mlflow run ...</code>。</p><p>官方推荐将所有项目的配置都记录在 MLproject 文件下，然后直接用一行简单的命令就能够顺利启动项目。</p><h4 id="使用-python-文件运行" tabindex="-1"><a class="header-anchor" href="#使用-python-文件运行" aria-hidden="true">#</a> 使用 python 文件运行</h4><p><code>mlflow.projects.run()</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mlflow</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 要在运行前配置好 tracking uri，当然也可以在环境变量中定义好</span></span>
<span class="line"><span style="color:#24292E;">mlflow.set_tracking_uri(</span><span style="color:#032F62;">&quot;http://40.76.242.139:8005&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">os.environ[</span><span style="color:#032F62;">&quot;ddd&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">os.environ[</span><span style="color:#032F62;">&quot;AZURE_STORAGE_ACCESS_KEY&quot;</span><span style="color:#24292E;">] = </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;xxx&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">project_uri = </span><span style="color:#032F62;">&quot;./&quot;</span></span>
<span class="line"><span style="color:#24292E;">params = {</span><span style="color:#032F62;">&quot;alpha&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.9</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;l1_ratio&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.0666</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Run MLflow project and create a reproducible conda environment</span></span>
<span class="line"><span style="color:#6A737D;"># on a local host</span></span>
<span class="line"><span style="color:#24292E;">mlflow.run(project_uri, </span><span style="color:#E36209;">experiment_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;kevin from python&quot;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">parameters</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">params)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果使用 MLProject 启动训练或者推理，那么在你的训练文件中就不应该出现 <code>with mlflow.start_run()</code> 等新建 <code>run</code>的 代码。</p>`,41),x=s("strong",null,"比较特别的是",-1),k={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.projects.html#mlflow.projects.run",target:"_blank",rel:"noopener noreferrer"},D=s("code",null,"mlflow.projects.run()",-1),q={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.client.html#module-mlflow.client",target:"_blank",rel:"noopener noreferrer"},M=s("code",null,"mlflow.client",-1),L={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.projects.html#mlflow.projects.run",target:"_blank",rel:"noopener noreferrer"},j=s("code",null,"mlflow.projects.run()",-1),S=s("code",null,"mlflow.client",-1),I=e(`<h4 id="使用终端运行" tabindex="-1"><a class="header-anchor" href="#使用终端运行" aria-hidden="true">#</a> 使用终端运行</h4><p>使用 <code>mlflow run</code> 时，需要提前在环境变量里定义好 tracking_uri 等其他信息，比如你的 artifact 网盘账号和密码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">export </span><span style="color:#005CC5;">MLFLOW_TRACKING_URI</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://40.76.242.139:8005&quot;</span></span>
<span class="line"><span style="color:#24292E;">mlflow run . </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;">experiment</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;new kevin 2&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">P alpha</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mlflow-models" tabindex="-1"><a class="header-anchor" href="#mlflow-models" aria-hidden="true">#</a> MLflow Models</h2><p>主要用于 AI 模型储存、加载以及服务部署。由于目前 AI 框架较多，因此 MLflow 也提供了比较统一的保存加载和服务部署方案。</p><h3 id="记录模型" tabindex="-1"><a class="header-anchor" href="#记录模型" aria-hidden="true">#</a> 记录模型</h3>`,6),R=s("code",null,"mlflow.xxx.log_model()",-1),T={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model",target:"_blank",rel:"noopener noreferrer"},P=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pandas </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> pd</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> datasets</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sklearn.ensemble </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> RandomForestClassifier</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mlflow</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mlflow.sklearn</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> mlflow.models.signature </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> infer_signature</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">iris </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datasets.load_iris()</span></span>
<span class="line"><span style="color:#24292E;">iris_train </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pd.DataFrame(iris.data, </span><span style="color:#E36209;">columns</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">iris.feature_names)</span></span>
<span class="line"><span style="color:#24292E;">clf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RandomForestClassifier(</span><span style="color:#E36209;">max_depth</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#E36209;">random_state</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">clf.fit(iris_train, iris.target)</span></span>
<span class="line"><span style="color:#24292E;">signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> infer_signature(iris_train, clf.predict(iris_train))</span></span>
<span class="line"><span style="color:#24292E;">mlflow.sklearn.log_model(clf, </span><span style="color:#032F62;">&quot;iris_rf&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">signature</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">signature)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以上代码，在 mlflow 会储存相对应的模型文件：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Directory written by mlflow.sklearn.save_model(model, &quot;my_model&quot;)</span></span>
<span class="line"><span style="color:#24292E;">my_model</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">├── MLmodel</span></span>
<span class="line"><span style="color:#24292E;">├── model.pkl</span></span>
<span class="line"><span style="color:#24292E;">├── conda.yaml</span></span>
<span class="line"><span style="color:#24292E;">├── input_example.json</span></span>
<span class="line"><span style="color:#24292E;">├── python_env.yaml</span></span>
<span class="line"><span style="color:#24292E;">└── requirements.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 MLmodel 文件长这样</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#22863A;">artifact_path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">model</span></span>
<span class="line"><span style="color:#22863A;">flavors</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">python_function</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">env</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">conda</span><span style="color:#24292E;">: </span><span style="color:#032F62;">conda.yaml</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">virtualenv</span><span style="color:#24292E;">: </span><span style="color:#032F62;">python_env.yaml</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">loader_module</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mlflow.sklearn</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">model_path</span><span style="color:#24292E;">: </span><span style="color:#032F62;">model.pkl</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">predict_fn</span><span style="color:#24292E;">: </span><span style="color:#032F62;">predict</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">python_version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3.8.16</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">sklearn</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">code</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">pickled_model</span><span style="color:#24292E;">: </span><span style="color:#032F62;">model.pkl</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">serialization_format</span><span style="color:#24292E;">: </span><span style="color:#032F62;">cloudpickle</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">sklearn_version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0.23.2</span></span>
<span class="line"><span style="color:#22863A;">mlflow_version</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2.1.1</span></span>
<span class="line"><span style="color:#22863A;">model_uuid</span><span style="color:#24292E;">: </span><span style="color:#032F62;">3a3c5f7183734848a7d80ad08baaab0c</span></span>
<span class="line"><span style="color:#22863A;">run_id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">47b2603aa0444991939200ac846d87cf</span></span>
<span class="line"><span style="color:#22863A;">utc_time_created</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;2023-02-02 14:32:54.030002&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="记录模型输入输出" tabindex="-1"><a class="header-anchor" href="#记录模型输入输出" aria-hidden="true">#</a> 记录模型输入输出</h3><p>等级的 MLmodel 中可以同时记录模型的输入、输出等信息。</p><p>可以自动根据数据推导输入输出格式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> mlflow.models.signature </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> infer_signature</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> infer_signature(testX, model.predict(testX))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以手动记录表格输入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> mlflow.models.signature </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ModelSignature</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> mlflow.types.schema </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Schema, ColSpec</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">input_schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Schema([</span></span>
<span class="line"><span style="color:#24292E;">  ColSpec(</span><span style="color:#032F62;">&quot;double&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;sepal length (cm)&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  ColSpec(</span><span style="color:#032F62;">&quot;double&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;sepal width (cm)&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  ColSpec(</span><span style="color:#032F62;">&quot;double&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;petal length (cm)&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  ColSpec(</span><span style="color:#032F62;">&quot;double&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;petal width (cm)&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">output_schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Schema([ColSpec(</span><span style="color:#032F62;">&quot;long&quot;</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ModelSignature(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">input_schema, </span><span style="color:#E36209;">outputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">output_schema)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者 tensor 输入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> mlflow.types.schema </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Schema, TensorSpec</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">input_schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Schema([</span></span>
<span class="line"><span style="color:#24292E;">  TensorSpec(np.dtype(np.uint8), (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">output_schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Schema([TensorSpec(np.dtype(np.float32), (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))])</span></span>
<span class="line"><span style="color:#24292E;">signature </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ModelSignature(</span><span style="color:#E36209;">inputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">input_schema, </span><span style="color:#E36209;">outputs</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">output_schema)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以直接记录 input_example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># each input has shape (4, 4)</span></span>
<span class="line"><span style="color:#24292E;">input_example </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.array([</span></span>
<span class="line"><span style="color:#24292E;">   [[  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">134</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">56</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#005CC5;">253</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">242</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">195</span><span style="color:#24292E;">,   </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">93</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">82</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">82</span><span style="color:#24292E;">]],</span></span>
<span class="line"><span style="color:#24292E;">   [[  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">46</span><span style="color:#24292E;">,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [ </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">36</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">166</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [ </span><span style="color:#005CC5;">76</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">75</span><span style="color:#24292E;">,   </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">255</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    [ </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">44</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,  </span><span style="color:#005CC5;">82</span><span style="color:#24292E;">]]</span></span>
<span class="line"><span style="color:#24292E;">], </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">np.uint8)</span></span>
<span class="line"><span style="color:#24292E;">mlflow.tensorflow.log_model(</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">, </span><span style="color:#E36209;">input_example</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">input_example)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型保存与加载" tabindex="-1"><a class="header-anchor" href="#模型保存与加载" aria-hidden="true">#</a> 模型保存与加载</h3><p>很多主流的 AI 框架都有自己的保存、加载模型方法。mlflow 仅是在这些主流 AI 的 API 上套一层，已实现用统一 MLflow API 保存和加载 AI 模型。</p><h4 id="上传模型" tabindex="-1"><a class="header-anchor" href="#上传模型" aria-hidden="true">#</a> 上传模型</h4><p>官方为主流框架提供了 <code>mlflow.sklearn</code>， <code>mlflow.torch</code> 等类，可以使用 <code>save_model</code> 保存到本地, <code>log_model</code> 保存到云端 artifact 服务器等 API，比如对于 onnx 模型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># convert model to ONNX and load it</span></span>
<span class="line"><span style="color:#24292E;">torch.onnx.export(net, X, </span><span style="color:#032F62;">&quot;model.onnx&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">onnx_model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onnx.load_model(</span><span style="color:#032F62;">&quot;model.onnx&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># log the model into a mlflow run</span></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> mlflow.start_run():</span></span>
<span class="line"><span style="color:#24292E;">    model_info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mlflow.onnx.log_model(onnx_model, </span><span style="color:#032F62;">&quot;model&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># load the logged model and make a prediction</span></span>
<span class="line"><span style="color:#24292E;">onnx_pyfunc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mlflow.pyfunc.load_model(model_info.model_uri)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">predictions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onnx_pyfunc.predict(X.numpy())</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(predictions)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者对于 paddle 模型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mlflow.paddle</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> paddle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Regressor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">paddle</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">nn</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Layer</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.fc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Linear(</span><span style="color:#E36209;">in_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#E36209;">out_features</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@paddle.jit.to_static</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(self, inputs):</span></span>
<span class="line"><span style="color:#24292E;">        x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.fc(inputs)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#6A737D;"># ... your training code here</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">mlflow.paddle.log_model(model, </span><span style="color:#032F62;">&quot;model&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如以上 <code>mlflow.paddle.log_model</code> 中，包含了 <code>paddle.save()</code> 等方法。</p>`,23),N={href:"https://www.mlflow.org/docs/latest/python_api/mlflow.models.html#mlflow.models.Model",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"mlflow.models.Model",-1),O={href:"https://www.mlflow.org/docs/latest/models.html#custom-python-models",target:"_blank",rel:"noopener noreferrer"},z=e(`<h4 id="模型推理" tabindex="-1"><a class="header-anchor" href="#模型推理" aria-hidden="true">#</a> 模型推理</h4><p>在 mlflow server 对应的 artifact model 中，可以查看到模型的 uri。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">model_uri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;runs:/a60a1cdd9c644e6bb6594e7ff911e0ea/model&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在已知 run id 情况下，可以通过 model_uri = mlflow.get_artifact_uri(&quot;model&quot;)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pd_model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mlflow.paddle.load_model(model_uri)</span></span>
<span class="line"><span style="color:#24292E;">training_data, test_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_data()</span></span>
<span class="line"><span style="color:#24292E;">np_test_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np.array(test_data).astype(</span><span style="color:#032F62;">&quot;float32&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(pd_model(np_test_data[:, :</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mlflow.paddle.load_model</code> 中包含了 飞桨的官方加载模型方法：<code>paddle.load()</code></p><h3 id="模型部署" tabindex="-1"><a class="header-anchor" href="#模型部署" aria-hidden="true">#</a> 模型部署</h3>`,5),U={href:"https://www.mlflow.org/docs/latest/models.html#built-in-deployment-tools",target:"_blank",rel:"noopener noreferrer"},V=e(`<p><strong>本地部署</strong></p><p>可以直接通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">model</span><span style="color:#24292E;"> </span><span style="color:#032F62;">models</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serve</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">model_uri</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),X={href:"https://github.com/pyenv/pyenv",target:"_blank",rel:"noopener noreferrer"},H=s("code",null,"pyenv",-1),K=e(`<p><strong>创建 docker 镜像并部署</strong></p><p>该方案部署相对顺利，但是需要科学上网环境才能成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">mlflow</span><span style="color:#24292E;"> </span><span style="color:#032F62;">models</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build-docker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;modeluri&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;image-name&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5001</span><span style="color:#032F62;">:8080</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;my-image-name&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>部署到云服务</strong></p>`,4),W={href:"https://www.mlflow.org/docs/latest/models.html#built-in-deployment-tools",target:"_blank",rel:"noopener noreferrer"},G=e(`<p><strong>模型调用</strong></p><p>使用 <code>curl -X POST -H &quot;Content-Type:application/json&quot; --data your_input</code>，其中，输入 <code>your_input</code> 的格式可以在上文提到的 <a href="#%E8%AE%B0%E5%BD%95%E6%A8%A1%E5%9E%8B%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA">记录模型输入输出</a> 查看。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-H</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Content-Type:application/json&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;{</span></span>
<span class="line"><span style="color:#032F62;">  &quot;inputs&quot;: [</span></span>
<span class="line"><span style="color:#032F62;">    [</span></span>
<span class="line"><span style="color:#032F62;">      1.7080316543579102,</span></span>
<span class="line"><span style="color:#032F62;">      2.5316741466522217,</span></span>
<span class="line"><span style="color:#032F62;">      1.6952152252197266,</span></span>
<span class="line"><span style="color:#032F62;">      1.9768019914627075,</span></span>
<span class="line"><span style="color:#032F62;">      1.7444103956222534,</span></span>
<span class="line"><span style="color:#032F62;">      1.7886496782302856,</span></span>
<span class="line"><span style="color:#032F62;">      1.963786244392395,</span></span>
<span class="line"><span style="color:#032F62;">      1.849048137664795,</span></span>
<span class="line"><span style="color:#032F62;">      1.9302328824996948,</span></span>
<span class="line"><span style="color:#032F62;">      1.7990881204605103</span></span>
<span class="line"><span style="color:#032F62;">    ]</span></span>
<span class="line"><span style="color:#032F62;">  ]</span></span>
<span class="line"><span style="color:#032F62;">}&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://127.0.0.1:8000/invocations</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#6F42C1;">&quot;predictions&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> [{</span><span style="color:#6F42C1;">&quot;0&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">566.980224609375</span><span style="color:#032F62;">}]}%</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mlflow-registry" tabindex="-1"><a class="header-anchor" href="#mlflow-registry" aria-hidden="true">#</a> MLflow Registry</h2>`,6),Y={href:"https://www.mlflow.org/docs/latest/model-registry.html",target:"_blank",rel:"noopener noreferrer"},Z=e(`<h3 id="注册模型" tabindex="-1"><a class="header-anchor" href="#注册模型" aria-hidden="true">#</a> 注册模型</h3><p>可以在 MLflow 的 web UI 上直接注册：</p><figure><img src="https://www.mlflow.org/docs/latest/_images/oss_registry_1_register.png" alt="相关图片" tabindex="0" loading="lazy"><figcaption>相关图片</figcaption></figure><p>也可以在代码中注册：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># log 模型时提供 registerd_model_name 即可</span></span>
<span class="line"><span style="color:#24292E;">mlflow.sklearn.log_model(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">sk_model</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">sk_learn_rfr,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">artifact_path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;sklearn-model&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">registered_model_name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;sk-learn-random-forest-reg-model&quot;</span></span>
<span class="line"><span style="color:#24292E;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 或者基于现有的模型 MODEL URI 注册</span></span>
<span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mlflow.register_model(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;runs:/d16076a3ec534311817565e6527539c0/sklearn-model&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;sk-learn-random-forest-reg&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于注册的模型，可以设置 <code>Description</code>， <code>Tags</code> ， <code>Stage</code> 等信息。</p><h3 id="使用注册的模型" tabindex="-1"><a class="header-anchor" href="#使用注册的模型" aria-hidden="true">#</a> 使用注册的模型</h3><p>在上一节中，我们使用 MODEL_URI (Run_id) 来索引模型，对于已经注册了的模型，可以使用以下字符代替：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">model_uri</span><span style="color:#D73A49;">=</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;models:/</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">model_name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">model_version</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">model_uri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;models:/</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">model_name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">stage</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他功能" tabindex="-1"><a class="header-anchor" href="#其他功能" aria-hidden="true">#</a> 其他功能</h2><p>有一部分 Data Bricks MLflow 的功能在开源版中没有.</p>`,11);function J(Q,$){const a=p("ExternalLinkIcon");return r(),c("div",null,[i,s("p",null,[s("a",d,[n("MLflow 官方"),l(a)])]),y,s("p",null,[n("提供可视化模型训练记录，包括超参配置、训练指标、模型权重、模型输出文件等 artifact。数据会被记录在 MLflow 云服务器上。"),s("a",u,[n("MLTracking Document"),l(a)])]),m,s("p",null,[n("如上，"),v,n("。所有文件将被储存在运行 mlflow 的服务器上。自定义存储配置查看"),s("a",h,[n("官网指南"),l(a)]),n("。如配置 Azure Blob Storage 时，需要在服务端和客户端 "),b,n(" 链接用的账户与密码到环境变量中。")]),E,f,_,s("p",null,[n("参考 "),s("a",g,[n("MLflow 文档"),l(a)]),n(" 不同的 URI 支持不同的功能与储存效果。"),C,n(" 查看当前 URI。"),s("a",A,[w,l(a)]),n(" 配置新的 URI。")]),F,s("p",null,[x,n(" ， "),s("a",k,[D,l(a)]),n(" 可以和 "),s("a",q,[M,l(a)]),n(" 结合，来实现 pipeline。 "),s("a",L,[j,l(a)]),n(" 每次运行后，使用 "),S,n(" 接受本次 run 的结果。而后根据结果来判断下一个 run 什么。")]),I,s("p",null,[n("使用 "),R,n(" 可以将模型记录在 mlflow 服务器中，如对于 sklearn 的模型，可以使用 "),s("a",T,[n("mlflow.sklearn.log_model"),l(a)])]),P,s("p",null,[n("此外可以使用 "),s("a",N,[B,l(a)]),n(" 来自定义 MLflow 模型的创建和储存。或者参考 "),s("a",O,[n("custom python models"),l(a)])]),z,s("p",null,[s("a",U,[n("官方文档链接"),l(a)])]),V,s("p",null,[n("在本地部署 rest_api，需要使用 "),s("a",X,[H,l(a)]),n("，笔者部署过程中还是遇到很多环境依赖问题，如本地设备缺少 bz2 依赖等问题。")]),K,s("p",null,[n("MLflow 可以部署到 Azure ML Studio，Apache Spark UDF 等。具体参考 "),s("a",W,[n("官方文档链接"),l(a)])]),G,s("p",null,[n("如果说 MLflow Model 能让我们将开发过程中的模型权重、配置等储存起来。那么 MLflow Registry 则让我们对筛选出来的、要落地的模型进行标注和管理。"),s("a",Y,[n("官网文档"),l(a)])]),Z])}const as=o(t,[["render",J],["__file","笔记mlflow.html.vue"]]);export{as as default};
