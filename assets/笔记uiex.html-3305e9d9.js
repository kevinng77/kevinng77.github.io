import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c,a as s,b as n,d as l,f as e}from"./app-79a64b8b.js";const i={},r=s("h1",{id:"uie-x",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#uie-x","aria-hidden":"true"},"#"),n(" UIE-X")],-1),d=s("code",null,"document_intelligence",-1),u={href:"https://link.zhihu.com/?target=https%3A//github.com/PaddlePaddle/PaddleNLP/tree/develop/applications/information_extraction/document",target:"_blank",rel:"noopener noreferrer"},y=e(`<h2 id="uie-x-文档信息抽取-pipeline" tabindex="-1"><a class="header-anchor" href="#uie-x-文档信息抽取-pipeline" aria-hidden="true">#</a> <strong>UIE-X 文档信息抽取 Pipeline</strong></h2><p>TaskFlow 中可以查看到 UIE-X 采用了以下 Pipeline。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">inputs = self._preprocess(*args)</span></span>
<span class="line"><span style="color:#24292e;">outputs = self._run_model(inputs)</span></span>
<span class="line"><span style="color:#24292e;">results = self._postprocess(outputs)</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>_postprocess</code> 没什么具体作用，只是包装以下输出结果。</p><h3 id="输入处理" tabindex="-1"><a class="header-anchor" href="#输入处理" aria-hidden="true">#</a> <strong>输入处理</strong></h3><p>输入处理步骤在 <code>inputs = self._preprocess(*args)</code> 完成，主要是使用了 OCR，从图片中提取了文字以及对应的 bbox。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># args 为原始输入图片的 path</span></span>
<span class="line"><span style="color:#24292E;">args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [{</span><span style="color:#032F62;">&quot;doc&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;test.jpg&quot;</span><span style="color:#24292E;">}]   </span><span style="color:#6A737D;"># [Dict{&quot;doc&quot;:img_path/pdf_path}]</span></span>
<span class="line"><span style="color:#6A737D;"># inputs = self._preprocess(*args) 输出内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在分析输入文件格式（ocr or pdf）后，_preprocess 使用 paddleOCR 提取了文件基础数据，包括：</span></span>
<span class="line"><span style="color:#24292E;">doc[</span><span style="color:#032F62;">&quot;image&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> np2base64(image)</span></span>
<span class="line"><span style="color:#24292E;">doc[</span><span style="color:#032F62;">&quot;offset_x&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> offset_x</span></span>
<span class="line"><span style="color:#24292E;">doc[</span><span style="color:#032F62;">&quot;offset_y&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> offset_y</span></span>
<span class="line"><span style="color:#24292E;">doc[</span><span style="color:#032F62;">&quot;img_w&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> img_w</span></span>
<span class="line"><span style="color:#24292E;">doc[</span><span style="color:#032F62;">&quot;img_h&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> img_h</span></span>
<span class="line"><span style="color:#24292E;">doc[</span><span style="color:#032F62;">&quot;layout&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.ocr(image)    </span><span style="color:#6A737D;"># ocr 解析版式以及文字内容</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> List[doc]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 layout 的结构为 ocr 的结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">[([</span><span style="color:#005CC5;">275.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">444.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">161.0</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;报告时间：&#39;</span><span style="color:#24292E;">), ([</span><span style="color:#005CC5;">1333.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1893.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">165.0</span><span style="color:#24292E;">], </span><span style="color:#032F62;">&#39;报告类型：乙肝五项定量+乙肝前 S1&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="模型预测" tabindex="-1"><a class="header-anchor" href="#模型预测" aria-hidden="true">#</a> <strong>模型预测</strong></h3>`,10),m=s("code",null,"outputs = self._run_model(inputs)",-1),h=s("code",null,"ernie_layoutx",-1),b=s("code",null,"linear",-1),v=s("code",null,"transformers/ernie_layout/modeling/UIEX",-1),E={href:"https://link.zhihu.com/?target=https%3A//github.com/PaddlePaddle/PaddleNLP/tree/develop/applications/information_extraction/document",target:"_blank",rel:"noopener noreferrer"},g=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># outputs = self._run_model(inputs)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_run_model</span><span style="color:#24292E;">(self, inputs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 主要步骤</span></span>
<span class="line"><span style="color:#24292E;">    raw_inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputs[</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">] </span></span>
<span class="line"><span style="color:#24292E;">    _inputs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._parse_inputs(raw_inputs)  </span><span style="color:#6A737D;"># 整理输入格式，提取出 text</span></span>
<span class="line"><span style="color:#24292E;">    results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._multi_stage_predict(_inputs)  </span><span style="color:#6A737D;"># 模型预测</span></span>
<span class="line"><span style="color:#24292E;">    inputs[</span><span style="color:#032F62;">&quot;result&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> results</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inputs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_inputs</code> 为 List，其中元素为:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">: text(String), </span><span style="color:#032F62;">&quot;bbox&quot;</span><span style="color:#24292E;">: bbox(List[List[Int]]), </span><span style="color:#032F62;">&quot;image&quot;</span><span style="color:#24292E;">: d[</span><span style="color:#032F62;">&quot;image&quot;</span><span style="color:#24292E;">](base64), </span><span style="color:#032F62;">&quot;layout&quot;</span><span style="color:#24292E;">: d[</span><span style="color:#032F62;">&quot;layout&quot;</span><span style="color:#24292E;">]}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改方法的重点在于 <code>self._multi_stage_predict(_inputs)</code>，其中主要流程为：</p><ol><li>对 schema_tree 上的节点，构造以下的 prompt，比如我们的 schema 为：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;姓名&#39;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;基本信息&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;兴趣爱好&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;电话号码&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;GPA&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;民族&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;邮箱&#39;</span></span>
<span class="line"><span style="color:#24292E;">    ]}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么采用 bfs 方式构建 prompt：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">prompts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;姓名&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">姓名</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">的基本信息&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">姓名</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">的电话号码&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">...</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;"># 其中 f-string 中的姓名会被替换为具体预测结果。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>对于每个 prompt 我们构建这样的模型输入：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">&quot;text&quot;: string,  # 所有 ocr 结果的拼接</span></span>
<span class="line"><span style="color:#24292e;">&quot;bbox&quot;: one_data[&quot;bbox&quot;],  # 所有 bbox 的结果，根据 ocr 字符顺序拼接</span></span>
<span class="line"><span style="color:#24292e;">&quot;image&quot;: one_data[&quot;image&quot;],  # 图片数据</span></span>
<span class="line"><span style="color:#24292e;">&quot;prompt&quot;: dbc2sbc(prompt),  # 输入的 prompt</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),f={href:"https://zhuanlan.zhihu.com/p/580997246",target:"_blank",rel:"noopener noreferrer"},_=s("h3",{id:"数据标注",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#数据标注","aria-hidden":"true"},"#"),n(),s("strong",null,"数据标注")],-1),x={href:"https://link.zhihu.com/?target=https%3A//github.com/PaddlePaddle/PaddleNLP/blob/develop/applications/information_extraction/label_studio_doc.md",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="taskflow-快速使用" tabindex="-1"><a class="header-anchor" href="#taskflow-快速使用" aria-hidden="true">#</a> <strong>TaskFlow 快速使用</strong></h2><p>在 taskflow 中使用示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> pprint </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pprint</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> paddlenlp </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Taskflow</span></span>
<span class="line"><span style="color:#24292E;">schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;姓名&#39;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;电话&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;邮箱&#39;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">my_ie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Taskflow(</span><span style="color:#032F62;">&quot;information_extraction&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">model</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;uie-x-base&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">schema</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">schema, </span><span style="color:#E36209;">task_path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;./checkpoint/model&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">precison</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;fp16&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>taskflow</code> 中的 <code>document_intelligence</code> 相比，<code>uie-x-base</code> (<code>information_extraction</code>)支持微调。但模型规模比 <code>document_intelligence</code> 小（<code>uie-x</code> 只有 12 层）。输入方面 <code>document_intelligence</code> 除了 prompt 自由点外，与 UIE-X 均相同。输出方面 <code>document_intelligence</code> 用的 BIO 序列标注，UIE-X 用的 0/1 span 抽取。</p><p>因此，对于自定义任务，还是优先使用<code>information_extraction</code> 微调。</p><h3 id="应用效果" tabindex="-1"><a class="header-anchor" href="#应用效果" aria-hidden="true">#</a> 应用效果</h3><p>从官方给出的微调效果指标看，UIE-X 在自定义任务上的效果还是不错的。但经过笔者测试，自定义任务微调后，模型对于陌生 prompt 内容的预测准确度还不是很理想。</p><figure><img src="https://pic1.zhimg.com/v2-4319d6e4a4e2c02a94dcb36ba792986c_r.jpg" alt="UIE-X 微调效果图，来源：UIE-X 文档" tabindex="0" loading="lazy"><figcaption>UIE-X 微调效果图，来源：UIE-X 文档</figcaption></figure><figure><img src="https://pic3.zhimg.com/80/v2-7eed164acb48856375d6f1c760d556f2_1440w.webp" alt="训练数据中未包含实验方法" tabindex="0" loading="lazy"><figcaption>训练数据中未包含实验方法</figcaption></figure><p>如上图，训练数据中未标记 实验方法，我们在 prompt 中加入预测 实验方法 的需求，预测出来的结果如下：</p><figure><img src="https://pic2.zhimg.com/80/v2-85f3a185d9494500efc7db35e86a8cd1_1440w.webp" alt="预测结果图" tabindex="0" loading="lazy"><figcaption>预测结果图</figcaption></figure><p>因此建议数据集中，尽可能地覆盖所有 prompt 情况。</p><h2 id="其他参考" tabindex="-1"><a class="header-anchor" href="#其他参考" aria-hidden="true">#</a> <strong>其他参考</strong></h2>`,13),A={href:"https://link.zhihu.com/?target=https%3A//aistudio.baidu.com/aistudio/projectdetail/5261592%3FsUid%3D902220%26shared%3D1%26ts%3D1676990689808",target:"_blank",rel:"noopener noreferrer"};function D(k,F){const a=p("ExternalLinkIcon");return t(),c("div",null,[r,s("p",null,[n("小结：UIE-X 可以看作使用了 Ernie-LayoutX 的框架，同时采用了开源版 UIE （非 T5 版）的 prompt 格式。同时模型权重不同。总体来说，能够在 30-shot 内实现相对好的文档图片信息抽取，uie-x 的推出在一定程度上弥补了 PaddleNLP 中"),d,n("（Ernie-Layout）不能在自定义任务上提高效果的遗憾。参考 UIE-X 文档："),s("a",u,[n("UIE-X"),l(a)])]),y,s("p",null,[n("主要的预测在 "),m,n(" 中实现推理使用的模型为 "),h,n(" 加上一层 "),b,n(" 层，通过双指针方式进行 span 信息抽取。参考"),v,n("，UIEX 可以看作使用了 LayoutX 的框架，同时采用了开源版 UIE 的 prompt 格式，模型处初始化权重外，架构主干于 layoutx 相同。而根据 "),s("a",E,[n("PaddleNLP 介绍内容"),l(a)]),n("，UIE-X 的模型权重优势未知。")]),g,s("p",null,[n("然后进行模型推理，具体的推理流程于 LayoutX 一样，可以参考 "),s("a",f,[n("Ernie-Layout 笔记"),l(a)]),n("。")]),_,s("p",null,[n("使用 "),s("a",x,[n("Label Studio"),l(a)]),n(" 进行标注。")]),q,s("p",null,[s("a",A,[n("产业实践分享：基于 UIE-X 的医疗文档信息提取，少样本微调大幅提升抽取效果"),l(a)])])])}const U=o(i,[["render",D],["__file","笔记uiex.html.vue"]]);export{U as default};
