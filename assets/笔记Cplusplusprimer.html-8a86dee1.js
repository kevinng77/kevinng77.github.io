import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,e as c,a as s,b as n,d as i,f as t}from"./app-80a5df51.js";const r="/assets/img/C++primer/image-20201230134741067.png",d={},y=s("h1",{id:"c-primer-笔记",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-primer-笔记","aria-hidden":"true"},"#"),n(" C++ primer 笔记")],-1),u=s("blockquote",null,[s("p",null,"嵌入式自学开始啦~ 为了自己的贾维斯"),s("p",null,"笔记总结于 《c++ primer》")],-1),v=t(`<h2 id="第二章" tabindex="-1"><a class="header-anchor" href="#第二章" aria-hidden="true">#</a> 第二章</h2><ul><li><p>用 double 通常比 float 好</p></li><li><p>无符号的变量应注意：循环中的问题，负值取模（如 unsigned int 模 2^32，即 8 字节）</p></li><li><p>八进制 <code>int month = 09</code> 报错</p></li><li><p>初始化列表时丢失数据会报错：<code>int i = {3.14} //错</code></p></li><li><p><code>double salary = wage = 999.99</code> 只对 salary 定义，如果 wage 已定义就不会报错</p></li><li><p>使用未初始化的变量难调试，建议初始化每一个内置类型变量</p></li><li><p>变量小写字母开头，类大写开头，单词间有区分（如 one_two 或 oneTwo）</p></li><li><p>一个变量的周期从声明开始到作用域末端结束</p></li></ul><h3 id="引用-指针" tabindex="-1"><a class="header-anchor" href="#引用-指针" aria-hidden="true">#</a> 引用，指针</h3><ul><li><p>引用初始化必须是一个对象，对象与引用类型要匹配</p></li><li><p>指针类型与对象也要匹配，指针使用前（取值）必须初始化</p></li><li><p>空指针 <code>int p1 = nullptr; //等价于 0 或者 NULL</code></p></li><li><p>指针可变指向对象，可赋值，可不初始化定义。引用反之。</p></li></ul><h3 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> const</h3><ul><li><p>const 必须初始化</p></li><li><p>多个文件中要使用同一个 const 时，用 extern 声明。<code>extern const int bufSize;</code></p></li><li><p><code>double dval = 3.14；const int &amp;ri = dval；</code> 用 const 引用时要保持类型一致，否则此处引用不会绑定到 dval 上。而是绑定临时变量 <code>const int temp = 3; </code></p></li><li><p><code>const int &amp;r2 = i; </code>不能通过 r2 更改 i 的值</p></li><li><p>指向常量的指针: <code>const double *cptr = &amp;pi; </code> 此处可以指向常量，也可以指向非常量，但是都不能通过该指针改变这个地址上的值。</p></li><li><p>常量指针：<code>int i = 0; int *const curErr = i;</code> 不能改变指针指向的值</p></li><li><p>常量与常量指针需初始化</p></li><li><p>顶层 const：不能改变变量的值</p></li><li><p>底层 const：不能改变指向的值，可以改变指向对象（底似内在，内在即价值）</p></li><li><p>拷贝时需考虑底层 const，可以无视顶层 const</p></li><li><p>Q: 对于下面的语句，请说明对象被声明为顶层 const 还是底层 const。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">） </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> v2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> v1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2;</span><span style="color:#6A737D;">          // v2 是顶层 const</span></span>
<span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">） </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v1, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">r1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v1;</span><span style="color:#6A737D;">                // 非 const</span></span>
<span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">） </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">v2, </span><span style="color:#D73A49;">*const</span><span style="color:#24292E;"> p3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">i, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">r2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2;</span><span style="color:#6A737D;">  // p2 是底层 const，p3 最左是底层，p3 前面是顶层 const， r2 是底层 const。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Q: 假设上题中的变量已定义，判断下面语句哪些合法。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">） r1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v2;</span><span style="color:#6A737D;">        // 合法，引用改变值</span></span>
<span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">） p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p2; p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1;</span><span style="color:#6A737D;">   // 不合法，p2 是底层 const，赋值对象必须同样有底层 const 才行，p2 = p1 合法</span></span>
<span class="line"><span style="color:#24292E;">（</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">） p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p3; p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p3;</span><span style="color:#6A737D;">   // 不合法，p3 是底层 const， p2 = p3 合法。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constexpr" tabindex="-1"><a class="header-anchor" href="#constexpr" aria-hidden="true">#</a> constexpr</h3><ul><li><code>constexpr int mf = 20;</code> 声明为 constexpr 类型，由编译器来验证变量的值是否为常量表达式</li></ul><h3 id="auto-类型" tabindex="-1"><a class="header-anchor" href="#auto-类型" aria-hidden="true">#</a> auto 类型</h3><ul><li><code>auto item = val1 + val2</code> val1 和 val2 必须有初始值，且类型必须相同。</li><li>auto 忽略顶层 const，保留底层 const</li><li><code>const int i = 42; const auto j2 = i, &amp;k2 - i;</code> auto 后定义的多个对象应类型一致。</li></ul><h3 id="decltype" tabindex="-1"><a class="header-anchor" href="#decltype" aria-hidden="true">#</a> decltype</h3><ul><li><code> decltype((b)) d = a; // d 为 int&amp; 类型，是 a 的引用</code></li><li>赋值是会产生引用的一类典型表达式，引用的类型就是左值的类型。也就是说，如果 i 是 int，则表达式 i=x 的类型是 int&amp;。根据该特点指出下面变量的类型。 <code>int a = 3, b = 4; decltype (a = b) d = a; // d 为 int&amp;，是 a 的引用。</code></li></ul><h3 id="struct" tabindex="-1"><a class="header-anchor" href="#struct" aria-hidden="true">#</a> struct</h3><ul><li>；</li></ul><h3 id="头文件" tabindex="-1"><a class="header-anchor" href="#头文件" aria-hidden="true">#</a> 头文件</h3><ul><li>包含只能被定义一次的实体如 const， constexpr 等</li></ul><h2 id="第三章" tabindex="-1"><a class="header-anchor" href="#第三章" aria-hidden="true">#</a> 第三章</h2><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><ul><li><code>getline(is,s)</code>从 is 读取 1 行给 s，返回 is。s 中不包含换行符</li><li>string 的相加中，必须至少有一个对象时 string 类型。字符串与 string 不是同类型</li></ul><figure><img src="`+r+`" alt="image-20201230134741067" tabindex="0" loading="lazy"><figcaption>image-20201230134741067</figcaption></figure><ul><li><p><code>string str(&quot;string&quot;); for (auto c:str){ cout &lt;&lt;c&lt;&lt;endl;}</code></p></li><li><p><code>string str(&quot;string&quot;); for (auto &amp;c:str){ c = toupper(c);} cout &lt;&lt; str&lt;&lt;endl;</code> 善用引用改变原 string</p></li><li><p><code>const string s = &quot;keep out&quot;; for (auto &amp;c :s){}</code> 其中不能通过 c 改变 s。</p></li><li><p>string 比使用 C 中的字符串运算<code>strcpy(),strcat(),strcat()</code></p></li><li><p><code>const char *str = s.c_str();</code> 用 string 的 c_str 函数来初始化，最好做一份该数组的拷贝，如果程序需要一直用这个 C 风格的字符串</p></li><li><p>与数字转换：</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;cstdlib&gt;</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#032F62;">&lt;string&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">to_string</span><span style="color:#24292E;">(digit)</span></span>
<span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::</span><span style="color:#6F42C1;">stoi</span><span style="color:#24292E;">()</span><span style="color:#6A737D;"> //stol 对 long，stoll - longlong</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>切片操作：<code>string.substr(bed, end)</code></li></ul><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器" aria-hidden="true">#</a> 容器</h3><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> vector</h3><ul><li><code>empty(),size(),push_back(),[],=v,={},==,front(),back(),pop_back(),clear()</code></li><li>使用 [] 超出范围时，编译器不会发现</li><li><code>vector&lt;string&gt; ivec( 10 );</code> 和 <code>vector&lt;string&gt; ivec{10};</code> 输出一样</li><li><code>for (auto &amp;c : ivec) </code></li><li>​ <code>auto result = max_element(nums.begin(), nums.end()-k+1);</code> 返回 result 为地址 <code>vector (result,result+k);</code></li></ul><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h3><ul><li><code>string::iterator it2;</code></li><li>指向同一容器的迭代器才能执行相减</li><li>二分法好例子：迭代器的运算和操作</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator beg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">begin</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt;::iterator mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> beg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> beg) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (mid </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">mid </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> target)</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> mid)</span></span>
<span class="line"><span style="color:#24292E;">		{beg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;}</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">		{end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid;}</span></span>
<span class="line"><span style="color:#24292E;">		mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> beg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> beg) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><ul><li>用常量表达式初始化。不能赋值或用于拷贝初始化</li><li><code>int (*Parray){10} = &amp;arr;</code> 指向有 10 个整数的数组</li><li><code>int (&amp;arrRef)[10] = arr </code> 引用一个有 10 个整数的数组</li><li><code>int *(&amp;arry)[10] = ptrs</code> 数组的引用</li><li><code>vector&lt;int&gt; subVec(int_arr + 1, int_arr + 4);</code> 数组初始化 vector 只需要指明拷贝区域的首元素地址</li></ul><h3 id="指针和数组" tabindex="-1"><a class="header-anchor" href="#指针和数组" aria-hidden="true">#</a> 指针和数组</h3><ul><li><code>int ia[] = {0,1,2,3}; auto ia2(ia);</code> ia2 是整形指针</li><li>指针也可以作为迭代器使用，如 <code>int *beg = begin(ia)</code> <code>int last = end(ia)</code></li></ul><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> pair</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">, vector</span><span style="color:#D73A49;">&lt;int&gt;&gt;</span><span style="color:#24292E;"> pp;</span></span>
<span class="line"><span style="color:#24292E;">pp p1;</span><span style="color:#6A737D;"> // 可赋值 pp.first=1, pp.second 调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">priority_queue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pp, vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pp</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">, greater</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">pp</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> store;</span><span style="color:#6A737D;"> //升序队列 #include &lt;queue&gt; </span></span>
<span class="line"><span style="color:#6A737D;">// .top() 访问头元素。 .pop() 头元素 .push(xx) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (store.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">()){}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hash 集合</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unordered_set&gt;</span></span>
<span class="line"><span style="color:#24292E;">unordered_set</span><span style="color:#D73A49;">&lt;int&gt;</span><span style="color:#24292E;"> hashset;</span></span>
<span class="line"><span style="color:#24292E;">hashset.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hashset.</span><span style="color:#6F42C1;">erase</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hashset.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> // 判断是否在集合中，否返回-1；</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第四章" tabindex="-1"><a class="header-anchor" href="#第四章" aria-hidden="true">#</a> 第四章</h2><ul><li><p>++a 可以使用时，不用 a++</p></li><li><p>再便利迭代器中，使用 <code>cout &lt;&lt; *iter++ &lt;&lt; endl;</code></p></li><li><p><code>string p = s + (s[s.size() - 1] == &#39;s&#39; ? &quot;&quot; : &quot;s&quot;); </code> 条件运算符优先级较低，条件运算符的嵌套不要超过 3 层，不然可读性很差。</p></li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><ul><li><p><code>quiz1 |= 1UL &lt;&lt; 27</code> 在 quiz 中更新 27 号同学没通过（为 0）的信息，反之用<code>quiz1 &amp;= ~(1UL &lt;&lt;27)</code></p></li><li><p><code>someValue ? ++x,++y:--x,--y</code> 不论条件如何都会执行 <code>--y</code>；</p></li></ul><h2 id="第五章" tabindex="-1"><a class="header-anchor" href="#第五章" aria-hidden="true">#</a> 第五章</h2><ul><li><p>悬垂 else (dangling else)</p></li><li><p>若省略 switch 分支后的 break，请加上程序的逻辑注释</p></li><li><p>switch 后定义 default 标签也是有用的，即使什么都不做时。</p></li><li><p>范围 for 语句：<code>for (auto &amp;r:v)</code></p></li><li><p>必须时刻清楚异常何时发生，异常发生后程序应如何确保对象有效，资源无泄漏，程序处于合理状态等。</p></li></ul><h2 id="第六章" tabindex="-1"><a class="header-anchor" href="#第六章" aria-hidden="true">#</a> 第六章</h2><ul><li><p>形参，局部变量，局部静态变量</p></li><li><p><code>int my_fact(){static int cnt = 0; return cnt++;}</code> 局部静态变量例：第一次调用返回 0，以后每次调用返回值加 1。</p></li><li><p>头文件声明函数<code>void myfun1();</code> ,main.cpp 中<code>#include &quot;头文件.h&quot;</code>，在 fun.cpp 中定义函数<code>#include &quot;头文件.h&quot;; void myfun1(){return;}</code></p></li><li><p>用函数改变外部变量的值，在 c++中传递引用代替传递指针，数值交换为例</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">	b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果函数无需改变引用形参的值，最好将其声明为常量引用。应注意函数在某些定义后是否只接受普通引用。</li></ul><h3 id="传递数组" tabindex="-1"><a class="header-anchor" href="#传递数组" aria-hidden="true">#</a> 传递数组</h3><ul><li><p>用传入 char 类型，空字符表示数组结束 <code>void print(const char *cp){uf (cp) {while (*cp)}}</code></p></li><li><p>传入开头和结尾的位置 <code>void print(const int *beg, const int *end){while (beg != end){cout&lt;&lt; *beg++&lt;&lt;endl;}}</code></p></li><li><p>传入开头和数组大小 <code>void print(const int ia[],size_t size)</code></p></li><li><p>传入固定长度的数组 <code>void print( const int (&amp;a)[10])</code> ,输入长度不正确的数组则报错。如果用<code>void print( const int a[10])</code> 在输入数组不为 10 的情况下会输出错误信息。</p></li><li><p>向 main 函数传递参数：<code>prog -d -o ofile data0</code></p></li><li><p>函数的实参数量未知但是类型相同，可使用 initializer_list。如 <code>void error_msg(initializer_list&lt;string&gt; il){}</code></p></li><li><p>省略符形参仅仅用于 C 和 C++通用的类型，大多数类型的对象在传递给省略符时都无法正确拷贝。</p></li><li><p>当循环控制变量时基本类型时，可不声明为引用。否则将循环控制变量声明称引用类型避免拷贝</p></li><li><p>在含有 return 语句的循环后面应该也有一条 return 语句。</p></li><li><p>不要返回局部变量的引用或者指针</p></li><li><p>main 返回 0 可以表示为执行成功</p></li><li><p>函数返回引用，<code>int &amp;get(int *array,int index){return arry[index]}</code></p></li></ul><h3 id="返回数组指针" tabindex="-1"><a class="header-anchor" href="#返回数组指针" aria-hidden="true">#</a> 返回数组指针</h3><ul><li><p>例二为：返回数组的引用，该数组包含 10 个 string 对象。</p></li><li><p>类型别名<code>typedif int arrT[10]; using arrT = int[10]; arrT* func(int i);</code> <code>using arrStr = string[10]; arrStr&amp; func( arrStr&amp; arr_str );</code></p></li><li><p><code>int (*func(int i))[10]</code> <code>string(&amp;str(void)[10]</code></p></li><li><p>尾置返回类型，<code>auto func(int i) -&gt; int(*)[10]; </code> <code>auto func (string (&amp;str)[10] ) -&gt; string(&amp;)[10];</code></p></li><li><p>用 decltype<code>int odd[] = {1,3,5}; decltype(odd) *arrPtr(int i){return &amp;odd;}</code> <code>string str[10]; decltype(str) &amp;func ( decltype(str)&amp; );</code></p></li></ul><h3 id="函数重载" tabindex="-1"><a class="header-anchor" href="#函数重载" aria-hidden="true">#</a> 函数重载</h3><ul><li>const_cast 和重载</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">shorterString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">s1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">s2</span><span style="color:#24292E;">){ </span></span>
<span class="line"><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shorterString</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const_cast&lt;const</span><span style="color:#24292E;"> string</span><span style="color:#D73A49;">&amp;&gt;</span><span style="color:#24292E;">(s1),</span><span style="color:#D73A49;">const_cast&lt;const</span><span style="color:#24292E;"> string</span><span style="color:#D73A49;">&amp;&gt;</span><span style="color:#24292E;">(s2)); </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const_cast&lt;</span><span style="color:#24292E;">string</span><span style="color:#D73A49;">&amp;&gt;</span><span style="color:#24292E;">(r); }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>原 shorterstring 函数的形参为常量引用类型，用 const_cast 重载函数，使其允许形参为 string 类型</p><ul><li><p><code>int calc(int,int); int calc(const int, const int);</code> 重复声明，c++中允许函数重复声明，不会报错。</p></li><li><p>在局部作用域中（如函数中）声明函数不是一个好的选择。在调用函数时，一旦在当前作用域中找到了所需的名字，编译器会忽略掉外层作用域中的同名实体，使函数重载失效。</p></li></ul><h3 id="函数默认实参" tabindex="-1"><a class="header-anchor" href="#函数默认实参" aria-hidden="true">#</a> 函数默认实参</h3><ul><li>使用默认实参调用函数时，只能省略尾部的实参。</li><li>在给定作用域中一个形参只能被赋予一次默认实参，但可以多次声明。</li><li>表达式能作为默认实参，<code>sz wd = 80; char def = &#39; &#39;;string screen(sz = ht(),char = def);</code></li></ul><h3 id="内联函数和-constexpr" tabindex="-1"><a class="header-anchor" href="#内联函数和-constexpr" aria-hidden="true">#</a> 内联函数和 constexpr</h3><ul><li><p><code>inline const string &amp;shorterString(const string s1,const string s2){return s1.size() &lt;= s2.size()?s1:s2};</code> 内联函数只是向编译器发出一个请求，编译器可以忽略这个请求。</p></li><li><p>内联机制用于优化规模较小，调用频繁的函数。如上例中的内联函数在编译时将被替换成 <code>s1.size() &lt;= s2.size()?s1:s2</code></p></li><li><p>内联函数和 constexpr 通常定义在头文件中。</p></li></ul><h3 id="调试帮助" tabindex="-1"><a class="header-anchor" href="#调试帮助" aria-hidden="true">#</a> 调试帮助</h3><ul><li>我们可以把 assert 预处理宏 当成调试程序的一种辅助手段，但是不能用它替代真正的运行时逻辑检查，也不能替代程序本身应该包含的错误检查。<code>assert(s==sougnt)</code></li><li>NDEBUG 可使用以下名字来调试：<code>__FILE__,__LINE__,__TIME__,__DATE__</code> 分别为 存放文件名的字符串字面值，存放当前行号的整形字面值，存放文件编译时间的字符串字面值，存放文件编译日期的字符串字面值。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NDEBUG</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ia</span><span style="color:#24292E;">[],</span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#D73A49;">#ifndef</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NDEGUB</span></span>
<span class="line"><span style="color:#24292E;">cerr</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> __func__</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">&quot;array size is &quot;</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;">size </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#D73A49;">#endif</span><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数匹配" tabindex="-1"><a class="header-anchor" href="#函数匹配" aria-hidden="true">#</a> 函数匹配</h3><ul><li>编译器将因为调用函数具有二义性二拒绝请求，即每个可行函数都无法从整体上判断孰优孰劣。</li><li>调用重载函数时应尽量避免强制类型转换。</li><li>实参类型转换顺序如下：1，精确匹配。 2，通过 const 转换实现匹配。 3，类型转换。如 char 到 int。4，算数类型转换或指针转换。如 double 到 int。 5，通过类类型转换匹配。</li></ul><h3 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针" aria-hidden="true">#</a> 函数指针</h3><ul><li><p>指向不同函数类型的指针间不存在转换规则。</p></li><li><p>重载函数的指针必须清晰的界定参数与返回类型<code>void ff(unsigned int);void ff(int*); void (*pf1)(unsigned int) ==ff;</code></p></li><li><p>使用类型别名来简化函数指针代码。<code>typedef bool Func(const string&amp;, const string&amp;); void useBigger(const string&amp;,Func);</code></p></li><li><p>返回函数指针：</p><ul><li>使用类型别名<code>using F = int(int*,int); using PF = int(*)(int*,int);</code> <code>PF f1(int); F *f1(int);</code></li><li><code>int (*f1(int))(int*,int);</code></li><li>尾置返回类型。<code>auto f1(int) -&gt; int (*)(int*, int);</code></li></ul></li><li><p>例 6.7</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b; }</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b); }</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> b; }</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">divide</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    vector</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">*&gt;</span><span style="color:#24292E;"> vec{ add, sub,multiply, divide };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">auto</span><span style="color:#24292E;"> f : vec) {</span></span>
<span class="line"><span style="color:#24292E;">        cout </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> endl;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第七章-类" tabindex="-1"><a class="header-anchor" href="#第七章-类" aria-hidden="true">#</a> 第七章 类</h2><ul><li>定义在类内部的函数时隐式的 inline 函数</li><li>常量成员函数：参数列表后面的 const 表示 this 是一个指向常量的指针</li><li>类外定义，类内声明<code>Sales_data::Sales_data(std::istream &amp;is){read(is, *this);}</code></li><li>struct 和 class 定义类的唯一区别就是默认的访问权限，class 默认全部为 private，struct 默认全部 public。</li><li>可以在类内和类外声明 inline，令成员作为内联函数。</li><li>返回<code>Screen &amp;</code> 与返回 <code>Screen</code> 的差别。<code>Screen &amp;set(pos r, pos col, char ch){.....return *this;}</code></li><li>从 const 成员函数返回 *this ，若返回的是引用，则返回的是常量引用。 <code>const Screen&amp; display(.....)const{.....}</code></li><li>建议：公共代码使用私有功能函数。类函功能的实现与函数的设计应考虑到 后续类规模发展使函数复杂时所需改动的工作量。因为类内部定义的内联函数，额外的函数调用不会增加任何开销。</li><li>类想把重载函数声明称友元，则要对函数中的每一个分别声明。</li><li>友元声明的作用时影响访问权限，它本身并非普通意义上的声明。即使类内声明了友元，类外也需要声明。（有的编译器并不强制执行这条规则）</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // 先声明友元</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#6A737D;">    /*</span></span>
<span class="line"><span style="color:#6A737D;">    这边写接口函数</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//类有另一个构造函数，那么 defualt 函数是必须的。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){m_a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a; m_b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;}</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">): </span><span style="color:#6F42C1;">m_a</span><span style="color:#24292E;">(a),</span><span style="color:#6F42C1;">m_b</span><span style="color:#24292E;">(b){}</span><span style="color:#6A737D;"> //下方先声明 int m_a,int m_b，再根据声明的顺序进行定义初始化</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">        //添加 explicit ，禁止通过隐式法调用构造函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">explicit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> Person </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">p){</span></span>
<span class="line"><span style="color:#24292E;">            m_a</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.a; </span></span>
<span class="line"><span style="color:#24292E;">            name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(str)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//再做拷贝时候，重新给对象开辟一个空间</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(name,p.name);</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#6A737D;">//使用深拷贝，代替系统默认的浅拷贝构造，简单的浅拷贝做了简单的值拷贝，类中变量指向同一个地址，析构时会出错</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">~Person</span><span style="color:#24292E;">(){</span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">             name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;}</span><span style="color:#6A737D;"> //析构函数 类名前加上~， 没有返回值，无参数，不能发生函数重载   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_a;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m_b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    Person </span><span style="color:#6F42C1;">p1</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //构造函数再实例化对象时自动调用</span></span>
<span class="line"><span style="color:#24292E;">    Person P2;</span><span style="color:#6A737D;"> //无参构造不使用括号</span></span>
<span class="line"><span style="color:#24292E;">  	</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//匿名对象；或 person()无参构造调用匿名对象;生命周期再当前行</span></span>
<span class="line"><span style="color:#6A737D;">    //销毁之前（如出了函数，或作用域）析构函数自动调用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(p2);</span><span style="color:#6A737D;">//再定义时，不能用括号法调用匿名对象</span></span>
<span class="line"><span style="color:#24292E;">    person p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;luchy&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;"> //显示法调用有参构造</span></span>
<span class="line"><span style="color:#24292E;">    person p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;lucy&quot;</span><span style="color:#24292E;">}</span><span style="color:#6A737D;"> //隐式法(不大使用)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造函数-2" tabindex="-1"><a class="header-anchor" href="#构造函数-2" aria-hidden="true">#</a> 构造函数 2</h4><ul><li><p>最好令构造函数初始值的顺序与成员声明的顺序保持一致。而且如果可能的话，尽量避免使用某些成员初始化其他成员。</p></li><li><p>用一个成员初始化另一个成员时，应考虑顺序问题。</p></li><li><p>对于委托构造函数，受托函数总是会被先执行。</p></li><li><p>explicit 限制只能直接初始化。编译器将不会再自动转换过程中使用该构造函数。</p></li><li><p>聚合类（成员全部 public，没有构造函数，没有初始值，没有基类）才能够使用隐式法初始化：<code>Sales_data item = {&quot;123-456&quot;,25,15.99}</code></p></li></ul><h4 id="类的静态成员" tabindex="-1"><a class="header-anchor" href="#类的静态成员" aria-hidden="true">#</a> 类的静态成员</h4><ul><li><p>static 关键字则只出现在类内部的声明语句中。类外声明不能重复 static 关键字。</p></li><li><p>要想确保对象只定义一次，最好把静态数据成员的定义与其他非内联函数的定义放在同一个文件里。</p></li><li><p>类内的静态成员初始化应使用常量表达式。</p></li><li><p>编译阶段就分配内存；不能再类内初始化，只能声明；存在静态全局区；所有类成员共享 1 个静态成员</p></li><li><p>可以利用静态成员来实现类的单例模式。</p></li></ul><h2 id="第八章" tabindex="-1"><a class="header-anchor" href="#第八章" aria-hidden="true">#</a> 第八章</h2><h3 id="io-类" tabindex="-1"><a class="header-anchor" href="#io-类" aria-hidden="true">#</a> IO 类</h3><ul><li>当一个程序崩溃后，它所输出的数据很可能停留在输出缓存区等待打印。</li><li>持续更新</li></ul><h2 id="第九章-容器" tabindex="-1"><a class="header-anchor" href="#第九章-容器" aria-hidden="true">#</a> 第九章 容器</h2><ul><li><p>list 双向链表，forward_list 单向链表</p></li><li><p><code>vector&lt;&gt;::const_iterator</code> 不能修改元素的迭代器，<code>c.cbegin();c.cend();</code></p></li><li><p>迭代器（即地址）的大小比较没有意义，不应该在 while 条件中以迭代器大小为比较。</p></li><li><p>array 类型必须同时指定元素类型和大小。<code>array&lt;int,10&gt; arr;</code></p></li><li><p>接受容器创建拷贝构造时，全部类型必须一致。接受两个迭代器创建的拷贝构造，不要求类型相同，只要拷贝的元素能转换就行。</p></li><li><p><code>vector&lt;int&gt;(v1).swap(v1);</code> swap 收缩空间</p></li><li><p>除了 array ，swap 只是交换了两个容器的内部数据结构，不对元素进行拷贝，删除等处理，时间复杂度为常数。</p></li></ul><h3 id="顺序容器操作" tabindex="-1"><a class="header-anchor" href="#顺序容器操作" aria-hidden="true">#</a> 顺序容器操作</h3><ul><li><p>对 vector, string, deque 插入或者删除元素会使所以指向容器的迭代器引用和指针失效。</p></li><li><p>insert 返回指向第一个新加入元素的迭代器。</p></li><li><p>emplace 直接构造元素，如：<code>c.emplace_back(&quot;123&quot;,25,15.9); 类似 c.push_back(Sales_data(&quot;123&quot;,25,15.9));</code> emplace 也可以使用默认的构造函数如：<code>c.emplace_back()</code></p></li><li><p><code>c.back(), c.front(), c[] </code>等访问成员返回的是引用。</p></li><li><p>.at() 越界的话会抛出 out_of_range 错误，下标[]不会。</p></li><li><p>删除元素的函数并不检查其参数，在删除元素钱，程序员必须确保他们存在。如<code>pop_back(), pop_front(), erase(),clear()</code></p></li><li><p>对容器进行操作后（如删除或者插入元素等），必需要更新迭代器。使用无效迭代器，指针或者引用都是严重运行错误。</p></li><li><p>forward_list 可以用 before_begin()迭代器，它的操作比较特别</p></li><li><p>如果使用<code>resize</code>缩小容器，则指向被删除的元素的迭代器，引用和指针都会失效。</p></li><li><p>capacity（最大容量） 和 size（已有元素大小）</p></li><li><p>string 和数值转换相关函数</p></li></ul><h2 id="第十章-泛型算法" tabindex="-1"><a class="header-anchor" href="#第十章-泛型算法" aria-hidden="true">#</a> 第十章 泛型算法</h2><ul><li><p>泛型算法不会改变底层容器的大小（因为都是通过迭代器操作）。他可能改变，移动容器中的元素，但不会直接添加或删除元素。</p></li><li><p>只读算法：find(beg, end, val), count(beg, end, val), accumulate(beg, end, start_val), equal(l1_beg, l1_end, l2_beg)</p></li><li><p>写入算法 fill(beg, end, val), fill_n(beg, n, val),</p></li><li><p><code>vector&lt;int&gt; vec; auto it = back_inserter(vec); *it = 42;</code> 通过 back_inserter 赋值，向 vec 添加元素。</p></li><li><p><code>auto ret = copy(begin(a1), end(a1), a2);</code> ret 指向 a2 尾元素之后的位置。复制要确认 a2 的大小足够。</p></li><li><p><code>auto end_unique = unique(words.begin(),words.end());</code> unique 不会删除元素，而是将不重复的元素向前覆盖重复的元素。</p></li><li><p><code>bool isShorter(){return a.size()&lt;b.size()} stable_sort(s.begin(),s.end(),isShorter);</code></p></li></ul><h3 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> lambda</h3><ul><li>lambda <code>stable_sort(w.begin(),w.end(),[](const string &amp;a, const string &amp;b){return a.size() &lt; b.size();});</code></li><li><code>int sz = 10; find_if(w.beg(),w.end(),[sz](const string &amp;a){ return a.size()&gt;= sz;} );</code> 获取迭代器，指向第一个符合条件的地址。 捕获的值为 lambda 创建时候 sz 的值，而不是使用时候的 sz 的值。 <strong>如果要使用最新的 sz 值，那么应该捕获 sz 的引用。[&amp;sz]</strong></li><li><code>[&amp;, c] (const string &amp;s){ os &lt;&lt; s &lt;&lt; c;}</code> c 显示捕获，值捕获；os 隐式捕获，引用捕获。</li><li>改变捕获的值：<code>auto f = [v1]() mutable {return ++v1;}</code></li><li>指定返回类型：<code>[](int i)-&gt; int {if (i&lt;0) return -i; else return i;}</code> 使用尾置返回类型。</li><li><code>auto wc = find_if(w.begin(),w.end(), bind(check_size, _1, sz))</code> <code>_1</code> 表示可调用参数的位置，<code>_1</code>为第一个参数。</li><li><code>auto g = bin(f,a,b,_2,c,_1); g(X,Y)即为 f(a,b,Y,c,X)</code></li></ul><h3 id="迭代器-1" tabindex="-1"><a class="header-anchor" href="#迭代器-1" aria-hidden="true">#</a> 迭代器</h3><ul><li><p>front-inserter 生成的迭代器会将插入的元素序列顺序颠倒。</p></li><li><p>插入迭代器进行 *it，++it，it++不会发生什么</p></li><li><p><code>istream_iterator&lt;int&gt; in_iter(cin); istream_iterator&lt;int&gt; eof; while(in_iter != eof)</code> 绑定到流的迭代器，一旦关联到流遇到文件尾或者 IO 错误，迭代器的值舅和尾后迭代器相等。</p></li><li><p>巧妙利用算法与迭代器 <code>istream_iterator&lt;int&gt; in(cin),eof; cout&lt;&lt; accumulate(in, eof, 0) &lt;&lt; endl;</code></p></li><li><p><code>ostream_iterator&lt;int&gt; out_iter(cout,&quot; ); copy(vec.begin(),vec.end(),out_iter);</code> 使用 copy 打印，比 for 循环简单。</p></li><li><p>灵活应用<code>rbeg(),rend()</code> 反向迭代器</p></li></ul><h3 id="特定容器算法" tabindex="-1"><a class="header-anchor" href="#特定容器算法" aria-hidden="true">#</a> 特定容器算法</h3><ul><li>优先使用成员函数版本算法，如<code>list 使用 .merge(), .remove(), .sort(comp, .unique()</code></li></ul><h2 id="第-十一-章-关联容器" tabindex="-1"><a class="header-anchor" href="#第-十一-章-关联容器" aria-hidden="true">#</a> 第 十一 章 关联容器</h2><ul><li><p><code>map&lt;string, size_t&gt; word_count = {{&quot;a&quot;,1},{&quot;b&quot;,1}}; word_count.insert({word,1}); word_count[&quot;c&quot;] = 1</code></p></li><li><p><code>word_count.find()</code> 返回迭代器指向当前查找元素的位置否则返回 map::end()位置</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292e;">it = myMap.find(key);</span></span>
<span class="line"><span style="color:#24292e;">if(it != myMap.end())</span></span>
<span class="line"><span style="color:#24292e;">  { string valueStr = it-&gt;second;}</span></span>
<span class="line"><span style="color:#24292e;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>pair&lt;T1,T2&gt; p;</code></p></li><li><p><code>set&lt;int&gt; s = {....}; s.find(), .count()</code>set 的迭代器是 const 的。 <code>set&lt;int&gt;::iterator it; for(it=s.begin();it!=s.end();it++){*it;}</code></p></li><li><p>利用无序容器的优势<code>unorderd_map</code></p></li></ul><h2 id="第-十二-章-动态内存" tabindex="-1"><a class="header-anchor" href="#第-十二-章-动态内存" aria-hidden="true">#</a> 第 十二 章 动态内存</h2><ul><li><code>shared_ptr&lt;int&gt; p3 = make_shared&lt;int&gt;(42); </code>只要有对象引用 shared_ptr，他就不会被销毁。</li><li>new 完 delete</li><li><code>shared_ptr&lt;int&gt; p2(new int(1024));</code></li><li><code>unique_ptr&lt;int&gt; p(new int(42))</code> unique 不支持拷贝和赋值，可以通过 reset 和 release 来将指针的所有权从一个非 const unique_ptr 转向另一个 unique。可以拷贝或赋值一个将要被销毁的 unique，如从函数返回一个 unique。</li><li>unique 必须绑定 new</li><li>不使用相同的内置指针值初始化多个智能指针。</li><li>不 delete get() 返回的指针。</li><li>不使用 get 初始化 智能指针</li><li>使用智能指针管理的不是 new 分配的内存，记得给他传递一个删除器。</li><li>weak_ptr 需要 shared_ptr 来初始化。</li><li><code>ListNode* dummyHead = new ListNode(0);</code></li></ul><h3 id="动态数组" tabindex="-1"><a class="header-anchor" href="#动态数组" aria-hidden="true">#</a> 动态数组</h3><ul><li><p><code>int *p = new int[42]{1,2,3,4}; delete [] p;</code></p></li><li><p><code>unique_ptr&lt;int[]&gt; p(new int[10]);</code></p></li><li><p><code>allocator&lt;string&gt; alloc; auto const p = alloc.allocate(n);</code> allocator 分配未构造的对象。</p></li><li><p><code>auto q = p; alloc.construct(q++,10,&#39;c&#39;);</code></p></li><li><p><code>while(q!=p) alloc.destroy(--q);</code> 释放构造的元素。 <code>alloc.deallocate(p,n);</code> 释放空间</p></li></ul><h2 id="第-十三-章-拷贝控制" tabindex="-1"><a class="header-anchor" href="#第-十三-章-拷贝控制" aria-hidden="true">#</a> 第 十三 章 拷贝控制</h2><ul><li><p>当对象的引用或者指针离开作用域时，析构函数不会执行。</p></li><li><p>使用 <code>NoCopy(const NoCopy&amp;) =delete;</code> 阻止拷贝构造。而不应该将它们声明为 private 的。</p></li><li><p>赋值运算符正确工作应为：在销毁左侧运算对象资源之前，拷贝好右侧对象资源。</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(HasPtr </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">lhs</span><span style="color:#24292E;">, HasPtr </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">rhs</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">using std::swap;</span></span>
<span class="line"><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(lhs.ps,rhs.ps);</span></span>
<span class="line"><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(lhs.i,rhs.i);</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;"> // swap 内的 swap 是 std 命名空间下的</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>变量是左值，不能将一个 <strong>右值引用</strong> 直接绑定到一个变量上，即使变量是右值引用。可以通过<code>int &amp;&amp;rr3 = std::move(rr1);</code> move 意味着除了对 rr1 赋值或者销毁它之外，我们将不再使用它。</p></li><li><p>移动构造函数：除非标准库知道我们的移动构造函数不会抛出异常，否则他会认为移动我们的类对象可能会抛出异常，平且为了处理这种可能性而做一些额外的工作。使用<code>noexcept</code>表示该类不会报错。</p></li><li><p>移动迭代器的解引用运算符生成一个右值引用</p></li></ul><h2 id="第-十四-章-重载运算与类型转换" tabindex="-1"><a class="header-anchor" href="#第-十四-章-重载运算与类型转换" aria-hidden="true">#</a> 第 十四 章 重载运算与类型转换</h2><ul><li><p>=，[]，()，和-&gt;操作只能通过成员函数进行重载</p></li><li><p>&lt;&lt; 和&gt;&gt;只能通过全局函数配合友元函数进行重载</p></li><li><p>不要重载&amp;&amp;，||，不然短路规则可能会实现不了</p></li><li><p>右击系统库的函数，点击转到定义可以查看函数定义</p></li><li><p>如果类具有比较性，那么应该重载比较符号。</p></li><li><p><strong>所有的一元运算符建议使用成员函数重载</strong></p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">person p1;</span></span>
<span class="line"><span style="color:#24292E;">person p2;</span></span>
<span class="line"><span style="color:#24292E;">person p3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p2;</span></span>
<span class="line"><span style="color:#6A737D;">//系统调用</span></span>
<span class="line"><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">+</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">p1</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">p2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">或</span></span>
<span class="line"><span style="color:#24292E;">p1.</span><span style="color:#6F42C1;">operator</span><span style="color:#24292E;">(p2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">+</span><span style="color:#24292E;">( </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">person </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(p1.age </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> p2.age)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 或类内实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">person</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">++</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;num </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">name1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">==</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">age </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p2.age </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p2.name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">+</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    person </span><span style="color:#6F42C1;">p</span><span style="color:#24292E;">(this -&gt; age</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">pe.age)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    string name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>赋值运算符重载</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span><span style="color:#6A737D;"> //p2.operator=(p1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1.age;</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1.name;</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#6A737D;"> //系统自动生成的=重载只做简单的值拷贝；这样 p1 的 name 与 p2 的 name 指向同一个地址。在释放空间时会出错</span></span>
<span class="line"><span style="color:#6F42C1;">person</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">=</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">p1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p1.age;</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[</span><span style="color:#6F42C1;">strlen</span><span style="color:#24292E;">(p1.name)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">strcpy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">-&gt;name, p1.name);</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>function 类型：<code>function&lt;int(int,int)&gt; f1 = add; f1(4,2);</code></p></li><li><p>不能将重载函数的名称直接存入 function 类型对象中。可以使用 lambda 消除二义性<code>{&quot;+&quot;,[]{int a, int b}{return add(a,b);}}</code> 这样就知道要用的是使用两个 int 的 add。</p></li><li><p>定义有类型转换运算符的类，类中实现 <code>operator int() cost { return val;}</code>。应避免过度使用类型转换函数。</p></li><li><p>如果对一个类同时定义了转换目标是算术类型的转换（如 int 到类，类到 int），也定义了重载的运算符，那么重载运算符与内置运算符会存在二义性问题。</p></li></ul><h2 id="第-十五-章-面向对象程序设计" tabindex="-1"><a class="header-anchor" href="#第-十五-章-面向对象程序设计" aria-hidden="true">#</a> 第 十五 章 面向对象程序设计</h2><ul><li>基类定义的虚函数，派生类需要提供自己的新定义以覆盖。</li><li>运行时绑定（动态绑定）：因为参数存在类，根据传入父类或者子类才决定函数运行版本。</li><li>基类通常都应该定义一个虚构造函数</li><li>protected 派生类成员可访问，其他不能访问</li><li>不能作为基类，<code>class Last final{};</code>不能继承 Last 类</li><li>基类中的静态成员只会存在一个，不会被重复创造。</li><li>在派生类中可以使用 override 来说明和检查虚函数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#D73A49;">protected:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#D73A49;">private:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c;};</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6A737D;">/*public:</span></span>
<span class="line"><span style="color:#6A737D;">    int age;</span></span>
<span class="line"><span style="color:#6A737D;">protected:</span></span>
<span class="line"><span style="color:#6A737D;">    int b;</span></span>
<span class="line"><span style="color:#6A737D;">private:</span></span>
<span class="line"><span style="color:#6A737D;">    int c;</span></span>
<span class="line"><span style="color:#6A737D;">    */</span><span style="color:#24292E;">} </span><span style="color:#6A737D;">//公有继承方式，基类中是什么控制权限，继承到子类中也是什么控制权限</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> : </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6A737D;"> /* 保护继承，将父类中共有的变成保护的，子类不能访问父类的 private 成员</span></span>
<span class="line"><span style="color:#6A737D;">protected:</span></span>
<span class="line"><span style="color:#6A737D;"> 	int age;</span></span>
<span class="line"><span style="color:#6A737D;">    int b;</span></span>
<span class="line"><span style="color:#6A737D;">private:</span></span>
<span class="line"><span style="color:#6A737D;">    int c;</span></span>
<span class="line"><span style="color:#6A737D;">    */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> :</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6A737D;">/* 私有继承，将父类中所有成员变成私有的，子类不能访问父类的 private 成员，看继承之前的权限</span></span>
<span class="line"><span style="color:#6A737D;">private:</span></span>
<span class="line"><span style="color:#6A737D;">    int c;int age;int b;</span></span>
<span class="line"><span style="color:#6A737D;">    */</span><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-十六-章-模板与泛型编程" tabindex="-1"><a class="header-anchor" href="#第-十六-章-模板与泛型编程" aria-hidden="true">#</a> 第 十六 章 模板与泛型编程</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;</span><span style="color:#6A737D;"> //定义一个模板，模板的通用类型未 T</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swap_temp</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{	T temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;}</span></span>
<span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">animal</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#D73A49;">public:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">animal</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T1</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">T2</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">        data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	T1 age;</span></span>
<span class="line"><span style="color:#24292E;">    T2 data;</span></span>
<span class="line"><span style="color:#24292E;">};</span><span style="color:#6A737D;"> //类模板不能自动推导类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//类外定义类模板成员函数</span></span>
<span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">BlobPtr</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">BlobPtr</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;::</span><span style="color:#D73A49;">operator</span><span style="color:#6F42C1;">++</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    BlobPtr ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">++*</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1" aria-hidden="true">#</a> 其他</h2><p>rand()会返回一随机数值, 范围在 0 至 RAND_MAX 间。RAND_MAX 定义在 stdlib.h, 其值为 2147483647</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rand</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">(r</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">l)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">l;</span><span style="color:#6A737D;">  // r - l 之间的随机整数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,117),E={href:"https://leetcode-cn.com/problems/smallest-k-lcci/submissions/",target:"_blank",rel:"noopener noreferrer"},b=s("h4",{id:"-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#-1","aria-hidden":"true"},"#")],-1),m=s("p",null,[s("code",null,"bool binary_search(arr[],arr[]+size , target)"),n(" 目标值是否在范围内。")],-1),h=s("p",null,[s("code",null,"int lower_bound(arr[],arr[]+size , target):"),n(" 返回目标值在单调范围内应该插入的位置。")],-1);function A(g,D){const a=p("ExternalLinkIcon");return e(),o("div",null,[y,u,c(" more"),v,s("p",null,[s("a",E,[n("quicksort 模版"),i(a)])]),b,m,h])}const _=l(d,[["render",A],["__file","笔记Cplusplusprimer.html.vue"]]);export{_ as default};
