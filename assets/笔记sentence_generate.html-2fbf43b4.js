import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as t,e as i,a as s,b as a,d as e,f as l}from"./app-c62a9332.js";const r={},d=s("blockquote",null,[s("p",null,"paddlenlp 源码中的 Beam Search、cache 机制笔记")],-1),y=l(`<h2 id="beam-search" tabindex="-1"><a class="header-anchor" href="#beam-search" aria-hidden="true">#</a> Beam Search</h2><h3 id="paddle-beam-search-实现分析" tabindex="-1"><a class="header-anchor" href="#paddle-beam-search-实现分析" aria-hidden="true">#</a> paddle beam search 实现分析</h3><p><strong>整体逻辑</strong> 模型执行生成代码： <code>model.generate( input_ids,...)</code> 执行解码通用操作：</p><ul><li>获取相关输入数据，如 input_ids，bos_token_id，eos_token_id 等数据</li><li>准备<code>cache</code> 相关数据，配置<code>logits_processors</code> 函数用于每个时间步的 logits 调整。（如重复字符惩罚等）</li></ul><p>而后准备 <code>beam_search</code> 过程中需要的数据：</p><ul><li>使用<code>expand_inputs_for_generation</code> 将 系列的输入如<code>input_ds</code>等拓展为 <code>[batch_size *num_beam, len_seq]</code>维度，包括 <code>token_type_ids</code>，<code>position_ids</code>，<code>encoder_output</code> 等参数。</li><li>准备 <code>beam_scorer</code> - 用来计算 beam search 分数</li></ul><p>最后，进行 <code>beam_search</code> 解码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># 初始化 beam_scores</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> cur_len </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> max_length:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 输入格式处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 模型前向传导，计算 logits</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># logits 调整与处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 更新整体 score，选择 top K</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输入格式处理" tabindex="-1"><a class="header-anchor" href="#输入格式处理" aria-hidden="true">#</a> <strong>输入格式处理</strong></h4><p>由模型下的 <code>prepare_inputs_for_generation</code> 实现。可以在每个时间步的前向传导前，调整模型的输入。如一个 encoder-decoder 架构的模型使用<code>cache</code>时，我们在每个时间步需要更新 <code>cache</code> 并且将 decoder 的相关输入（如<code>decoder_input_ids</code>, <code>decoder_attention_mask</code>等）截取保留最后一个时间步的数据。 例：<code>paddlenlp.transformers.BartForConditionalGeneration</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare_inputs_for_generation</span><span style="color:#24292E;">(self,</span></span>
<span class="line"><span style="color:#24292E;">                                      decoder_input_ids,</span></span>
<span class="line"><span style="color:#24292E;">                                      attention_mask</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      decoder_attention_mask</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      cache</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      use_cache</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      encoder_output</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># cut decoder_input_ids if past is used</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            decoder_input_ids </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> decoder_input_ids[:, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].unsqueeze(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> decoder_attention_mask </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                decoder_attention_mask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> decoder_attention_mask[:, :,</span></span>
<span class="line"><span style="color:#24292E;">                                                                </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, :].unsqueeze(</span></span>
<span class="line"><span style="color:#24292E;">                                                                    </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;input_ids&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;decoder_input_ids&quot;</span><span style="color:#24292E;">: decoder_input_ids,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;encoder_output&quot;</span><span style="color:#24292E;">: encoder_output,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;decoder_attention_mask&quot;</span><span style="color:#24292E;">: decoder_attention_mask,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;attention_mask&quot;</span><span style="color:#24292E;">: attention_mask,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;use_cache&quot;</span><span style="color:#24292E;">: use_cache,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;cache&quot;</span><span style="color:#24292E;">: cache</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="logits-调整与处理" tabindex="-1"><a class="header-anchor" href="#logits-调整与处理" aria-hidden="true">#</a> logits 调整与处理</h4><p>在执行 <code>outputs = self(**model_inputs)</code>前向传导后，在计算 <code>beam_score</code> 前针对输出的 logits 进行了调整。主要包括两部分：</p><ul><li>静态信息调整，如禁用某些固定的词或 token。模型通过重写<code>adjust_logits_during_generation</code>函数来实现。例 <code>paddlenlp.transformers.UNIMOLMHeadModel</code>：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">adjust_logits_during_generation</span><span style="color:#24292E;">(self, logits):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># pre-process distribution</span></span>
<span class="line"><span style="color:#24292E;">        logits[:, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.unimo.unk_token_id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1e9</span></span>
<span class="line"><span style="color:#24292E;">        logits[:, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.unimo.pad_token_id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1e9</span></span>
<span class="line"><span style="color:#24292E;">        logits[:, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.unimo.bos_token_id] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1e9</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> logits</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>动态信息调整，如根据当前生成句子长度修改 <code>eos_token</code> 的概率。对重复出现的 token 基于惩罚等。通过 <code>paddlenlp.transformers.generation_utils.get_logits_processor</code> 实现，当前支持的功能有最大最小长度控制，重复字符惩罚。 <strong>想要实现更多功能的话需要直接修改该文件。</strong></li></ul><h4 id="计算-beam-score" tabindex="-1"><a class="header-anchor" href="#计算-beam-score" aria-hidden="true">#</a> 计算 beam score</h4><ol><li><strong>通过处理后的 logits 计算下一个 token 的概率，筛选出 top 候选。</strong></li></ol><p>一开始的时候，每个 batch 中有 <code>num_beams</code>个一样的输入，所以应该对 <code>beam_score</code> 配置掩码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">beam_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.zeros(</span></span>
<span class="line"><span style="color:#24292E;">    (batch_size, num_beams), </span><span style="color:#E36209;">dtype</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">paddle.get_default_dtype())</span></span>
<span class="line"><span style="color:#24292E;">beam_scores[:, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1e9</span></span>
<span class="line"><span style="color:#24292E;">beam_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.reshape(beam_scores, [</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了掩码，在后续的 broadcast 相加中，就不会出现同 batch 下多个相同语句的情况了：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># next_scores [batch_size * num_beams, vocab_size]</span></span>
<span class="line"><span style="color:#24292E;">next_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> F.softmax(logits)</span></span>
<span class="line"><span style="color:#24292E;">next_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.log(next_scores)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">next_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next_scores </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> beam_scores.unsqueeze(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将候选序列重新 reshape 为 <code>[batch_size, num_beams * vocab_size]</code> ，然后取 top <code>2*beams</code>？# todo</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">next_scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next_scores.reshape(</span></span>
<span class="line"><span style="color:#24292E;">    [batch_size, num_beams </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> vocab_size])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">next_scores, next_tokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> paddle.topk(</span></span>
<span class="line"><span style="color:#24292E;">    next_scores, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> num_beams, </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">next_indices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next_tokens </span><span style="color:#D73A49;">//</span><span style="color:#24292E;"> vocab_size</span></span>
<span class="line"><span style="color:#6A737D;"># next_indices 得分高的，被选中的候选句子在 next_scores 中的 idx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">next_tokens </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next_tokens </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> vocab_size  </span></span>
<span class="line"><span style="color:#6A737D;"># 排除掉前面 n*vocab_size 个 token。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>由 <code>beam_scorer</code> 计算新时间步的 beam search 输出。<code>beam_scorer.process</code></strong></li></ol><p>上一步中，代码执行后得到了当前时间步下最后的 top <code>2*num_beams</code> 候选词。而在这步中，beam score 根据这些候选词，整理出全局最优的最多 <code>num_beams</code> 个 <code>beam hypothesis</code> 候选句子。具体整理思路比较特别，可参考 <code>paddlenlp.transformers.generation_utils 129-210</code> 行代码。</p><p>共有 <code>batch_size </code>个 <code>beam hypothesis </code>，若当前时间步的候选句子编码结束（eos token），那么就添加到 <code>beam hypothesis</code> 中。对于编码未结束的候选句子，挑选 top <code>num_beams</code> 个作为下一个时间步计算的 <code>beam_scores</code> (<code>shape[batch_size, num_beams]</code>)与 新生成的编码 相加。</p><p>beam_scores 的 group_size 干什么用？</p><ul><li>控制 beam_scores 的大小为 <code>[batch_size, group_size]</code></li></ul><p>num_beam_hyps_to_keep 呢?</p><ul><li>每个 batch 中，beam search 结束后，返回 <code>num_beam_hyps_to_keep</code> 个结果。</li></ul><ol start="3"><li><strong>根据是否使用 <code>cache</code>，更新 <code>token_type_ids</code>，<code>position_ids</code>，<code>attention_mask</code> 等储存在 <code>model_kwargs</code> 中的变量。</strong></li></ol><p>通过<code>paddlenlp.transformers.generation_utils.GenerationMixin.update_model_kwargs_for_generation</code>实现。该操作与 <a href="#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F%E5%A4%84%E7%90%86"><strong>输入格式处理</strong></a> 中的输入处理相似。尽量避免两个函数出现累赘操作。</p><h4 id="输出结果" tabindex="-1"><a class="header-anchor" href="#输出结果" aria-hidden="true">#</a> 输出结果</h4><p>最后由 <code>finalize()</code> 总结所有 beam search 候选句子并输出结果。</p><h2 id="效率优化-cache" tabindex="-1"><a class="header-anchor" href="#效率优化-cache" aria-hidden="true">#</a> 效率优化 - cache</h2><h4 id="cache-主要思想" tabindex="-1"><a class="header-anchor" href="#cache-主要思想" aria-hidden="true">#</a> cache 主要思想：</h4><p>储存模型传导中以固定的变量，如 attention 中的 key、value、query 等</p><h4 id="cache-整体逻辑框架" tabindex="-1"><a class="header-anchor" href="#cache-整体逻辑框架" aria-hidden="true">#</a> cache 整体逻辑框架：</h4><p>对于 encoder decoder 的结构，cache 只能用在 decoder 解码部分。以下根据 paddle 源码进行描述： 对于每个时间步： <code>prepare_inputs_for_generation</code>，若使用 cache 则对 input_ids 和对应的 attentionmask，token_type_ids，position_ids 进行裁剪。 <code>adjust_logits_during_generation</code> 修改一些静态 logits，如将 unk_token，pad_token 或禁用词的概率设置为 <code>-1e9 logits_processors</code> 修改一些动态的 logits，如对重复的 token 进行惩罚，根据 min_length 设置 eos_token 的大小。 对与每个时间步，都需要提取上一步的 cache 记录，然后计算当前步的结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prepare_inputs_for_generation</span><span style="color:#24292E;">(self,</span></span>
<span class="line"><span style="color:#24292E;">                                      input_ids,</span></span>
<span class="line"><span style="color:#24292E;">                                      token_type_ids,</span></span>
<span class="line"><span style="color:#24292E;">                                      position_ids,</span></span>
<span class="line"><span style="color:#24292E;">                                      attention_mask,</span></span>
<span class="line"><span style="color:#24292E;">                                      use_cache</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      cache</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                      </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># only last token for inputs_ids if cache is defined in kwargs</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            input_ids </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input_ids[:, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].unsqueeze(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            token_type_ids </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> token_type_ids[:, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].unsqueeze(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            position_ids </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> position_ids[:, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].unsqueeze(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            attention_mask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> attention_mask[:, :, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, :].unsqueeze(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;input_ids&quot;</span><span style="color:#24292E;">: input_ids,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;token_type_ids&quot;</span><span style="color:#24292E;">: token_type_ids,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;position_ids&quot;</span><span style="color:#24292E;">: position_ids,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;attention_mask&quot;</span><span style="color:#24292E;">: attention_mask,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;use_cache&quot;</span><span style="color:#24292E;">: use_cache,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;cache&quot;</span><span style="color:#24292E;">: cache</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过下面代码，可以看出储存 <code>k,v,q</code> 是 cache 机制的核心。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_prepare_qkv</span><span style="color:#24292E;">(self, query, key, value, cache</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;当 cache 存在时，将 k,v 缓存下来。</span></span>
<span class="line"><span style="color:#032F62;">        Cache = collections.namedtuple(&quot;Cache&quot;, [&quot;k&quot;, &quot;v&quot;])</span></span>
<span class="line"><span style="color:#032F62;">    	StaticCache = collections.namedtuple(&quot;StaticCache&quot;, [&quot;k&quot;, &quot;v&quot;])</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.q_proj(query)</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tensor.reshape(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">q, </span><span style="color:#E36209;">shape</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.num_heads, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.head_dim])</span></span>
<span class="line"><span style="color:#24292E;">    q </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tensor.transpose(</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">q, </span><span style="color:#E36209;">perm</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(cache, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.StaticCache):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># for encoder-decoder attention in inference and has cached</span></span>
<span class="line"><span style="color:#24292E;">        k, v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.k, cache.v</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        k, v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.compute_kv(key, value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(cache, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.Cache):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># for decoder self-attention in inference</span></span>
<span class="line"><span style="color:#24292E;">        k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tensor.concat([cache.k, k], </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tensor.concat([cache.v, v], </span><span style="color:#E36209;">axis</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.Cache(k, v)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (q, k, v) </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> (q, k, v, cache)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 decoder 中的 cross attention，由于 k,v 都来自于 encoder 的 output，所以我们在准备 k，v 的时候，每个 time step 的对应的映射矩阵都是一样的。因此可以将 k，v 储存为上述的 <code>StaticCache</code>。在解码每一个 time step 的时候直接提取使用。</p><p>而对于 decoder 中的 self attention。在解码时，我们通常一个一个词输入，k 和 v 为当前所有的 decoder 的 output。为了避免重复计算 t 时刻之前的 k 与 v，我们可以将他们储存在上述的 <code>Cache</code> 当中。k，v 的形状为 <code>[batch_size, num_heads, sequence_length, embed_dim // num_heads]</code>，在计算 self-attention 的时，只需要计算最近一步的 k，v 然后根据第 2 维度拼接在 <code>Cache</code> 中即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gen_cache</span><span style="color:#24292E;">(self, memory):</span></span>
<span class="line"><span style="color:#24292E;">    incremental_cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.self_attn.gen_cache(</span></span>
<span class="line"><span style="color:#24292E;">        memory, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.self_attn.Cache)</span></span>
<span class="line"><span style="color:#24292E;">    static_cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.cross_attn.gen_cache(</span></span>
<span class="line"><span style="color:#24292E;">        memory, memory, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.cross_attn.StaticCache)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> incremental_cache, static_cache</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>paddle debug</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki github-light" style="background-color:#fff;" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># encoder_output = self(input_ids=input_ids,return_encoder_output=True)[1]</span></span>
<span class="line"><span style="color:#6A737D;"># model_kwargs[&quot;encoder_output&quot;] = encoder_output</span></span>
<span class="line"><span style="color:#6A737D;"># model_kwargs[&quot;decoder_input_ids&quot;] = 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他链接" tabindex="-1"><a class="header-anchor" href="#其他链接" aria-hidden="true">#</a> 其他链接</h2>`,49),u={href:"https://opennmt.net/OpenNMT/translation/beam_search/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://arxiv.org/pdf/1909.05858.pdf",target:"_blank",rel:"noopener noreferrer"},v={href:"https://arxiv.org/abs/1611.08562",target:"_blank",rel:"noopener noreferrer"},_=l('<h2 id="其他论文" tabindex="-1"><a class="header-anchor" href="#其他论文" aria-hidden="true">#</a> 其他论文</h2><ol><li>A Neural Attention Model for Abstractive Sentence Summarization</li><li>A Deep Reinforced Model for Abstractive Summarization</li><li>Incorporating Copying Mechanism in Sequence-to-Sequence Learning</li><li>Get To The Point: Summarization with Pointer-Generator Networks</li><li>Constructing literature abstracts by computer: Techniques and prospects</li><li>Recent automatic text summarization techniques: a survey</li><li>Jointly Learning to Align and Summarize for Neural Cross-Lingual Summarization</li><li>VMSMO: Learning to Generate Multimodal Summary for Video-based News Articles</li><li>Q-learning with Language Model for Edit-based Unsupervised Summarization</li><li>Multi-Fact Correction in Abstractive Text Summarization</li><li>Incorporating Commonsense Knowledge into Abstractive Dialogue Summarization via Heterogeneous Graph Networks</li><li>On extractive and abstractive neural document summarization with transformer language models</li><li>Pre-training an Autoencoding&amp;Autoregressive Language Model for Context-conditioned Generation</li><li>Re-evaluating Evaluation in Text Summarization</li><li>The Mathematics of Statistical Machine Translation: Parameter Estimation</li><li>BLEU: a Method for Automatic Evaluation of Machine Translation</li><li>Statistical Phrase-Based Translation</li><li>Hierarchical Phrase-Based Translation</li><li>Sequence to Sequence Learning with Neural Networks</li><li>Neural Machine Translation by Jointly Learning to Align and Translate</li><li>Adam: A Method for Stochastic Optimization</li><li>Neural Machine Translation of Rare Words with Subword Units</li><li>Attention is All You Need.</li></ol>',2);function h(b,E){const n=p("ExternalLinkIcon");return c(),t("div",null,[d,i("more"),y,s("p",null,[s("a",u,[a("beam search 优化"),e(n)]),s("a",m,[a("repetition penalty"),e(n)]),s("a",v,[a("diversity rate"),e(n)])]),_])}const A=o(r,[["render",h],["__file","笔记sentence_generate.html.vue"]]);export{A as default};
